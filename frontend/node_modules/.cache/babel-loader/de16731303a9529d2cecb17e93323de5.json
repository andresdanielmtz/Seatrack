{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, { canvasPool } from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX } from '../../extent.js';\nimport { createCanvasContext2D, releaseCanvas } from '../../dom.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature as _renderFeature } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nvar CanvasVectorLayerRenderer = /*#__PURE__*/function (_CanvasLayerRenderer) {\n  _inherits(CanvasVectorLayerRenderer, _CanvasLayerRenderer);\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  function CanvasVectorLayerRenderer(vectorLayer) {\n    var _this;\n    _classCallCheck(this, CanvasVectorLayerRenderer);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CanvasVectorLayerRenderer).call(this, vectorLayer));\n\n    /** @private */\n    _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    /**\n     * @type {boolean}\n     */\n    _this.animatingOrInteracting_;\n\n    /**\n     * @type {ImageData|null}\n     */\n    _this.hitDetectionImageData_ = null;\n\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    _this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    _this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    _this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    _this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    _this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    _this.replayGroupChanged = true;\n\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    _this.declutterExecutorGroup = null;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    _this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.compositionContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.opacity_ = 1;\n    return _this;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */\n  _createClass(CanvasVectorLayerRenderer, [{\n    key: \"renderWorlds\",\n    value: function renderWorlds(executorGroup, frameState, declutterTree) {\n      var extent = frameState.extent;\n      var viewState = frameState.viewState;\n      var center = viewState.center;\n      var resolution = viewState.resolution;\n      var projection = viewState.projection;\n      var rotation = viewState.rotation;\n      var projectionExtent = projection.getExtent();\n      var vectorSource = this.getLayer().getSource();\n      var pixelRatio = frameState.pixelRatio;\n      var viewHints = frameState.viewHints;\n      var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n      var context = this.compositionContext_;\n      var width = Math.round(frameState.size[0] * pixelRatio);\n      var height = Math.round(frameState.size[1] * pixelRatio);\n      var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n      var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n      var endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n      var world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n      do {\n        var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n        executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, declutterTree);\n      } while (++world < endWorld);\n    }\n  }, {\n    key: \"setupCompositionContext_\",\n    value: function setupCompositionContext_() {\n      if (this.opacity_ !== 1) {\n        var compositionContext = createCanvasContext2D(this.context.canvas.width, this.context.canvas.height, canvasPool);\n        this.compositionContext_ = compositionContext;\n      } else {\n        this.compositionContext_ = this.context;\n      }\n    }\n  }, {\n    key: \"releaseCompositionContext_\",\n    value: function releaseCompositionContext_() {\n      if (this.opacity_ !== 1) {\n        var alpha = this.context.globalAlpha;\n        this.context.globalAlpha = this.opacity_;\n        this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n        this.context.globalAlpha = alpha;\n        releaseCanvas(this.compositionContext_);\n        canvasPool.push(this.compositionContext_.canvas);\n        this.compositionContext_ = null;\n      }\n    }\n    /**\n     * Render declutter items for this layer\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     */\n  }, {\n    key: \"renderDeclutter\",\n    value: function renderDeclutter(frameState) {\n      if (this.declutterExecutorGroup) {\n        this.setupCompositionContext_();\n        this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n        this.releaseCompositionContext_();\n      }\n    }\n    /**\n     * Render the layer.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n  }, {\n    key: \"renderFrame\",\n    value: function renderFrame(frameState, target) {\n      var pixelRatio = frameState.pixelRatio;\n      var layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n      // set forward and inverse pixel transforms\n      makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n      makeInverse(this.inversePixelTransform, this.pixelTransform);\n      var canvasTransform = transformToString(this.pixelTransform);\n      this.useContainer(target, canvasTransform, this.getBackground(frameState));\n      var context = this.context;\n      var canvas = context.canvas;\n      var replayGroup = this.replayGroup_;\n      var declutterExecutorGroup = this.declutterExecutorGroup;\n      if ((!replayGroup || replayGroup.isEmpty()) && (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n        return null;\n      }\n\n      // resize and clear\n      var width = Math.round(frameState.size[0] * pixelRatio);\n      var height = Math.round(frameState.size[1] * pixelRatio);\n      if (canvas.width != width || canvas.height != height) {\n        canvas.width = width;\n        canvas.height = height;\n        if (canvas.style.transform !== canvasTransform) {\n          canvas.style.transform = canvasTransform;\n        }\n      } else if (!this.containerReused) {\n        context.clearRect(0, 0, width, height);\n      }\n      this.preRender(context, frameState);\n      var viewState = frameState.viewState;\n      var projection = viewState.projection;\n      this.opacity_ = layerState.opacity;\n      this.setupCompositionContext_();\n\n      // clipped rendering if layer extent is set\n      var clipped = false;\n      var render = true;\n      if (layerState.extent && this.clipping) {\n        var layerExtent = fromUserExtent(layerState.extent, projection);\n        render = intersectsExtent(layerExtent, frameState.extent);\n        clipped = render && !containsExtent(layerExtent, frameState.extent);\n        if (clipped) {\n          this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n        }\n      }\n      if (render) {\n        this.renderWorlds(replayGroup, frameState);\n      }\n      if (clipped) {\n        this.compositionContext_.restore();\n      }\n      this.releaseCompositionContext_();\n      this.postRender(context, frameState);\n      if (this.renderedRotation_ !== viewState.rotation) {\n        this.renderedRotation_ = viewState.rotation;\n        this.hitDetectionImageData_ = null;\n      }\n      return this.container;\n    }\n    /**\n     * Asynchronous layer level hit detection.\n     * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\n     * that resolves with an array of features.\n     */\n  }, {\n    key: \"getFeatures\",\n    value: function getFeatures(pixel) {\n      var _this2 = this;\n      return new Promise(function (resolve) {\n        if (!_this2.hitDetectionImageData_ && !_this2.animatingOrInteracting_) {\n          var size = [_this2.context.canvas.width, _this2.context.canvas.height];\n          apply(_this2.pixelTransform, size);\n          var center = _this2.renderedCenter_;\n          var resolution = _this2.renderedResolution_;\n          var rotation = _this2.renderedRotation_;\n          var projection = _this2.renderedProjection_;\n          var extent = _this2.wrappedRenderedExtent_;\n          var layer = _this2.getLayer();\n          var transforms = [];\n          var width = size[0] * HIT_DETECT_RESOLUTION;\n          var height = size[1] * HIT_DETECT_RESOLUTION;\n          transforms.push(_this2.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n          var source = layer.getSource();\n          var projectionExtent = projection.getExtent();\n          if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n            var startX = extent[0];\n            var worldWidth = getWidth(projectionExtent);\n            var world = 0;\n            var offsetX;\n            while (startX < projectionExtent[0]) {\n              --world;\n              offsetX = worldWidth * world;\n              transforms.push(_this2.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n              startX += worldWidth;\n            }\n            world = 0;\n            startX = extent[2];\n            while (startX > projectionExtent[2]) {\n              ++world;\n              offsetX = worldWidth * world;\n              transforms.push(_this2.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n              startX -= worldWidth;\n            }\n          }\n          _this2.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, _this2.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n        }\n        resolve(hitDetect(pixel, _this2.renderedFeatures_, _this2.hitDetectionImageData_));\n      });\n    }\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n  }, {\n    key: \"forEachFeatureAtCoordinate\",\n    value: function forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n      var _this3 = this;\n      if (!this.replayGroup_) {\n        return undefined;\n      }\n      var resolution = frameState.viewState.resolution;\n      var rotation = frameState.viewState.rotation;\n      var layer = this.getLayer();\n\n      /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n      var features = {};\n\n      /**\n       * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n       * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n       * @param {number} distanceSq The squared distance to the click position\n       * @return {T|undefined} Callback result.\n       */\n      var featureCallback = function featureCallback(feature, geometry, distanceSq) {\n        var key = getUid(feature);\n        var match = features[key];\n        if (!match) {\n          if (distanceSq === 0) {\n            features[key] = true;\n            return callback(feature, layer, geometry);\n          }\n          matches.push(features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback\n          });\n        } else if (match !== true && distanceSq < match.distanceSq) {\n          if (distanceSq === 0) {\n            features[key] = true;\n            matches.splice(matches.lastIndexOf(match), 1);\n            return callback(feature, layer, geometry);\n          }\n          match.geometry = geometry;\n          match.distanceSq = distanceSq;\n        }\n        return undefined;\n      };\n      var result;\n      var executorGroups = [this.replayGroup_];\n      if (this.declutterExecutorGroup) {\n        executorGroups.push(this.declutterExecutorGroup);\n      }\n      executorGroups.some(function (executorGroup) {\n        return result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this3.declutterExecutorGroup && frameState.declutterTree ? frameState.declutterTree.all().map(function (item) {\n          return item.value;\n        }) : null);\n      });\n      return result;\n    }\n    /**\n     * Perform action necessary to get the layer rendered after new fonts have loaded\n     */\n  }, {\n    key: \"handleFontsChanged\",\n    value: function handleFontsChanged() {\n      var layer = this.getLayer();\n      if (layer.getVisible() && this.replayGroup_) {\n        layer.changed();\n      }\n    }\n    /**\n     * Handle changes in image style state.\n     * @param {import(\"../../events/Event.js\").default} event Image style change event.\n     * @private\n     */\n  }, {\n    key: \"handleStyleImageChange_\",\n    value: function handleStyleImageChange_(event) {\n      this.renderIfReadyAndVisible();\n    }\n    /**\n     * Determine whether render should be called.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n  }, {\n    key: \"prepareFrame\",\n    value: function prepareFrame(frameState) {\n      var _this4 = this;\n      var vectorLayer = this.getLayer();\n      var vectorSource = vectorLayer.getSource();\n      if (!vectorSource) {\n        return false;\n      }\n      var animating = frameState.viewHints[ViewHint.ANIMATING];\n      var interacting = frameState.viewHints[ViewHint.INTERACTING];\n      var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n      var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n      if (this.ready && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n        this.animatingOrInteracting_ = true;\n        return true;\n      }\n      this.animatingOrInteracting_ = false;\n      var frameStateExtent = frameState.extent;\n      var viewState = frameState.viewState;\n      var projection = viewState.projection;\n      var resolution = viewState.resolution;\n      var pixelRatio = frameState.pixelRatio;\n      var vectorLayerRevision = vectorLayer.getRevision();\n      var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n      var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n      if (vectorLayerRenderOrder === undefined) {\n        vectorLayerRenderOrder = defaultRenderOrder;\n      }\n      var center = viewState.center.slice();\n      var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n      var renderedExtent = extent.slice();\n      var loadExtents = [extent.slice()];\n      var projectionExtent = projection.getExtent();\n      if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, frameState.extent)) {\n        // For the replay group, we need an extent that intersects the real world\n        // (-180° to +180°). To support geometries in a coordinate range from -540°\n        // to +540°, we add at least 1 world width on each side of the projection\n        // extent. If the viewport is wider than the world, we need to add half of\n        // the viewport width to make sure we cover the whole viewport.\n        var worldWidth = getWidth(projectionExtent);\n        var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n        extent[0] = projectionExtent[0] - gutter;\n        extent[2] = projectionExtent[2] + gutter;\n        wrapCoordinateX(center, projection);\n        var loadExtent = wrapExtentX(loadExtents[0], projection);\n        // If the extent crosses the date line, we load data for both edges of the worlds\n        if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {\n          loadExtents.push([loadExtent[0] + worldWidth, loadExtent[1], loadExtent[2] + worldWidth, loadExtent[3]]);\n        } else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {\n          loadExtents.push([loadExtent[0] - worldWidth, loadExtent[1], loadExtent[2] - worldWidth, loadExtent[3]]);\n        }\n      }\n      if (this.ready && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && containsExtent(this.wrappedRenderedExtent_, extent)) {\n        if (!equals(this.renderedExtent_, renderedExtent)) {\n          this.hitDetectionImageData_ = null;\n          this.renderedExtent_ = renderedExtent;\n        }\n        this.renderedCenter_ = center;\n        this.replayGroupChanged = false;\n        return true;\n      }\n      this.replayGroup_ = null;\n      var replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n      var declutterBuilderGroup;\n      if (this.getLayer().getDeclutter()) {\n        declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n      }\n      var userProjection = getUserProjection();\n      var userTransform;\n      if (userProjection) {\n        for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n          var _extent = loadExtents[i];\n          var _userExtent = toUserExtent(_extent, projection);\n          vectorSource.loadFeatures(_userExtent, toUserResolution(resolution, projection), userProjection);\n        }\n        userTransform = getTransformFromProjections(userProjection, projection);\n      } else {\n        for (var _i = 0, _ii = loadExtents.length; _i < _ii; ++_i) {\n          vectorSource.loadFeatures(loadExtents[_i], resolution, projection);\n        }\n      }\n      var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n      var ready = true;\n      var render =\n      /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       */\n      function render(feature) {\n        var styles;\n        var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          var dirty = _this4.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n          ready = ready && !dirty;\n        }\n      };\n      var userExtent = toUserExtent(extent, projection);\n      /** @type {Array<import(\"../../Feature.js\").default>} */\n      var features = vectorSource.getFeaturesInExtent(userExtent);\n      if (vectorLayerRenderOrder) {\n        features.sort(vectorLayerRenderOrder);\n      }\n      for (var _i2 = 0, _ii2 = features.length; _i2 < _ii2; ++_i2) {\n        render(features[_i2]);\n      }\n      this.renderedFeatures_ = features;\n      this.ready = ready;\n      var replayGroupInstructions = replayGroup.finish();\n      var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n      if (declutterBuilderGroup) {\n        this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n      }\n      this.renderedResolution_ = resolution;\n      this.renderedRevision_ = vectorLayerRevision;\n      this.renderedRenderOrder_ = vectorLayerRenderOrder;\n      this.renderedExtent_ = renderedExtent;\n      this.wrappedRenderedExtent_ = extent;\n      this.renderedCenter_ = center;\n      this.renderedProjection_ = projection;\n      this.replayGroup_ = executorGroup;\n      this.hitDetectionImageData_ = null;\n      this.replayGroupChanged = true;\n      return true;\n    }\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @param {number} squaredTolerance Squared render tolerance.\n     * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n     * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n     * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n     * @return {boolean} `true` if an image is loading.\n     */\n  }, {\n    key: \"renderFeature\",\n    value: function renderFeature(feature, squaredTolerance, styles, builderGroup, transform, declutterBuilderGroup) {\n      if (!styles) {\n        return false;\n      }\n      var loading = false;\n      if (Array.isArray(styles)) {\n        for (var i = 0, ii = styles.length; i < ii; ++i) {\n          loading = _renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, transform, declutterBuilderGroup) || loading;\n        }\n      } else {\n        loading = _renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, transform, declutterBuilderGroup);\n      }\n      return loading;\n    }\n  }]);\n  return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer);\nexport default CanvasVectorLayerRenderer;","map":null,"metadata":{},"sourceType":"module"}