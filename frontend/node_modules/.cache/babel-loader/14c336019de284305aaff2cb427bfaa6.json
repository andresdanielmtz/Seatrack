{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/TileCache\n */\nimport LRUCache from './structs/LRUCache.js';\nimport { fromKey, getKey } from './tilecoord.js';\nvar TileCache = /*#__PURE__*/function (_LRUCache) {\n  _inherits(TileCache, _LRUCache);\n  function TileCache() {\n    _classCallCheck(this, TileCache);\n    return _possibleConstructorReturn(this, _getPrototypeOf(TileCache).apply(this, arguments));\n  }\n  _createClass(TileCache, [{\n    key: \"clear\",\n    value: function clear() {\n      while (this.getCount() > 0) {\n        this.pop().release();\n      }\n      _get(_getPrototypeOf(TileCache.prototype), \"clear\", this).call(this);\n    }\n    /**\n     * @param {!Object<string, boolean>} usedTiles Used tiles.\n     */\n  }, {\n    key: \"expireCache\",\n    value: function expireCache(usedTiles) {\n      while (this.canExpireCache()) {\n        var tile = this.peekLast();\n        if (tile.getKey() in usedTiles) {\n          break;\n        } else {\n          this.pop().release();\n        }\n      }\n    }\n    /**\n     * Prune all tiles from the cache that don't have the same z as the newest tile.\n     */\n  }, {\n    key: \"pruneExceptNewestZ\",\n    value: function pruneExceptNewestZ() {\n      var _this = this;\n      if (this.getCount() === 0) {\n        return;\n      }\n      var key = this.peekFirstKey();\n      var tileCoord = fromKey(key);\n      var z = tileCoord[0];\n      this.forEach(function (tile) {\n        if (tile.tileCoord[0] !== z) {\n          _this.remove(getKey(tile.tileCoord));\n          tile.release();\n        }\n      });\n    }\n  }]);\n  return TileCache;\n}(LRUCache);\nexport default TileCache;","map":null,"metadata":{},"sourceType":"module"}