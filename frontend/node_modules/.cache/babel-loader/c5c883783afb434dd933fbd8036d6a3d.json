{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/interaction/DragRotate\n */\nimport PointerInteraction from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { altShiftKeysOnly, mouseActionButton, mouseOnly } from '../events/condition.js';\nimport { disable } from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nvar DragRotate = /*#__PURE__*/function (_PointerInteraction) {\n  _inherits(DragRotate, _PointerInteraction);\n  /**\n   * @param {Options} [options] Options.\n   */\n  function DragRotate(options) {\n    var _this;\n    _classCallCheck(this, DragRotate);\n    options = options ? options : {};\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DragRotate).call(this, {\n      stopDown: FALSE\n    }));\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 250;\n    return _this;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  _createClass(DragRotate, [{\n    key: \"handleDragEvent\",\n    value: function handleDragEvent(mapBrowserEvent) {\n      if (!mouseOnly(mapBrowserEvent)) {\n        return;\n      }\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      if (view.getConstraints().rotation === disable) {\n        return;\n      }\n      var size = map.getSize();\n      var offset = mapBrowserEvent.pixel;\n      var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n      if (this.lastAngle_ !== undefined) {\n        var delta = theta - this.lastAngle_;\n        view.adjustRotationInternal(-delta);\n      }\n      this.lastAngle_ = theta;\n    }\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n  }, {\n    key: \"handleUpEvent\",\n    value: function handleUpEvent(mapBrowserEvent) {\n      if (!mouseOnly(mapBrowserEvent)) {\n        return true;\n      }\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      view.endInteraction(this.duration_);\n      return false;\n    }\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n  }, {\n    key: \"handleDownEvent\",\n    value: function handleDownEvent(mapBrowserEvent) {\n      if (!mouseOnly(mapBrowserEvent)) {\n        return false;\n      }\n      if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n        var map = mapBrowserEvent.map;\n        map.getView().beginInteraction();\n        this.lastAngle_ = undefined;\n        return true;\n      }\n      return false;\n    }\n  }]);\n  return DragRotate;\n}(PointerInteraction);\nexport default DragRotate;","map":null,"metadata":{},"sourceType":"module"}