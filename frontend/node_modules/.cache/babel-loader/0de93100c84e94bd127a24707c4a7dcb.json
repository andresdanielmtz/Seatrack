{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n * @module ol/style/Stroke\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nvar Stroke = /*#__PURE__*/function () {\n  /**\n   * @param {Options} [options] Options.\n   */\n  function Stroke(options) {\n    _classCallCheck(this, Stroke);\n    options = options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {CanvasLineCap|undefined}\n     */\n    this.lineCap_ = options.lineCap;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lineDashOffset_ = options.lineDashOffset;\n\n    /**\n     * @private\n     * @type {CanvasLineJoin|undefined}\n     */\n    this.lineJoin_ = options.lineJoin;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.miterLimit_ = options.miterLimit;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */\n  _createClass(Stroke, [{\n    key: \"clone\",\n    value: function clone() {\n      var color = this.getColor();\n      return new Stroke({\n        color: Array.isArray(color) ? color.slice() : color || undefined,\n        lineCap: this.getLineCap(),\n        lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n        lineDashOffset: this.getLineDashOffset(),\n        lineJoin: this.getLineJoin(),\n        miterLimit: this.getMiterLimit(),\n        width: this.getWidth()\n      });\n    }\n    /**\n     * Get the stroke color.\n     * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n     * @api\n     */\n  }, {\n    key: \"getColor\",\n    value: function getColor() {\n      return this.color_;\n    }\n    /**\n     * Get the line cap type for the stroke.\n     * @return {CanvasLineCap|undefined} Line cap.\n     * @api\n     */\n  }, {\n    key: \"getLineCap\",\n    value: function getLineCap() {\n      return this.lineCap_;\n    }\n    /**\n     * Get the line dash style for the stroke.\n     * @return {Array<number>|null} Line dash.\n     * @api\n     */\n  }, {\n    key: \"getLineDash\",\n    value: function getLineDash() {\n      return this.lineDash_;\n    }\n    /**\n     * Get the line dash offset for the stroke.\n     * @return {number|undefined} Line dash offset.\n     * @api\n     */\n  }, {\n    key: \"getLineDashOffset\",\n    value: function getLineDashOffset() {\n      return this.lineDashOffset_;\n    }\n    /**\n     * Get the line join type for the stroke.\n     * @return {CanvasLineJoin|undefined} Line join.\n     * @api\n     */\n  }, {\n    key: \"getLineJoin\",\n    value: function getLineJoin() {\n      return this.lineJoin_;\n    }\n    /**\n     * Get the miter limit for the stroke.\n     * @return {number|undefined} Miter limit.\n     * @api\n     */\n  }, {\n    key: \"getMiterLimit\",\n    value: function getMiterLimit() {\n      return this.miterLimit_;\n    }\n    /**\n     * Get the stroke width.\n     * @return {number|undefined} Width.\n     * @api\n     */\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.width_;\n    }\n    /**\n     * Set the color.\n     *\n     * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n     * @api\n     */\n  }, {\n    key: \"setColor\",\n    value: function setColor(color) {\n      this.color_ = color;\n    }\n    /**\n     * Set the line cap.\n     *\n     * @param {CanvasLineCap|undefined} lineCap Line cap.\n     * @api\n     */\n  }, {\n    key: \"setLineCap\",\n    value: function setLineCap(lineCap) {\n      this.lineCap_ = lineCap;\n    }\n    /**\n     * Set the line dash.\n     *\n     * @param {Array<number>|null} lineDash Line dash.\n     * @api\n     */\n  }, {\n    key: \"setLineDash\",\n    value: function setLineDash(lineDash) {\n      this.lineDash_ = lineDash;\n    }\n    /**\n     * Set the line dash offset.\n     *\n     * @param {number|undefined} lineDashOffset Line dash offset.\n     * @api\n     */\n  }, {\n    key: \"setLineDashOffset\",\n    value: function setLineDashOffset(lineDashOffset) {\n      this.lineDashOffset_ = lineDashOffset;\n    }\n    /**\n     * Set the line join.\n     *\n     * @param {CanvasLineJoin|undefined} lineJoin Line join.\n     * @api\n     */\n  }, {\n    key: \"setLineJoin\",\n    value: function setLineJoin(lineJoin) {\n      this.lineJoin_ = lineJoin;\n    }\n    /**\n     * Set the miter limit.\n     *\n     * @param {number|undefined} miterLimit Miter limit.\n     * @api\n     */\n  }, {\n    key: \"setMiterLimit\",\n    value: function setMiterLimit(miterLimit) {\n      this.miterLimit_ = miterLimit;\n    }\n    /**\n     * Set the width.\n     *\n     * @param {number|undefined} width Width.\n     * @api\n     */\n  }, {\n    key: \"setWidth\",\n    value: function setWidth(width) {\n      this.width_ = width;\n    }\n  }]);\n  return Stroke;\n}();\nexport default Stroke;","map":null,"metadata":{},"sourceType":"module"}