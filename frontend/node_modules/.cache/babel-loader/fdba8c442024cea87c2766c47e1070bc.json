{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n * @module ol/render/VectorContext\n */\n/**\n * @classdesc\n * Context for drawing geometries.  A vector context is available on render\n * events and does not need to be constructed directly.\n * @api\n */\nvar VectorContext = /*#__PURE__*/function () {\n  function VectorContext() {\n    _classCallCheck(this, VectorContext);\n  }\n  _createClass(VectorContext, [{\n    key: \"drawCustom\",\n    /**\n     * Render a geometry with a custom renderer.\n     *\n     * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     * @param {Function} renderer Renderer.\n     * @param {Function} hitDetectionRenderer Renderer.\n     */\n    value: function drawCustom(geometry, feature, renderer, hitDetectionRenderer) {}\n    /**\n     * Render a geometry.\n     *\n     * @param {import(\"../geom/Geometry.js\").default} geometry The geometry to render.\n     */\n  }, {\n    key: \"drawGeometry\",\n    value: function drawGeometry(geometry) {}\n    /**\n     * Set the rendering style.\n     *\n     * @param {import(\"../style/Style.js\").default} style The rendering style.\n     */\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(style) {}\n    /**\n     * @param {import(\"../geom/Circle.js\").default} circleGeometry Circle geometry.\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     */\n  }, {\n    key: \"drawCircle\",\n    value: function drawCircle(circleGeometry, feature) {}\n    /**\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     * @param {import(\"../style/Style.js\").default} style Style.\n     */\n  }, {\n    key: \"drawFeature\",\n    value: function drawFeature(feature, style) {}\n    /**\n     * @param {import(\"../geom/GeometryCollection.js\").default} geometryCollectionGeometry Geometry collection.\n     * @param {import(\"../Feature.js\").default} feature Feature.\n     */\n  }, {\n    key: \"drawGeometryCollection\",\n    value: function drawGeometryCollection(geometryCollectionGeometry, feature) {}\n    /**\n     * @param {import(\"../geom/LineString.js\").default|import(\"./Feature.js\").default} lineStringGeometry Line string geometry.\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     */\n  }, {\n    key: \"drawLineString\",\n    value: function drawLineString(lineStringGeometry, feature) {}\n    /**\n     * @param {import(\"../geom/MultiLineString.js\").default|import(\"./Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     */\n  }, {\n    key: \"drawMultiLineString\",\n    value: function drawMultiLineString(multiLineStringGeometry, feature) {}\n    /**\n     * @param {import(\"../geom/MultiPoint.js\").default|import(\"./Feature.js\").default} multiPointGeometry MultiPoint geometry.\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     */\n  }, {\n    key: \"drawMultiPoint\",\n    value: function drawMultiPoint(multiPointGeometry, feature) {}\n    /**\n     * @param {import(\"../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     */\n  }, {\n    key: \"drawMultiPolygon\",\n    value: function drawMultiPolygon(multiPolygonGeometry, feature) {}\n    /**\n     * @param {import(\"../geom/Point.js\").default|import(\"./Feature.js\").default} pointGeometry Point geometry.\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     */\n  }, {\n    key: \"drawPoint\",\n    value: function drawPoint(pointGeometry, feature) {}\n    /**\n     * @param {import(\"../geom/Polygon.js\").default|import(\"./Feature.js\").default} polygonGeometry Polygon geometry.\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     */\n  }, {\n    key: \"drawPolygon\",\n    value: function drawPolygon(polygonGeometry, feature) {}\n    /**\n     * @param {import(\"../geom/SimpleGeometry.js\").default|import(\"./Feature.js\").default} geometry Geometry.\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     */\n  }, {\n    key: \"drawText\",\n    value: function drawText(geometry, feature) {}\n    /**\n     * @param {import(\"../style/Fill.js\").default} fillStyle Fill style.\n     * @param {import(\"../style/Stroke.js\").default} strokeStyle Stroke style.\n     */\n  }, {\n    key: \"setFillStrokeStyle\",\n    value: function setFillStrokeStyle(fillStyle, strokeStyle) {}\n    /**\n     * @param {import(\"../style/Image.js\").default} imageStyle Image style.\n     * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.\n     */\n  }, {\n    key: \"setImageStyle\",\n    value: function setImageStyle(imageStyle, declutterImageWithText) {}\n    /**\n     * @param {import(\"../style/Text.js\").default} textStyle Text style.\n     * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.\n     */\n  }, {\n    key: \"setTextStyle\",\n    value: function setTextStyle(textStyle, declutterImageWithText) {}\n  }]);\n  return VectorContext;\n}();\nexport default VectorContext;","map":null,"metadata":{},"sourceType":"module"}