{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\nimport { getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport var canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar pixelContext = null;\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true\n  });\n}\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nvar CanvasLayerRenderer = /*#__PURE__*/function (_LayerRenderer) {\n  _inherits(CanvasLayerRenderer, _LayerRenderer);\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  function CanvasLayerRenderer(layer) {\n    var _this;\n    _classCallCheck(this, CanvasLayerRenderer);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CanvasLayerRenderer).call(this, layer));\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    _this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    _this.containerReused = false;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.pixelContext_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    _this.frameState = null;\n    return _this;\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  _createClass(CanvasLayerRenderer, [{\n    key: \"getImageData\",\n    value: function getImageData(image, col, row) {\n      if (!pixelContext) {\n        createPixelContext();\n      }\n      pixelContext.clearRect(0, 0, 1, 1);\n      var data;\n      try {\n        pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n        data = pixelContext.getImageData(0, 0, 1, 1).data;\n      } catch (err) {\n        pixelContext = null;\n        return null;\n      }\n      return data;\n    }\n    /**\n     * @param {import('../../Map.js').FrameState} frameState Frame state.\n     * @return {string} Background color.\n     */\n  }, {\n    key: \"getBackground\",\n    value: function getBackground(frameState) {\n      var layer = this.getLayer();\n      var background = layer.getBackground();\n      if (typeof background === 'function') {\n        background = background(frameState.viewState.resolution);\n      }\n      return background || undefined;\n    }\n    /**\n     * Get a rendering container from an existing target, if compatible.\n     * @param {HTMLElement} target Potential render target.\n     * @param {string} transform CSS Transform.\n     * @param {string} [backgroundColor] Background color.\n     */\n  }, {\n    key: \"useContainer\",\n    value: function useContainer(target, transform, backgroundColor) {\n      var layerClassName = this.getLayer().getClassName();\n      var container, context;\n      if (target && target.className === layerClassName && (!backgroundColor || target && target.style.backgroundColor && equals(asArray(target.style.backgroundColor), asArray(backgroundColor)))) {\n        var canvas = target.firstElementChild;\n        if (canvas instanceof HTMLCanvasElement) {\n          context = canvas.getContext('2d');\n        }\n      }\n      if (context && context.canvas.style.transform === transform) {\n        // Container of the previous layer renderer can be used.\n        this.container = target;\n        this.context = context;\n        this.containerReused = true;\n      } else if (this.containerReused) {\n        // Previously reused container cannot be used any more.\n        this.container = null;\n        this.context = null;\n        this.containerReused = false;\n      }\n      if (!this.container) {\n        container = document.createElement('div');\n        container.className = layerClassName;\n        var style = container.style;\n        style.position = 'absolute';\n        style.width = '100%';\n        style.height = '100%';\n        context = createCanvasContext2D();\n        var _canvas = context.canvas;\n        container.appendChild(_canvas);\n        style = _canvas.style;\n        style.position = 'absolute';\n        style.left = '0';\n        style.transformOrigin = 'top left';\n        this.container = container;\n        this.context = context;\n      }\n      if (!this.containerReused && backgroundColor && !this.container.style.backgroundColor) {\n        this.container.style.backgroundColor = backgroundColor;\n      }\n    }\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n     * @protected\n     */\n  }, {\n    key: \"clipUnrotated\",\n    value: function clipUnrotated(context, frameState, extent) {\n      var topLeft = getTopLeft(extent);\n      var topRight = getTopRight(extent);\n      var bottomRight = getBottomRight(extent);\n      var bottomLeft = getBottomLeft(extent);\n      applyTransform(frameState.coordinateToPixelTransform, topLeft);\n      applyTransform(frameState.coordinateToPixelTransform, topRight);\n      applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n      applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n      var inverted = this.inversePixelTransform;\n      applyTransform(inverted, topLeft);\n      applyTransform(inverted, topRight);\n      applyTransform(inverted, bottomRight);\n      applyTransform(inverted, bottomLeft);\n      context.save();\n      context.beginPath();\n      context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n      context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n      context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n      context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n      context.clip();\n    }\n    /**\n     * @param {import(\"../../render/EventType.js\").default} type Event type.\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @private\n     */\n  }, {\n    key: \"dispatchRenderEvent_\",\n    value: function dispatchRenderEvent_(type, context, frameState) {\n      var layer = this.getLayer();\n      if (layer.hasListener(type)) {\n        var event = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n        layer.dispatchEvent(event);\n      }\n    }\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n  }, {\n    key: \"preRender\",\n    value: function preRender(context, frameState) {\n      this.frameState = frameState;\n      this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n    }\n    /**\n     * @param {CanvasRenderingContext2D} context Context.\n     * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n     * @protected\n     */\n  }, {\n    key: \"postRender\",\n    value: function postRender(context, frameState) {\n      this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n    }\n    /**\n     * Creates a transform for rendering to an element that will be rotated after rendering.\n     * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {number} width Width of the rendered element (in pixels).\n     * @param {number} height Height of the rendered element (in pixels).\n     * @param {number} offsetX Offset on the x-axis in view coordinates.\n     * @protected\n     * @return {!import(\"../../transform.js\").Transform} Transform.\n     */\n  }, {\n    key: \"getRenderTransform\",\n    value: function getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX) {\n      var dx1 = width / 2;\n      var dy1 = height / 2;\n      var sx = pixelRatio / resolution;\n      var sy = -sx;\n      var dx2 = -center[0] + offsetX;\n      var dy2 = -center[1];\n      return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n    }\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      delete this.frameState;\n      _get(_getPrototypeOf(CanvasLayerRenderer.prototype), \"disposeInternal\", this).call(this);\n    }\n  }]);\n  return CanvasLayerRenderer;\n}(LayerRenderer);\nexport default CanvasLayerRenderer;","map":null,"metadata":{},"sourceType":"module"}