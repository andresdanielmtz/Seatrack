{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { isEmpty as _isEmpty } from '../obj.js';\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nvar RBush = /*#__PURE__*/function () {\n  /**\n   * @param {number} [maxEntries] Max entries.\n   */\n  function RBush(maxEntries) {\n    _classCallCheck(this, RBush);\n    /**\n     * @private\n     */\n    this.rbush_ = new RBush_(maxEntries);\n\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n    this.items_ = {};\n  }\n\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  _createClass(RBush, [{\n    key: \"insert\",\n    value: function insert(extent, value) {\n      /** @type {Entry} */\n      var item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value\n      };\n      this.rbush_.insert(item);\n      this.items_[getUid(value)] = item;\n    }\n    /**\n     * Bulk-insert values into the RBush.\n     * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n     * @param {Array<T>} values Values.\n     */\n  }, {\n    key: \"load\",\n    value: function load(extents, values) {\n      var items = new Array(values.length);\n      for (var i = 0, l = values.length; i < l; i++) {\n        var extent = extents[i];\n        var value = values[i];\n\n        /** @type {Entry} */\n        var item = {\n          minX: extent[0],\n          minY: extent[1],\n          maxX: extent[2],\n          maxY: extent[3],\n          value: value\n        };\n        items[i] = item;\n        this.items_[getUid(value)] = item;\n      }\n      this.rbush_.load(items);\n    }\n    /**\n     * Remove a value from the RBush.\n     * @param {T} value Value.\n     * @return {boolean} Removed.\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(value) {\n      var uid = getUid(value);\n\n      // get the object in which the value was wrapped when adding to the\n      // internal rbush. then use that object to do the removal.\n      var item = this.items_[uid];\n      delete this.items_[uid];\n      return this.rbush_.remove(item) !== null;\n    }\n    /**\n     * Update the extent of a value in the RBush.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {T} value Value.\n     */\n  }, {\n    key: \"update\",\n    value: function update(extent, value) {\n      var item = this.items_[getUid(value)];\n      var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n      if (!equals(bbox, extent)) {\n        this.remove(value);\n        this.insert(extent, value);\n      }\n    }\n    /**\n     * Return all values in the RBush.\n     * @return {Array<T>} All.\n     */\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      var items = this.rbush_.all();\n      return items.map(function (item) {\n        return item.value;\n      });\n    }\n    /**\n     * Return all values in the given extent.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @return {Array<T>} All in extent.\n     */\n  }, {\n    key: \"getInExtent\",\n    value: function getInExtent(extent) {\n      /** @type {Entry} */\n      var bbox = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3]\n      };\n      var items = this.rbush_.search(bbox);\n      return items.map(function (item) {\n        return item.value;\n      });\n    }\n    /**\n     * Calls a callback function with each value in the tree.\n     * If the callback returns a truthy value, this value is returned without\n     * checking the rest of the tree.\n     * @param {function(T): *} callback Callback.\n     * @return {*} Callback return value.\n     */\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      return this.forEach_(this.getAll(), callback);\n    }\n    /**\n     * Calls a callback function with each value in the provided extent.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {function(T): *} callback Callback.\n     * @return {*} Callback return value.\n     */\n  }, {\n    key: \"forEachInExtent\",\n    value: function forEachInExtent(extent, callback) {\n      return this.forEach_(this.getInExtent(extent), callback);\n    }\n    /**\n     * @param {Array<T>} values Values.\n     * @param {function(T): *} callback Callback.\n     * @private\n     * @return {*} Callback return value.\n     */\n  }, {\n    key: \"forEach_\",\n    value: function forEach_(values, callback) {\n      var result;\n      for (var i = 0, l = values.length; i < l; i++) {\n        result = callback(values[i]);\n        if (result) {\n          return result;\n        }\n      }\n      return result;\n    }\n    /**\n     * @return {boolean} Is empty.\n     */\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return _isEmpty(this.items_);\n    }\n    /**\n     * Remove all values from the RBush.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.rbush_.clear();\n      this.items_ = {};\n    }\n    /**\n     * @param {import(\"../extent.js\").Extent} [extent] Extent.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     */\n  }, {\n    key: \"getExtent\",\n    value: function getExtent(extent) {\n      var data = this.rbush_.toJSON();\n      return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, extent);\n    }\n    /**\n     * @param {RBush} rbush R-Tree.\n     */\n  }, {\n    key: \"concat\",\n    value: function concat(rbush) {\n      this.rbush_.load(rbush.rbush_.all());\n      for (var i in rbush.items_) {\n        this.items_[i] = rbush.items_[i];\n      }\n    }\n  }]);\n  return RBush;\n}();\nexport default RBush;","map":null,"metadata":{},"sourceType":"module"}