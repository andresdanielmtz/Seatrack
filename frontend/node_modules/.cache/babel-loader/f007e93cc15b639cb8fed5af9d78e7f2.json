{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport { get as getProjection } from '../proj.js';\n\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n\n/**\n * A function that takes a {@link module:ol/Map~FrameState} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../Map.js\").FrameState): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nvar Source = /*#__PURE__*/function (_BaseObject) {\n  _inherits(Source, _BaseObject);\n  /**\n   * @param {Options} options Source options.\n   */\n  function Source(options) {\n    var _this;\n    _classCallCheck(this, Source);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Source).call(this));\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */\n    _this.projection = getProjection(options.projection);\n\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n    _this.attributions_ = adaptAttributions(options.attributions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ? options.attributionsCollapsible : true;\n\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n    _this.loading = false;\n\n    /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */\n    _this.state_ = options.state !== undefined ? options.state : 'ready';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.interpolate_ = !!options.interpolate;\n\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n    _this.viewResolver = null;\n\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n    _this.viewRejector = null;\n    var self = _assertThisInitialized(_assertThisInitialized(_this));\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n    _this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n    return _this;\n  }\n\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n  _createClass(Source, [{\n    key: \"getAttributions\",\n    value: function getAttributions() {\n      return this.attributions_;\n    }\n    /**\n     * @return {boolean} Attributions are collapsible.\n     * @api\n     */\n  }, {\n    key: \"getAttributionsCollapsible\",\n    value: function getAttributionsCollapsible() {\n      return this.attributionsCollapsible_;\n    }\n    /**\n     * Get the projection of the source.\n     * @return {import(\"../proj/Projection.js\").default|null} Projection.\n     * @api\n     */\n  }, {\n    key: \"getProjection\",\n    value: function getProjection() {\n      return this.projection;\n    }\n    /**\n     * @param {import(\"../proj/Projection\").default} [projection] Projection.\n     * @return {Array<number>|null} Resolutions.\n     */\n  }, {\n    key: \"getResolutions\",\n    value: function getResolutions(projection) {\n      return null;\n    }\n    /**\n     * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n     */\n  }, {\n    key: \"getView\",\n    value: function getView() {\n      return this.viewPromise_;\n    }\n    /**\n     * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n     * @return {import(\"./Source.js\").State} State.\n     * @api\n     */\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this.state_;\n    }\n    /**\n     * @return {boolean|undefined} Wrap X.\n     */\n  }, {\n    key: \"getWrapX\",\n    value: function getWrapX() {\n      return this.wrapX_;\n    }\n    /**\n     * @return {boolean} Use linear interpolation when resampling.\n     */\n  }, {\n    key: \"getInterpolate\",\n    value: function getInterpolate() {\n      return this.interpolate_;\n    }\n    /**\n     * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n     * @api\n     */\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      this.changed();\n    }\n    /**\n     * Set the attributions of the source.\n     * @param {AttributionLike|undefined} attributions Attributions.\n     *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n     *     or `undefined`.\n     * @api\n     */\n  }, {\n    key: \"setAttributions\",\n    value: function setAttributions(attributions) {\n      this.attributions_ = adaptAttributions(attributions);\n      this.changed();\n    }\n    /**\n     * Set the state of the source.\n     * @param {import(\"./Source.js\").State} state State.\n     */\n  }, {\n    key: \"setState\",\n    value: function setState(state) {\n      this.state_ = state;\n      this.changed();\n    }\n  }]);\n  return Source;\n}(BaseObject);\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\nexport default Source;","map":null,"metadata":{},"sourceType":"module"}