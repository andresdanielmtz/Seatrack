{"ast":null,"code":"/**\n * @module ol/render/canvas/hitdetect\n */\n\nimport CanvasImmediateRenderer from './Immediate.js';\nimport { Icon } from '../../style.js';\nimport { ascending } from '../../array.js';\nimport { clamp } from '../../math.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { intersects } from '../../extent.js';\nexport var HIT_DETECT_RESOLUTION = 0.5;\n\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {\n  var width = size[0] * HIT_DETECT_RESOLUTION;\n  var height = size[1] * HIT_DETECT_RESOLUTION;\n  var context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  var canvas = context.canvas;\n  var renderer = new CanvasImmediateRenderer(context, HIT_DETECT_RESOLUTION, extent, null, rotation);\n  var featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  var indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  var featuresByZIndex = {};\n  for (var i = 1; i <= featureCount; ++i) {\n    var feature = features[i - 1];\n    var featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!styleFunction) {\n      continue;\n    }\n    var styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    var index = i * indexFactor;\n    var color = index.toString(16).padStart(7, '#00000');\n    for (var j = 0, jj = styles.length; j < jj; ++j) {\n      var originalStyle = styles[j];\n      var geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\n        continue;\n      }\n      var style = originalStyle.clone();\n      var fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      var stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      var image = originalStyle.getImage();\n      if (image && image.getOpacity() !== 0) {\n        var imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n        var imgContext = createCanvasContext2D(imgSize[0], imgSize[1], undefined, {\n          alpha: false\n        });\n        var img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(new Icon({\n          img: img,\n          imgSize: imgSize,\n          anchor: image.getAnchor(),\n          anchorXUnits: 'pixels',\n          anchorYUnits: 'pixels',\n          offset: image.getOrigin(),\n          opacity: 1,\n          size: image.getSize(),\n          scale: image.getScale(),\n          rotation: image.getRotation(),\n          rotateWithView: image.getRotateWithView()\n        }));\n      }\n      var zIndex = style.getZIndex() || 0;\n      var byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n      var type = geometry.getType();\n      if (type === 'GeometryCollection') {\n        var geometries = /** @type {import(\"../../geom/GeometryCollection.js\").default} */geometry.getGeometriesArrayRecursive();\n        for (var _i = 0, ii = geometries.length; _i < ii; ++_i) {\n          var _geometry = geometries[_i];\n          byGeometryType[_geometry.getType().replace('Multi', '')].push(_geometry, style);\n        }\n      } else {\n        byGeometryType[type.replace('Multi', '')].push(geometry, style);\n      }\n    }\n  }\n  var zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);\n  for (var _i2 = 0, _ii = zIndexKeys.length; _i2 < _ii; ++_i2) {\n    var _byGeometryType = featuresByZIndex[zIndexKeys[_i2]];\n    for (var _type in _byGeometryType) {\n      var geomAndStyle = _byGeometryType[_type];\n      for (var _j = 0, _jj = geomAndStyle.length; _j < _jj; _j += 2) {\n        renderer.setStyle(geomAndStyle[_j + 1]);\n        for (var k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[_j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<F>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<F>} Features.\n * @template {import(\"../../Feature.js\").FeatureLike} F\n */\nexport function hitDetect(pixel, features, imageData) {\n  var resultFeatures = [];\n  if (imageData) {\n    var x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    var y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    var index = (clamp(x, 0, imageData.width - 1) + clamp(y, 0, imageData.height - 1) * imageData.width) * 4;\n    var r = imageData.data[index];\n    var g = imageData.data[index + 1];\n    var b = imageData.data[index + 2];\n    var i = b + 256 * (g + 256 * r);\n    var indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  // @ts-ignore Features are copied from `features` to `resultFeatures` so the type should be the same\n  return resultFeatures;\n}","map":null,"metadata":{},"sourceType":"module"}