{"ast":null,"code":"import _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/Geolocation\n */\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport { circular as circularPolygon } from './geom/Polygon.js';\nimport { get as getProjection, getTransformFromProjections, identityTransform } from './proj.js';\nimport { toRadians } from './math.js';\n\n/**\n * @enum {string}\n */\nvar Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions'\n};\n\n/**\n * @enum string\n */\nvar GeolocationErrorType = {\n  /**\n   * Triggered when a `GeolocationPositionError` occurs.\n   * @event module:ol/Geolocation.GeolocationError#error\n   * @api\n   */\n  ERROR: 'error'\n};\n\n/**\n * @classdesc\n * Events emitted on [GeolocationPositionError](https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError).\n */\nexport var GeolocationError = /*#__PURE__*/function (_BaseEvent) {\n  _inherits(GeolocationError, _BaseEvent);\n  /**\n   * @param {GeolocationPositionError} error error object.\n   */\n  function GeolocationError(error) {\n    var _this;\n    _classCallCheck(this, GeolocationError);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GeolocationError).call(this, GeolocationErrorType.ERROR));\n\n    /**\n     * Code of the underlying `GeolocationPositionError`.\n     * @type {number}\n     * @api\n     */\n    _this.code = error.code;\n\n    /**\n     * Message of the underlying `GeolocationPositionError`.\n     * @type {string}\n     * @api\n     */\n    _this.message = error.message;\n    return _this;\n  }\n  return GeolocationError;\n}(BaseEvent);\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<'change', import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes, Return>} GeolocationOnSignature\n */\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes and errors, register listeners for the generic\n * `change` event and the `error` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     const geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       console.log(geolocation.getPosition());\n *     });\n *     // listen to error\n *     geolocation.on('error', function(evt) {\n *       window.console.log(evt.message);\n *     });\n *\n * @fires GeolocationError\n * @api\n */\nvar Geolocation = /*#__PURE__*/function (_BaseObject) {\n  _inherits(Geolocation, _BaseObject);\n  /**\n   * @param {Options} [options] Options.\n   */\n  function Geolocation(options) {\n    var _this2;\n    _classCallCheck(this, Geolocation);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Geolocation).call(this));\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this2.on;\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this2.once;\n\n    /***\n     * @type {GeolocationOnSignature<void>}\n     */\n    _this2.un;\n    options = options || {};\n\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    _this2.position_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n    _this2.transform_ = identityTransform;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this2.watchId_ = undefined;\n    _this2.addChangeListener(Property.PROJECTION, _this2.handleProjectionChanged_);\n    _this2.addChangeListener(Property.TRACKING, _this2.handleTrackingChanged_);\n    if (options.projection !== undefined) {\n      _this2.setProjection(options.projection);\n    }\n    if (options.trackingOptions !== undefined) {\n      _this2.setTrackingOptions(options.trackingOptions);\n    }\n    _this2.setTracking(options.tracking !== undefined ? options.tracking : false);\n    return _this2;\n  }\n\n  /**\n   * Clean up.\n   */\n  _createClass(Geolocation, [{\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      this.setTracking(false);\n      _get(_getPrototypeOf(Geolocation.prototype), \"disposeInternal\", this).call(this);\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleProjectionChanged_\",\n    value: function handleProjectionChanged_() {\n      var projection = this.getProjection();\n      if (projection) {\n        this.transform_ = getTransformFromProjections(getProjection('EPSG:4326'), projection);\n        if (this.position_) {\n          this.set(Property.POSITION, this.transform_(this.position_));\n        }\n      }\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleTrackingChanged_\",\n    value: function handleTrackingChanged_() {\n      if ('geolocation' in navigator) {\n        var tracking = this.getTracking();\n        if (tracking && this.watchId_ === undefined) {\n          this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n        } else if (!tracking && this.watchId_ !== undefined) {\n          navigator.geolocation.clearWatch(this.watchId_);\n          this.watchId_ = undefined;\n        }\n      }\n    }\n    /**\n     * @private\n     * @param {GeolocationPosition} position position event.\n     */\n  }, {\n    key: \"positionChange_\",\n    value: function positionChange_(position) {\n      var coords = position.coords;\n      this.set(Property.ACCURACY, coords.accuracy);\n      this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n      this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n      this.set(Property.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));\n      if (!this.position_) {\n        this.position_ = [coords.longitude, coords.latitude];\n      } else {\n        this.position_[0] = coords.longitude;\n        this.position_[1] = coords.latitude;\n      }\n      var projectedPosition = this.transform_(this.position_);\n      this.set(Property.POSITION, projectedPosition.slice());\n      this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n      var geometry = circularPolygon(this.position_, coords.accuracy);\n      geometry.applyTransform(this.transform_);\n      this.set(Property.ACCURACY_GEOMETRY, geometry);\n      this.changed();\n    }\n    /**\n     * @private\n     * @param {GeolocationPositionError} error error object.\n     */\n  }, {\n    key: \"positionError_\",\n    value: function positionError_(error) {\n      this.dispatchEvent(new GeolocationError(error));\n    }\n    /**\n     * Get the accuracy of the position in meters.\n     * @return {number|undefined} The accuracy of the position measurement in\n     *     meters.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getAccuracy\",\n    value: function getAccuracy() {\n      return (/** @type {number|undefined} */this.get(Property.ACCURACY)\n      );\n    }\n    /**\n     * Get a geometry of the position accuracy.\n     * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getAccuracyGeometry\",\n    value: function getAccuracyGeometry() {\n      return (/** @type {?import(\"./geom/Polygon.js\").default} */\n        this.get(Property.ACCURACY_GEOMETRY) || null\n      );\n    }\n    /**\n     * Get the altitude associated with the position.\n     * @return {number|undefined} The altitude of the position in meters above mean\n     *     sea level.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getAltitude\",\n    value: function getAltitude() {\n      return (/** @type {number|undefined} */this.get(Property.ALTITUDE)\n      );\n    }\n    /**\n     * Get the altitude accuracy of the position.\n     * @return {number|undefined} The accuracy of the altitude measurement in\n     *     meters.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getAltitudeAccuracy\",\n    value: function getAltitudeAccuracy() {\n      return (/** @type {number|undefined} */\n        this.get(Property.ALTITUDE_ACCURACY)\n      );\n    }\n    /**\n     * Get the heading as radians clockwise from North.\n     * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n     * is set to `true` in the tracking options.\n     * @return {number|undefined} The heading of the device in radians from north.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getHeading\",\n    value: function getHeading() {\n      return (/** @type {number|undefined} */this.get(Property.HEADING)\n      );\n    }\n    /**\n     * Get the position of the device.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n     *     in the current projection.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return (/** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n        this.get(Property.POSITION)\n      );\n    }\n    /**\n     * Get the projection associated with the position.\n     * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n     *     reported in.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getProjection\",\n    value: function getProjection() {\n      return (/** @type {import(\"./proj/Projection.js\").default|undefined} */\n        this.get(Property.PROJECTION)\n      );\n    }\n    /**\n     * Get the speed in meters per second.\n     * @return {number|undefined} The instantaneous speed of the device in meters\n     *     per second.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getSpeed\",\n    value: function getSpeed() {\n      return (/** @type {number|undefined} */this.get(Property.SPEED)\n      );\n    }\n    /**\n     * Determine if the device location is being tracked.\n     * @return {boolean} The device location is being tracked.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getTracking\",\n    value: function getTracking() {\n      return (/** @type {boolean} */this.get(Property.TRACKING)\n      );\n    }\n    /**\n     * Get the tracking options.\n     * See https://www.w3.org/TR/geolocation-API/#position-options.\n     * @return {PositionOptions|undefined} PositionOptions as defined by\n     *     the [HTML5 Geolocation spec\n     *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getTrackingOptions\",\n    value: function getTrackingOptions() {\n      return (/** @type {PositionOptions|undefined} */\n        this.get(Property.TRACKING_OPTIONS)\n      );\n    }\n    /**\n     * Set the projection to use for transforming the coordinates.\n     * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n     *     reported in.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setProjection\",\n    value: function setProjection(projection) {\n      this.set(Property.PROJECTION, getProjection(projection));\n    }\n    /**\n     * Enable or disable tracking.\n     * @param {boolean} tracking Enable tracking.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setTracking\",\n    value: function setTracking(tracking) {\n      this.set(Property.TRACKING, tracking);\n    }\n    /**\n     * Set the tracking options.\n     * See http://www.w3.org/TR/geolocation-API/#position-options.\n     * @param {PositionOptions} options PositionOptions as defined by the\n     *     [HTML5 Geolocation spec\n     *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setTrackingOptions\",\n    value: function setTrackingOptions(options) {\n      this.set(Property.TRACKING_OPTIONS, options);\n    }\n  }]);\n  return Geolocation;\n}(BaseObject);\nexport default Geolocation;","map":null,"metadata":{},"sourceType":"module"}