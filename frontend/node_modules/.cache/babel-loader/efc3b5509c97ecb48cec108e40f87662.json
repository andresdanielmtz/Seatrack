{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/interaction/PinchZoom\n */\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\nvar PinchZoom = /*#__PURE__*/function (_PointerInteraction) {\n  _inherits(PinchZoom, _PointerInteraction);\n  /**\n   * @param {Options} [options] Options.\n   */\n  function PinchZoom(options) {\n    var _this;\n    _classCallCheck(this, PinchZoom);\n    options = options ? options : {};\n    var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */\n    options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PinchZoom).call(this, pointerOptions));\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    _this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.lastDistance_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.lastScaleDelta_ = 1;\n    return _this;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  _createClass(PinchZoom, [{\n    key: \"handleDragEvent\",\n    value: function handleDragEvent(mapBrowserEvent) {\n      var scaleDelta = 1.0;\n      var touch0 = this.targetPointers[0];\n      var touch1 = this.targetPointers[1];\n      var dx = touch0.clientX - touch1.clientX;\n      var dy = touch0.clientY - touch1.clientY;\n\n      // distance between touches\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      if (this.lastDistance_ !== undefined) {\n        scaleDelta = this.lastDistance_ / distance;\n      }\n      this.lastDistance_ = distance;\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      if (scaleDelta != 1.0) {\n        this.lastScaleDelta_ = scaleDelta;\n      }\n\n      // scale anchor point.\n      this.anchor_ = map.getCoordinateFromPixelInternal(map.getEventPixel(centroidFromPointers(this.targetPointers)));\n\n      // scale, bypass the resolution constraint\n      map.render();\n      view.adjustResolutionInternal(scaleDelta, this.anchor_);\n    }\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n  }, {\n    key: \"handleUpEvent\",\n    value: function handleUpEvent(mapBrowserEvent) {\n      if (this.targetPointers.length < 2) {\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        var direction = this.lastScaleDelta_ > 1 ? 1 : -1;\n        view.endInteraction(this.duration_, direction);\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n  }, {\n    key: \"handleDownEvent\",\n    value: function handleDownEvent(mapBrowserEvent) {\n      if (this.targetPointers.length >= 2) {\n        var map = mapBrowserEvent.map;\n        this.anchor_ = null;\n        this.lastDistance_ = undefined;\n        this.lastScaleDelta_ = 1;\n        if (!this.handlingDownUpSequence) {\n          map.getView().beginInteraction();\n        }\n        return true;\n      }\n      return false;\n    }\n  }]);\n  return PinchZoom;\n}(PointerInteraction);\nexport default PinchZoom;","map":null,"metadata":{},"sourceType":"module"}