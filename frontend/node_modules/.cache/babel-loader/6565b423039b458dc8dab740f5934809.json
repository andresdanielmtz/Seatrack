{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/source/UrlTile\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileState from '../TileState.js';\nimport { createFromTemplates, expandUrl } from '../tileurlfunction.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Cache size.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nvar UrlTile = /*#__PURE__*/function (_TileSource) {\n  _inherits(UrlTile, _TileSource);\n  /**\n   * @param {Options} options Image tile options.\n   */\n  function UrlTile(options) {\n    var _this;\n    _classCallCheck(this, UrlTile);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UrlTile).call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    }));\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.generateTileUrlFunction_ = _this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    _this.tileLoadFunction = options.tileLoadFunction;\n    if (options.tileUrlFunction) {\n      _this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    _this.urls = null;\n    if (options.urls) {\n      _this.setUrls(options.urls);\n    } else if (options.url) {\n      _this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    _this.tileLoadingKeys_ = {};\n    return _this;\n  }\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  _createClass(UrlTile, [{\n    key: \"getTileLoadFunction\",\n    value: function getTileLoadFunction() {\n      return this.tileLoadFunction;\n    }\n    /**\n     * Return the tile URL function of the source.\n     * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n     * @api\n     */\n  }, {\n    key: \"getTileUrlFunction\",\n    value: function getTileUrlFunction() {\n      return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;\n    }\n    /**\n     * Return the URLs used for this source.\n     * When a tileUrlFunction is used instead of url or urls,\n     * null will be returned.\n     * @return {!Array<string>|null} URLs.\n     * @api\n     */\n  }, {\n    key: \"getUrls\",\n    value: function getUrls() {\n      return this.urls;\n    }\n    /**\n     * Handle tile change events.\n     * @param {import(\"../events/Event.js\").default} event Event.\n     * @protected\n     */\n  }, {\n    key: \"handleTileChange\",\n    value: function handleTileChange(event) {\n      var tile = /** @type {import(\"../Tile.js\").default} */event.target;\n      var uid = getUid(tile);\n      var tileState = tile.getState();\n      var type;\n      if (tileState == TileState.LOADING) {\n        this.tileLoadingKeys_[uid] = true;\n        type = TileEventType.TILELOADSTART;\n      } else if (uid in this.tileLoadingKeys_) {\n        delete this.tileLoadingKeys_[uid];\n        type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED ? TileEventType.TILELOADEND : undefined;\n      }\n      if (type != undefined) {\n        this.dispatchEvent(new TileSourceEvent(type, tile));\n      }\n    }\n    /**\n     * Set the tile load function of the source.\n     * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n     * @api\n     */\n  }, {\n    key: \"setTileLoadFunction\",\n    value: function setTileLoadFunction(tileLoadFunction) {\n      this.tileCache.clear();\n      this.tileLoadFunction = tileLoadFunction;\n      this.changed();\n    }\n    /**\n     * Set the tile URL function of the source.\n     * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n     * @param {string} [key] Optional new tile key for the source.\n     * @api\n     */\n  }, {\n    key: \"setTileUrlFunction\",\n    value: function setTileUrlFunction(tileUrlFunction, key) {\n      this.tileUrlFunction = tileUrlFunction;\n      this.tileCache.pruneExceptNewestZ();\n      if (typeof key !== 'undefined') {\n        this.setKey(key);\n      } else {\n        this.changed();\n      }\n    }\n    /**\n     * Set the URL to use for requests.\n     * @param {string} url URL.\n     * @api\n     */\n  }, {\n    key: \"setUrl\",\n    value: function setUrl(url) {\n      var urls = expandUrl(url);\n      this.urls = urls;\n      this.setUrls(urls);\n    }\n    /**\n     * Set the URLs to use for requests.\n     * @param {Array<string>} urls URLs.\n     * @api\n     */\n  }, {\n    key: \"setUrls\",\n    value: function setUrls(urls) {\n      this.urls = urls;\n      var key = urls.join('\\n');\n      if (this.generateTileUrlFunction_) {\n        this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n      } else {\n        this.setKey(key);\n      }\n    }\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n  }, {\n    key: \"tileUrlFunction\",\n    value: function tileUrlFunction(tileCoord, pixelRatio, projection) {\n      return undefined;\n    }\n    /**\n     * Marks a tile coord as being used, without triggering a load.\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     */\n  }, {\n    key: \"useTile\",\n    value: function useTile(z, x, y) {\n      var tileCoordKey = getKeyZXY(z, x, y);\n      if (this.tileCache.containsKey(tileCoordKey)) {\n        this.tileCache.get(tileCoordKey);\n      }\n    }\n  }]);\n  return UrlTile;\n}(TileSource);\nexport default UrlTile;","map":null,"metadata":{},"sourceType":"module"}