{"ast":null,"code":"import _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/layer/Group\n */\nimport BaseLayer from './Base.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport { assert } from '../asserts.js';\nimport { clear } from '../obj.js';\nimport { getIntersection } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { listen, unlistenByKey } from '../events.js';\n\n/**\n * @typedef {'addlayer'|'removelayer'} EventType\n */\n\n/**\n * @classdesc\n * A layer group triggers 'addlayer' and 'removelayer' events when layers are added to or removed from\n * the group or one of its child groups.  When a layer group is added to or removed from another layer group,\n * a single event will be triggered (instead of one per layer in the group added or removed).\n */\nexport var GroupEvent = /*#__PURE__*/function (_Event) {\n  _inherits(GroupEvent, _Event);\n  /**\n   * @param {EventType} type The event type.\n   * @param {BaseLayer} layer The layer.\n   */\n  function GroupEvent(type, layer) {\n    var _this;\n    _classCallCheck(this, GroupEvent);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GroupEvent).call(this, type));\n\n    /**\n     * The added or removed layer.\n     * @type {BaseLayer}\n     * @api\n     */\n    _this.layer = layer;\n    return _this;\n  }\n  return GroupEvent;\n}(Event);\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:layers', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:layers', Return>} GroupOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<import(\"./Base.js\").default>|Collection<import(\"./Base.js\").default>} [layers] Child layers.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nvar Property = {\n  LAYERS: 'layers'\n};\n\n/**\n * @classdesc\n * A {@link module:ol/Collection~Collection} of layers that are handled together.\n *\n * A generic `change` event is triggered when the group/Collection changes.\n *\n * @api\n */\nvar LayerGroup = /*#__PURE__*/function (_BaseLayer) {\n  _inherits(LayerGroup, _BaseLayer);\n  /**\n   * @param {Options} [options] Layer options.\n   */\n  function LayerGroup(options) {\n    var _this2;\n    _classCallCheck(this, LayerGroup);\n    options = options || {};\n    var baseOptions = /** @type {Options} */Object.assign({}, options);\n    delete baseOptions.layers;\n    var layers = options.layers;\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(LayerGroup).call(this, baseOptions));\n\n    /***\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this2.on;\n\n    /***\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this2.once;\n\n    /***\n     * @type {GroupOnSignature<void>}\n     */\n    _this2.un;\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    _this2.layersListenerKeys_ = [];\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    _this2.listenerKeys_ = {};\n    _this2.addChangeListener(Property.LAYERS, _this2.handleLayersChanged_);\n    if (layers) {\n      if (Array.isArray(layers)) {\n        layers = new Collection(layers.slice(), {\n          unique: true\n        });\n      } else {\n        assert(typeof /** @type {?} */layers.getArray === 'function', 43); // Expected `layers` to be an array or a `Collection`\n      }\n    } else {\n      layers = new Collection(undefined, {\n        unique: true\n      });\n    }\n    _this2.setLayers(layers);\n    return _this2;\n  }\n\n  /**\n   * @private\n   */\n  _createClass(LayerGroup, [{\n    key: \"handleLayerChange_\",\n    value: function handleLayerChange_() {\n      this.changed();\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleLayersChanged_\",\n    value: function handleLayersChanged_() {\n      this.layersListenerKeys_.forEach(unlistenByKey);\n      this.layersListenerKeys_.length = 0;\n      var layers = this.getLayers();\n      this.layersListenerKeys_.push(listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this), listen(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this));\n      for (var id in this.listenerKeys_) {\n        this.listenerKeys_[id].forEach(unlistenByKey);\n      }\n      clear(this.listenerKeys_);\n      var layersArray = layers.getArray();\n      for (var i = 0, ii = layersArray.length; i < ii; i++) {\n        var layer = layersArray[i];\n        this.registerLayerListeners_(layer);\n        this.dispatchEvent(new GroupEvent('addlayer', layer));\n      }\n      this.changed();\n    }\n    /**\n     * @param {BaseLayer} layer The layer.\n     */\n  }, {\n    key: \"registerLayerListeners_\",\n    value: function registerLayerListeners_(layer) {\n      var listenerKeys = [listen(layer, ObjectEventType.PROPERTYCHANGE, this.handleLayerChange_, this), listen(layer, EventType.CHANGE, this.handleLayerChange_, this)];\n      if (layer instanceof LayerGroup) {\n        listenerKeys.push(listen(layer, 'addlayer', this.handleLayerGroupAdd_, this), listen(layer, 'removelayer', this.handleLayerGroupRemove_, this));\n      }\n      this.listenerKeys_[getUid(layer)] = listenerKeys;\n    }\n    /**\n     * @param {GroupEvent} event The layer group event.\n     */\n  }, {\n    key: \"handleLayerGroupAdd_\",\n    value: function handleLayerGroupAdd_(event) {\n      this.dispatchEvent(new GroupEvent('addlayer', event.layer));\n    }\n    /**\n     * @param {GroupEvent} event The layer group event.\n     */\n  }, {\n    key: \"handleLayerGroupRemove_\",\n    value: function handleLayerGroupRemove_(event) {\n      this.dispatchEvent(new GroupEvent('removelayer', event.layer));\n    }\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent<import(\"./Base.js\").default>} collectionEvent CollectionEvent.\n     * @private\n     */\n  }, {\n    key: \"handleLayersAdd_\",\n    value: function handleLayersAdd_(collectionEvent) {\n      var layer = collectionEvent.element;\n      this.registerLayerListeners_(layer);\n      this.dispatchEvent(new GroupEvent('addlayer', layer));\n      this.changed();\n    }\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent<import(\"./Base.js\").default>} collectionEvent CollectionEvent.\n     * @private\n     */\n  }, {\n    key: \"handleLayersRemove_\",\n    value: function handleLayersRemove_(collectionEvent) {\n      var layer = collectionEvent.element;\n      var key = getUid(layer);\n      this.listenerKeys_[key].forEach(unlistenByKey);\n      delete this.listenerKeys_[key];\n      this.dispatchEvent(new GroupEvent('removelayer', layer));\n      this.changed();\n    }\n    /**\n     * Returns the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}\n     * in this group.\n     * @return {!Collection<import(\"./Base.js\").default>} Collection of\n     *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getLayers\",\n    value: function getLayers() {\n      return (/** @type {!Collection<import(\"./Base.js\").default>} */\n        this.get(Property.LAYERS)\n      );\n    }\n    /**\n     * Set the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}\n     * in this group.\n     * @param {!Collection<import(\"./Base.js\").default>} layers Collection of\n     *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setLayers\",\n    value: function setLayers(layers) {\n      var collection = this.getLayers();\n      if (collection) {\n        var currentLayers = collection.getArray();\n        for (var i = 0, ii = currentLayers.length; i < ii; ++i) {\n          this.dispatchEvent(new GroupEvent('removelayer', currentLayers[i]));\n        }\n      }\n      this.set(Property.LAYERS, layers);\n    }\n    /**\n     * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n     * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n     */\n  }, {\n    key: \"getLayersArray\",\n    value: function getLayersArray(array) {\n      array = array !== undefined ? array : [];\n      this.getLayers().forEach(function (layer) {\n        layer.getLayersArray(array);\n      });\n      return array;\n    }\n    /**\n     * Get the layer states list and use this groups z-index as the default\n     * for all layers in this and nested groups, if it is unset at this point.\n     * If dest is not provided and this group's z-index is undefined\n     * 0 is used a the default z-index.\n     * @param {Array<import(\"./Layer.js\").State>} [dest] Optional list\n     * of layer states (to be modified in place).\n     * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n     */\n  }, {\n    key: \"getLayerStatesArray\",\n    value: function getLayerStatesArray(dest) {\n      var states = dest !== undefined ? dest : [];\n      var pos = states.length;\n      this.getLayers().forEach(function (layer) {\n        layer.getLayerStatesArray(states);\n      });\n      var ownLayerState = this.getLayerState();\n      var defaultZIndex = ownLayerState.zIndex;\n      if (!dest && ownLayerState.zIndex === undefined) {\n        defaultZIndex = 0;\n      }\n      for (var i = pos, ii = states.length; i < ii; i++) {\n        var layerState = states[i];\n        layerState.opacity *= ownLayerState.opacity;\n        layerState.visible = layerState.visible && ownLayerState.visible;\n        layerState.maxResolution = Math.min(layerState.maxResolution, ownLayerState.maxResolution);\n        layerState.minResolution = Math.max(layerState.minResolution, ownLayerState.minResolution);\n        layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);\n        layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);\n        if (ownLayerState.extent !== undefined) {\n          if (layerState.extent !== undefined) {\n            layerState.extent = getIntersection(layerState.extent, ownLayerState.extent);\n          } else {\n            layerState.extent = ownLayerState.extent;\n          }\n        }\n        if (layerState.zIndex === undefined) {\n          layerState.zIndex = defaultZIndex;\n        }\n      }\n      return states;\n    }\n    /**\n     * @return {import(\"../source/Source.js\").State} Source state.\n     */\n  }, {\n    key: \"getSourceState\",\n    value: function getSourceState() {\n      return 'ready';\n    }\n  }]);\n  return LayerGroup;\n}(BaseLayer);\nexport default LayerGroup;","map":null,"metadata":{},"sourceType":"module"}