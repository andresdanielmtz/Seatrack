{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/style/IconImage\n */\n\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport { asString } from '../color.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { shared as iconImageCache } from './IconImageCache.js';\nimport { listenImage } from '../Image.js';\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar taintedTestContext = null;\nvar IconImage = /*#__PURE__*/function (_EventTarget) {\n  _inherits(IconImage, _EventTarget);\n  /**\n   * @param {HTMLImageElement|HTMLCanvasElement} image Image.\n   * @param {string|undefined} src Src.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../ImageState.js\").default} imageState Image state.\n   * @param {import(\"../color.js\").Color} color Color.\n   */\n  function IconImage(image, src, size, crossOrigin, imageState, color) {\n    var _this;\n    _classCallCheck(this, IconImage);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IconImage).call(this));\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    _this.hitDetectionImage_ = null;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    _this.image_ = image;\n\n    /**\n     * @private\n     * @type {string|null}\n     */\n    _this.crossOrigin_ = crossOrigin;\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    _this.canvas_ = {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    _this.color_ = color;\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    _this.unlisten_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../ImageState.js\").default}\n     */\n    _this.imageState_ = imageState;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.size_ = size;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    _this.src_ = src;\n\n    /**\n     * @private\n     */\n    _this.tainted_;\n    return _this;\n  }\n\n  /**\n   * @private\n   */\n  _createClass(IconImage, [{\n    key: \"initializeImage_\",\n    value: function initializeImage_() {\n      this.image_ = new Image();\n      if (this.crossOrigin_ !== null) {\n        this.image_.crossOrigin = this.crossOrigin_;\n      }\n    }\n    /**\n     * @private\n     * @return {boolean} The image canvas is tainted.\n     */\n  }, {\n    key: \"isTainted_\",\n    value: function isTainted_() {\n      if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\n        if (!taintedTestContext) {\n          taintedTestContext = createCanvasContext2D(1, 1, undefined, {\n            willReadFrequently: true\n          });\n        }\n        taintedTestContext.drawImage(this.image_, 0, 0);\n        try {\n          taintedTestContext.getImageData(0, 0, 1, 1);\n          this.tainted_ = false;\n        } catch (e) {\n          taintedTestContext = null;\n          this.tainted_ = true;\n        }\n      }\n      return this.tainted_ === true;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"dispatchChangeEvent_\",\n    value: function dispatchChangeEvent_() {\n      this.dispatchEvent(EventType.CHANGE);\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleImageError_\",\n    value: function handleImageError_() {\n      this.imageState_ = ImageState.ERROR;\n      this.unlistenImage_();\n      this.dispatchChangeEvent_();\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleImageLoad_\",\n    value: function handleImageLoad_() {\n      this.imageState_ = ImageState.LOADED;\n      if (this.size_) {\n        this.image_.width = this.size_[0];\n        this.image_.height = this.size_[1];\n      } else {\n        this.size_ = [this.image_.width, this.image_.height];\n      }\n      this.unlistenImage_();\n      this.dispatchChangeEvent_();\n    }\n    /**\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage(pixelRatio) {\n      if (!this.image_) {\n        this.initializeImage_();\n      }\n      this.replaceColor_(pixelRatio);\n      return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;\n    }\n    /**\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Image or Canvas element.\n     */\n  }, {\n    key: \"getPixelRatio\",\n    value: function getPixelRatio(pixelRatio) {\n      this.replaceColor_(pixelRatio);\n      return this.canvas_[pixelRatio] ? pixelRatio : 1;\n    }\n    /**\n     * @return {import(\"../ImageState.js\").default} Image state.\n     */\n  }, {\n    key: \"getImageState\",\n    value: function getImageState() {\n      return this.imageState_;\n    }\n    /**\n     * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n     */\n  }, {\n    key: \"getHitDetectionImage\",\n    value: function getHitDetectionImage() {\n      if (!this.image_) {\n        this.initializeImage_();\n      }\n      if (!this.hitDetectionImage_) {\n        if (this.isTainted_()) {\n          var width = this.size_[0];\n          var height = this.size_[1];\n          var context = createCanvasContext2D(width, height);\n          context.fillRect(0, 0, width, height);\n          this.hitDetectionImage_ = context.canvas;\n        } else {\n          this.hitDetectionImage_ = this.image_;\n        }\n      }\n      return this.hitDetectionImage_;\n    }\n    /**\n     * Get the size of the icon (in pixels).\n     * @return {import(\"../size.js\").Size} Image size.\n     */\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return this.size_;\n    }\n    /**\n     * @return {string|undefined} Image src.\n     */\n  }, {\n    key: \"getSrc\",\n    value: function getSrc() {\n      return this.src_;\n    }\n    /**\n     * Load not yet loaded URI.\n     */\n  }, {\n    key: \"load\",\n    value: function load() {\n      if (this.imageState_ !== ImageState.IDLE) {\n        return;\n      }\n      if (!this.image_) {\n        this.initializeImage_();\n      }\n      this.imageState_ = ImageState.LOADING;\n      try {\n        /** @type {HTMLImageElement} */this.image_.src = this.src_;\n      } catch (e) {\n        this.handleImageError_();\n      }\n      this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n    }\n    /**\n     * @param {number} pixelRatio Pixel ratio.\n     * @private\n     */\n  }, {\n    key: \"replaceColor_\",\n    value: function replaceColor_(pixelRatio) {\n      if (!this.color_ || this.canvas_[pixelRatio] || this.imageState_ !== ImageState.LOADED) {\n        return;\n      }\n      var image = this.image_;\n      var canvas = document.createElement('canvas');\n      canvas.width = Math.ceil(image.width * pixelRatio);\n      canvas.height = Math.ceil(image.height * pixelRatio);\n      var ctx = canvas.getContext('2d');\n      ctx.scale(pixelRatio, pixelRatio);\n      ctx.drawImage(image, 0, 0);\n      ctx.globalCompositeOperation = 'multiply';\n      ctx.fillStyle = asString(this.color_);\n      ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\n      ctx.globalCompositeOperation = 'destination-in';\n      ctx.drawImage(image, 0, 0);\n      this.canvas_[pixelRatio] = canvas;\n    }\n    /**\n     * Discards event handlers which listen for load completion or errors.\n     *\n     * @private\n     */\n  }, {\n    key: \"unlistenImage_\",\n    value: function unlistenImage_() {\n      if (this.unlisten_) {\n        this.unlisten_();\n        this.unlisten_ = null;\n      }\n    }\n  }]);\n  return IconImage;\n}(EventTarget);\n/**\n * @param {HTMLImageElement|HTMLCanvasElement} image Image.\n * @param {string} src Src.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../ImageState.js\").default} imageState Image state.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {IconImage} Icon image.\n */\nexport function get(image, src, size, crossOrigin, imageState, color) {\n  var iconImage = iconImageCache.get(src, crossOrigin, color);\n  if (!iconImage) {\n    iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);\n    iconImageCache.set(src, crossOrigin, color, iconImage);\n  }\n  return iconImage;\n}\nexport default IconImage;","map":null,"metadata":{},"sourceType":"module"}