{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport { DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, createProjection, disableCoordinateWarning, fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from './proj.js';\nimport { VOID } from './functions.js';\nimport { add as addCoordinate, equals as coordinatesEqual, equals, rotate as rotateCoordinate } from './coordinate.js';\nimport { assert } from './asserts.js';\nimport { none as centerNone, createExtent } from './centerconstraint.js';\nimport { clamp, modulo } from './math.js';\nimport { createMinMaxResolution, createSnapToPower, createSnapToResolutions } from './resolutionconstraint.js';\nimport { createSnapToN, createSnapToZero, disable, none as rotationNone } from './rotationconstraint.js';\nimport { easeOut, inAndOut } from './easing.js';\nimport { getCenter, getForViewAndSize, getHeight, getWidth, isEmpty } from './extent.js';\nimport { linearFindNearest } from './array.js';\nimport { fromExtent as polygonFromExtent } from './geom/Polygon.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center.\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nvar DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nvar View = /*#__PURE__*/function (_BaseObject) {\n  _inherits(View, _BaseObject);\n  /**\n   * @param {ViewOptions} [options] View options.\n   */\n  function View(options) {\n    var _this;\n    _classCallCheck(this, View);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(View).call(this));\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.on;\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.once;\n\n    /***\n     * @type {ViewOnSignature<void>}\n     */\n    _this.un;\n    options = Object.assign({}, options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    _this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.updateAnimationKey_;\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    _this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n    _this.viewportSize_ = [100, 100];\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    _this.targetCenter_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.targetResolution_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.targetRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n    _this.nextCenter_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.nextResolution_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.nextRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    _this.cancelAnchor_ = undefined;\n    if (options.projection) {\n      disableCoordinateWarning();\n    }\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, _this.projection_);\n    }\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, _this.projection_);\n    }\n    _this.applyOptions_(options);\n    return _this;\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  _createClass(View, [{\n    key: \"applyOptions_\",\n    value: function applyOptions_(options) {\n      var properties = Object.assign({}, options);\n      for (var key in ViewProperty) {\n        delete properties[key];\n      }\n      this.setProperties(properties, true);\n      var resolutionConstraintInfo = createResolutionConstraint(options);\n\n      /**\n       * @private\n       * @type {number}\n       */\n      this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n      /**\n       * @private\n       * @type {number}\n       */\n      this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n      /**\n       * @private\n       * @type {number}\n       */\n      this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n      /**\n       * @private\n       * @type {Array<number>|undefined}\n       */\n      this.resolutions_ = options.resolutions;\n\n      /**\n       * @type {Array<number>|undefined}\n       * @private\n       */\n      this.padding_ = options.padding;\n\n      /**\n       * @private\n       * @type {number}\n       */\n      this.minZoom_ = resolutionConstraintInfo.minZoom;\n      var centerConstraint = createCenterConstraint(options);\n      var resolutionConstraint = resolutionConstraintInfo.constraint;\n      var rotationConstraint = createRotationConstraint(options);\n\n      /**\n       * @private\n       * @type {Constraints}\n       */\n      this.constraints_ = {\n        center: centerConstraint,\n        resolution: resolutionConstraint,\n        rotation: rotationConstraint\n      };\n      this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n      this.setCenterInternal(options.center !== undefined ? options.center : null);\n      if (options.resolution !== undefined) {\n        this.setResolution(options.resolution);\n      } else if (options.zoom !== undefined) {\n        this.setZoom(options.zoom);\n      }\n    }\n    /**\n     * Padding (in css pixels).\n     * If the map viewport is partially covered with other content (overlays) along\n     * its edges, this setting allows to shift the center of the viewport away from that\n     * content. The order of the values in the array is top, right, bottom, left.\n     * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n     * @type {Array<number>|undefined}\n     * @api\n     */\n  }, {\n    key: \"getUpdatedOptions_\",\n    /**\n     * Get an updated version of the view options used to construct the view.  The\n     * current resolution (or zoom), center, and rotation are applied to any stored\n     * options.  The provided options can be used to apply new min/max zoom or\n     * resolution limits.\n     * @param {ViewOptions} newOptions New options to be applied.\n     * @return {ViewOptions} New options updated with the current view state.\n     */\n    value: function getUpdatedOptions_(newOptions) {\n      var options = this.getProperties();\n\n      // preserve resolution (or zoom)\n      if (options.resolution !== undefined) {\n        options.resolution = this.getResolution();\n      } else {\n        options.zoom = this.getZoom();\n      }\n\n      // preserve center\n      options.center = this.getCenterInternal();\n\n      // preserve rotation\n      options.rotation = this.getRotation();\n      return Object.assign({}, options, newOptions);\n    }\n    /**\n     * Animate the view.  The view's center, zoom (or resolution), and rotation\n     * can be animated for smooth transitions between view states.  For example,\n     * to animate the view to a new zoom level:\n     *\n     *     view.animate({zoom: view.getZoom() + 1});\n     *\n     * By default, the animation lasts one second and uses in-and-out easing.  You\n     * can customize this behavior by including `duration` (in milliseconds) and\n     * `easing` options (see {@link module:ol/easing}).\n     *\n     * To chain together multiple animations, call the method with multiple\n     * animation objects.  For example, to first zoom and then pan:\n     *\n     *     view.animate({zoom: 10}, {center: [0, 0]});\n     *\n     * If you provide a function as the last argument to the animate method, it\n     * will get called at the end of an animation series.  The callback will be\n     * called with `true` if the animation series completed on its own or `false`\n     * if it was cancelled.\n     *\n     * Animations are cancelled by user interactions (e.g. dragging the map) or by\n     * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n     * (or another method that calls one of these).\n     *\n     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n     *     options.  Multiple animations can be run in series by passing multiple\n     *     options objects.  To run multiple animations in parallel, call the method\n     *     multiple times.  An optional callback can be provided as a final\n     *     argument.  The callback will be called with a boolean indicating whether\n     *     the animation completed without being cancelled.\n     * @api\n     */\n  }, {\n    key: \"animate\",\n    value: function animate(var_args) {\n      if (this.isDef() && !this.getAnimating()) {\n        this.resolveConstraints(0);\n      }\n      var args = new Array(arguments.length);\n      for (var i = 0; i < args.length; ++i) {\n        var options = arguments[i];\n        if (options.center) {\n          options = Object.assign({}, options);\n          options.center = fromUserCoordinate(options.center, this.getProjection());\n        }\n        if (options.anchor) {\n          options = Object.assign({}, options);\n          options.anchor = fromUserCoordinate(options.anchor, this.getProjection());\n        }\n        args[i] = options;\n      }\n      this.animateInternal.apply(this, args);\n    }\n    /**\n     * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n     */\n  }, {\n    key: \"animateInternal\",\n    value: function animateInternal(var_args) {\n      var animationCount = arguments.length;\n      var callback;\n      if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n        callback = arguments[animationCount - 1];\n        --animationCount;\n      }\n      var i = 0;\n      for (; i < animationCount && !this.isDef(); ++i) {\n        // if view properties are not yet set, shortcut to the final state\n        var state = arguments[i];\n        if (state.center) {\n          this.setCenterInternal(state.center);\n        }\n        if (state.zoom !== undefined) {\n          this.setZoom(state.zoom);\n        } else if (state.resolution) {\n          this.setResolution(state.resolution);\n        }\n        if (state.rotation !== undefined) {\n          this.setRotation(state.rotation);\n        }\n      }\n      if (i === animationCount) {\n        if (callback) {\n          animationCallback(callback, true);\n        }\n        return;\n      }\n      var start = Date.now();\n      var center = this.targetCenter_.slice();\n      var resolution = this.targetResolution_;\n      var rotation = this.targetRotation_;\n      var series = [];\n      for (; i < animationCount; ++i) {\n        var options = /** @type {AnimationOptions} */arguments[i];\n        var animation = {\n          start: start,\n          complete: false,\n          anchor: options.anchor,\n          duration: options.duration !== undefined ? options.duration : 1000,\n          easing: options.easing || inAndOut,\n          callback: callback\n        };\n        if (options.center) {\n          animation.sourceCenter = center;\n          animation.targetCenter = options.center.slice();\n          center = animation.targetCenter;\n        }\n        if (options.zoom !== undefined) {\n          animation.sourceResolution = resolution;\n          animation.targetResolution = this.getResolutionForZoom(options.zoom);\n          resolution = animation.targetResolution;\n        } else if (options.resolution) {\n          animation.sourceResolution = resolution;\n          animation.targetResolution = options.resolution;\n          resolution = animation.targetResolution;\n        }\n        if (options.rotation !== undefined) {\n          animation.sourceRotation = rotation;\n          var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n          animation.targetRotation = rotation + delta;\n          rotation = animation.targetRotation;\n        }\n\n        // check if animation is a no-op\n        if (isNoopAnimation(animation)) {\n          animation.complete = true;\n          // we still push it onto the series for callback handling\n        } else {\n          start += animation.duration;\n        }\n        series.push(animation);\n      }\n      this.animations_.push(series);\n      this.setHint(ViewHint.ANIMATING, 1);\n      this.updateAnimations_();\n    }\n    /**\n     * Determine if the view is being animated.\n     * @return {boolean} The view is being animated.\n     * @api\n     */\n  }, {\n    key: \"getAnimating\",\n    value: function getAnimating() {\n      return this.hints_[ViewHint.ANIMATING] > 0;\n    }\n    /**\n     * Determine if the user is interacting with the view, such as panning or zooming.\n     * @return {boolean} The view is being interacted with.\n     * @api\n     */\n  }, {\n    key: \"getInteracting\",\n    value: function getInteracting() {\n      return this.hints_[ViewHint.INTERACTING] > 0;\n    }\n    /**\n     * Cancel any ongoing animations.\n     * @api\n     */\n  }, {\n    key: \"cancelAnimations\",\n    value: function cancelAnimations() {\n      this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n      var anchor;\n      for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n        var series = this.animations_[i];\n        if (series[0].callback) {\n          animationCallback(series[0].callback, false);\n        }\n        if (!anchor) {\n          for (var j = 0, jj = series.length; j < jj; ++j) {\n            var animation = series[j];\n            if (!animation.complete) {\n              anchor = animation.anchor;\n              break;\n            }\n          }\n        }\n      }\n      this.animations_.length = 0;\n      this.cancelAnchor_ = anchor;\n      this.nextCenter_ = null;\n      this.nextResolution_ = NaN;\n      this.nextRotation_ = NaN;\n    }\n    /**\n     * Update all animations.\n     */\n  }, {\n    key: \"updateAnimations_\",\n    value: function updateAnimations_() {\n      if (this.updateAnimationKey_ !== undefined) {\n        cancelAnimationFrame(this.updateAnimationKey_);\n        this.updateAnimationKey_ = undefined;\n      }\n      if (!this.getAnimating()) {\n        return;\n      }\n      var now = Date.now();\n      var more = false;\n      for (var i = this.animations_.length - 1; i >= 0; --i) {\n        var series = this.animations_[i];\n        var seriesComplete = true;\n        for (var j = 0, jj = series.length; j < jj; ++j) {\n          var animation = series[j];\n          if (animation.complete) {\n            continue;\n          }\n          var elapsed = now - animation.start;\n          var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n          if (fraction >= 1) {\n            animation.complete = true;\n            fraction = 1;\n          } else {\n            seriesComplete = false;\n          }\n          var progress = animation.easing(fraction);\n          if (animation.sourceCenter) {\n            var x0 = animation.sourceCenter[0];\n            var y0 = animation.sourceCenter[1];\n            var x1 = animation.targetCenter[0];\n            var y1 = animation.targetCenter[1];\n            this.nextCenter_ = animation.targetCenter;\n            var x = x0 + progress * (x1 - x0);\n            var y = y0 + progress * (y1 - y0);\n            this.targetCenter_ = [x, y];\n          }\n          if (animation.sourceResolution && animation.targetResolution) {\n            var resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n            if (animation.anchor) {\n              var size = this.getViewportSize_(this.getRotation());\n              var constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);\n              this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);\n            }\n            this.nextResolution_ = animation.targetResolution;\n            this.targetResolution_ = resolution;\n            this.applyTargetState_(true);\n          }\n          if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n            var rotation = progress === 1 ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n            if (animation.anchor) {\n              var constrainedRotation = this.constraints_.rotation(rotation, true);\n              this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);\n            }\n            this.nextRotation_ = animation.targetRotation;\n            this.targetRotation_ = rotation;\n          }\n          this.applyTargetState_(true);\n          more = true;\n          if (!animation.complete) {\n            break;\n          }\n        }\n        if (seriesComplete) {\n          this.animations_[i] = null;\n          this.setHint(ViewHint.ANIMATING, -1);\n          this.nextCenter_ = null;\n          this.nextResolution_ = NaN;\n          this.nextRotation_ = NaN;\n          var callback = series[0].callback;\n          if (callback) {\n            animationCallback(callback, true);\n          }\n        }\n      }\n      // prune completed series\n      this.animations_ = this.animations_.filter(Boolean);\n      if (more && this.updateAnimationKey_ === undefined) {\n        this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));\n      }\n    }\n    /**\n     * @param {number} rotation Target rotation.\n     * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n     */\n  }, {\n    key: \"calculateCenterRotate\",\n    value: function calculateCenterRotate(rotation, anchor) {\n      var center;\n      var currentCenter = this.getCenterInternal();\n      if (currentCenter !== undefined) {\n        center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n        rotateCoordinate(center, rotation - this.getRotation());\n        addCoordinate(center, anchor);\n      }\n      return center;\n    }\n    /**\n     * @param {number} resolution Target resolution.\n     * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n     */\n  }, {\n    key: \"calculateCenterZoom\",\n    value: function calculateCenterZoom(resolution, anchor) {\n      var center;\n      var currentCenter = this.getCenterInternal();\n      var currentResolution = this.getResolution();\n      if (currentCenter !== undefined && currentResolution !== undefined) {\n        var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n        var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n        center = [x, y];\n      }\n      return center;\n    }\n    /**\n     * Returns the current viewport size.\n     * @private\n     * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n     * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n     */\n  }, {\n    key: \"getViewportSize_\",\n    value: function getViewportSize_(rotation) {\n      var size = this.viewportSize_;\n      if (rotation) {\n        var w = size[0];\n        var h = size[1];\n        return [Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)), Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation))];\n      }\n      return size;\n    }\n    /**\n     * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n     * to avoid performance hit and layout reflow.\n     * This should be done on map size change.\n     * Note: the constraints are not resolved during an animation to avoid stopping it\n     * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\n     */\n  }, {\n    key: \"setViewportSize\",\n    value: function setViewportSize(size) {\n      this.viewportSize_ = Array.isArray(size) ? size.slice() : [100, 100];\n      if (!this.getAnimating()) {\n        this.resolveConstraints(0);\n      }\n    }\n    /**\n     * Get the view center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      var center = this.getCenterInternal();\n      if (!center) {\n        return center;\n      }\n      return toUserCoordinate(center, this.getProjection());\n    }\n    /**\n     * Get the view center without transforming to user projection.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n     */\n  }, {\n    key: \"getCenterInternal\",\n    value: function getCenterInternal() {\n      return (/** @type {import(\"./coordinate.js\").Coordinate|undefined} */\n        this.get(ViewProperty.CENTER)\n      );\n    }\n    /**\n     * @return {Constraints} Constraints.\n     */\n  }, {\n    key: \"getConstraints\",\n    value: function getConstraints() {\n      return this.constraints_;\n    }\n    /**\n     * @return {boolean} Resolution constraint is set\n     */\n  }, {\n    key: \"getConstrainResolution\",\n    value: function getConstrainResolution() {\n      return this.get('constrainResolution');\n    }\n    /**\n     * @param {Array<number>} [hints] Destination array.\n     * @return {Array<number>} Hint.\n     */\n  }, {\n    key: \"getHints\",\n    value: function getHints(hints) {\n      if (hints !== undefined) {\n        hints[0] = this.hints_[0];\n        hints[1] = this.hints_[1];\n        return hints;\n      }\n      return this.hints_.slice();\n    }\n    /**\n     * Calculate the extent for the current view state and the passed size.\n     * The size is the pixel dimensions of the box into which the calculated extent\n     * should fit. In most cases you want to get the extent of the entire map,\n     * that is `map.getSize()`.\n     * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided, the size\n     * of the map that uses this view will be used.\n     * @return {import(\"./extent.js\").Extent} Extent.\n     * @api\n     */\n  }, {\n    key: \"calculateExtent\",\n    value: function calculateExtent(size) {\n      var extent = this.calculateExtentInternal(size);\n      return toUserExtent(extent, this.getProjection());\n    }\n    /**\n     * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\n     * the map's last known viewport size will be used.\n     * @return {import(\"./extent.js\").Extent} Extent.\n     */\n  }, {\n    key: \"calculateExtentInternal\",\n    value: function calculateExtentInternal(size) {\n      size = size || this.getViewportSizeMinusPadding_();\n      var center = /** @type {!import(\"./coordinate.js\").Coordinate} */\n      this.getCenterInternal();\n      assert(center, 1); // The view center is not defined\n      var resolution = /** @type {!number} */this.getResolution();\n      assert(resolution !== undefined, 2); // The view resolution is not defined\n      var rotation = /** @type {!number} */this.getRotation();\n      assert(rotation !== undefined, 3); // The view rotation is not defined\n\n      return getForViewAndSize(center, resolution, rotation, size);\n    }\n    /**\n     * Get the maximum resolution of the view.\n     * @return {number} The maximum resolution of the view.\n     * @api\n     */\n  }, {\n    key: \"getMaxResolution\",\n    value: function getMaxResolution() {\n      return this.maxResolution_;\n    }\n    /**\n     * Get the minimum resolution of the view.\n     * @return {number} The minimum resolution of the view.\n     * @api\n     */\n  }, {\n    key: \"getMinResolution\",\n    value: function getMinResolution() {\n      return this.minResolution_;\n    }\n    /**\n     * Get the maximum zoom level for the view.\n     * @return {number} The maximum zoom level.\n     * @api\n     */\n  }, {\n    key: \"getMaxZoom\",\n    value: function getMaxZoom() {\n      return (/** @type {number} */\n        this.getZoomForResolution(this.minResolution_)\n      );\n    }\n    /**\n     * Set a new maximum zoom level for the view.\n     * @param {number} zoom The maximum zoom level.\n     * @api\n     */\n  }, {\n    key: \"setMaxZoom\",\n    value: function setMaxZoom(zoom) {\n      this.applyOptions_(this.getUpdatedOptions_({\n        maxZoom: zoom\n      }));\n    }\n    /**\n     * Get the minimum zoom level for the view.\n     * @return {number} The minimum zoom level.\n     * @api\n     */\n  }, {\n    key: \"getMinZoom\",\n    value: function getMinZoom() {\n      return (/** @type {number} */\n        this.getZoomForResolution(this.maxResolution_)\n      );\n    }\n    /**\n     * Set a new minimum zoom level for the view.\n     * @param {number} zoom The minimum zoom level.\n     * @api\n     */\n  }, {\n    key: \"setMinZoom\",\n    value: function setMinZoom(zoom) {\n      this.applyOptions_(this.getUpdatedOptions_({\n        minZoom: zoom\n      }));\n    }\n    /**\n     * Set whether the view should allow intermediary zoom levels.\n     * @param {boolean} enabled Whether the resolution is constrained.\n     * @api\n     */\n  }, {\n    key: \"setConstrainResolution\",\n    value: function setConstrainResolution(enabled) {\n      this.applyOptions_(this.getUpdatedOptions_({\n        constrainResolution: enabled\n      }));\n    }\n    /**\n     * Get the view projection.\n     * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n     * @api\n     */\n  }, {\n    key: \"getProjection\",\n    value: function getProjection() {\n      return this.projection_;\n    }\n    /**\n     * Get the view resolution.\n     * @return {number|undefined} The resolution of the view.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getResolution\",\n    value: function getResolution() {\n      return (/** @type {number|undefined} */this.get(ViewProperty.RESOLUTION)\n      );\n    }\n    /**\n     * Get the resolutions for the view. This returns the array of resolutions\n     * passed to the constructor of the View, or undefined if none were given.\n     * @return {Array<number>|undefined} The resolutions of the view.\n     * @api\n     */\n  }, {\n    key: \"getResolutions\",\n    value: function getResolutions() {\n      return this.resolutions_;\n    }\n    /**\n     * Get the resolution for a provided extent (in map units) and size (in pixels).\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {import(\"./size.js\").Size} [size] Box pixel size.\n     * @return {number} The resolution at which the provided extent will render at\n     *     the given size.\n     * @api\n     */\n  }, {\n    key: \"getResolutionForExtent\",\n    value: function getResolutionForExtent(extent, size) {\n      return this.getResolutionForExtentInternal(fromUserExtent(extent, this.getProjection()), size);\n    }\n    /**\n     * Get the resolution for a provided extent (in map units) and size (in pixels).\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {import(\"./size.js\").Size} [size] Box pixel size.\n     * @return {number} The resolution at which the provided extent will render at\n     *     the given size.\n     */\n  }, {\n    key: \"getResolutionForExtentInternal\",\n    value: function getResolutionForExtentInternal(extent, size) {\n      size = size || this.getViewportSizeMinusPadding_();\n      var xResolution = getWidth(extent) / size[0];\n      var yResolution = getHeight(extent) / size[1];\n      return Math.max(xResolution, yResolution);\n    }\n    /**\n     * Return a function that returns a value between 0 and 1 for a\n     * resolution. Exponential scaling is assumed.\n     * @param {number} [power] Power.\n     * @return {function(number): number} Resolution for value function.\n     */\n  }, {\n    key: \"getResolutionForValueFunction\",\n    value: function getResolutionForValueFunction(power) {\n      power = power || 2;\n      var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n      var minResolution = this.minResolution_;\n      var max = Math.log(maxResolution / minResolution) / Math.log(power);\n      return (\n        /**\n         * @param {number} value Value.\n         * @return {number} Resolution.\n         */\n        function (value) {\n          var resolution = maxResolution / Math.pow(power, value * max);\n          return resolution;\n        }\n      );\n    }\n    /**\n     * Get the view rotation.\n     * @return {number} The rotation of the view in radians.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return (/** @type {number} */this.get(ViewProperty.ROTATION)\n      );\n    }\n    /**\n     * Return a function that returns a resolution for a value between\n     * 0 and 1. Exponential scaling is assumed.\n     * @param {number} [power] Power.\n     * @return {function(number): number} Value for resolution function.\n     */\n  }, {\n    key: \"getValueForResolutionFunction\",\n    value: function getValueForResolutionFunction(power) {\n      var logPower = Math.log(power || 2);\n      var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n      var minResolution = this.minResolution_;\n      var max = Math.log(maxResolution / minResolution) / logPower;\n      return (\n        /**\n         * @param {number} resolution Resolution.\n         * @return {number} Value.\n         */\n        function (resolution) {\n          var value = Math.log(maxResolution / resolution) / logPower / max;\n          return value;\n        }\n      );\n    }\n    /**\n     * Returns the size of the viewport minus padding.\n     * @private\n     * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n     * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n     */\n  }, {\n    key: \"getViewportSizeMinusPadding_\",\n    value: function getViewportSizeMinusPadding_(rotation) {\n      var size = this.getViewportSize_(rotation);\n      var padding = this.padding_;\n      if (padding) {\n        size = [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]];\n      }\n      return size;\n    }\n    /**\n     * @return {State} View state.\n     */\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      var projection = this.getProjection();\n      var resolution = this.getResolution();\n      var rotation = this.getRotation();\n      var center = /** @type {import(\"./coordinate.js\").Coordinate} */\n      this.getCenterInternal();\n      var padding = this.padding_;\n      if (padding) {\n        var reducedSize = this.getViewportSizeMinusPadding_();\n        center = calculateCenterOn(center, this.getViewportSize_(), [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n      }\n      return {\n        center: center.slice(0),\n        projection: projection !== undefined ? projection : null,\n        resolution: resolution,\n        nextCenter: this.nextCenter_,\n        nextResolution: this.nextResolution_,\n        nextRotation: this.nextRotation_,\n        rotation: rotation,\n        zoom: this.getZoom()\n      };\n    }\n    /**\n     * Get the current zoom level. This method may return non-integer zoom levels\n     * if the view does not constrain the resolution, or if an interaction or\n     * animation is underway.\n     * @return {number|undefined} Zoom.\n     * @api\n     */\n  }, {\n    key: \"getZoom\",\n    value: function getZoom() {\n      var zoom;\n      var resolution = this.getResolution();\n      if (resolution !== undefined) {\n        zoom = this.getZoomForResolution(resolution);\n      }\n      return zoom;\n    }\n    /**\n     * Get the zoom level for a resolution.\n     * @param {number} resolution The resolution.\n     * @return {number|undefined} The zoom level for the provided resolution.\n     * @api\n     */\n  }, {\n    key: \"getZoomForResolution\",\n    value: function getZoomForResolution(resolution) {\n      var offset = this.minZoom_ || 0;\n      var max, zoomFactor;\n      if (this.resolutions_) {\n        var nearest = linearFindNearest(this.resolutions_, resolution, 1);\n        offset = nearest;\n        max = this.resolutions_[nearest];\n        if (nearest == this.resolutions_.length - 1) {\n          zoomFactor = 2;\n        } else {\n          zoomFactor = max / this.resolutions_[nearest + 1];\n        }\n      } else {\n        max = this.maxResolution_;\n        zoomFactor = this.zoomFactor_;\n      }\n      return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n    }\n    /**\n     * Get the resolution for a zoom level.\n     * @param {number} zoom Zoom level.\n     * @return {number} The view resolution for the provided zoom level.\n     * @api\n     */\n  }, {\n    key: \"getResolutionForZoom\",\n    value: function getResolutionForZoom(zoom) {\n      if (this.resolutions_) {\n        if (this.resolutions_.length <= 1) {\n          return 0;\n        }\n        var baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);\n        var zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n        return this.resolutions_[baseLevel] / Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1));\n      }\n      return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);\n    }\n    /**\n     * Fit the given geometry or extent based on the given map size and border.\n     * The size is pixel dimensions of the box to fit the extent into.\n     * In most cases you will want to use the map size, that is `map.getSize()`.\n     * Takes care of the map angle.\n     * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n     *     extent to fit the view to.\n     * @param {FitOptions} [options] Options.\n     * @api\n     */\n  }, {\n    key: \"fit\",\n    value: function fit(geometryOrExtent, options) {\n      /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n      var geometry;\n      assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */geometryOrExtent.getSimplifiedGeometry === 'function', 24); // Invalid extent or geometry provided as `geometry`\n      if (Array.isArray(geometryOrExtent)) {\n        assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n        var extent = fromUserExtent(geometryOrExtent, this.getProjection());\n        geometry = polygonFromExtent(extent);\n      } else if (geometryOrExtent.getType() === 'Circle') {\n        var _extent = fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());\n        geometry = polygonFromExtent(_extent);\n        geometry.rotate(this.getRotation(), getCenter(_extent));\n      } else {\n        var userProjection = getUserProjection();\n        if (userProjection) {\n          geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n          geometryOrExtent.clone().transform(userProjection, this.getProjection());\n        } else {\n          geometry = geometryOrExtent;\n        }\n      }\n      this.fitInternal(geometry, options);\n    }\n    /**\n     * Calculate rotated extent\n     * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n     * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n     */\n  }, {\n    key: \"rotatedExtentForGeometry\",\n    value: function rotatedExtentForGeometry(geometry) {\n      var rotation = this.getRotation();\n      var cosAngle = Math.cos(rotation);\n      var sinAngle = Math.sin(-rotation);\n      var coords = geometry.getFlatCoordinates();\n      var stride = geometry.getStride();\n      var minRotX = +Infinity;\n      var minRotY = +Infinity;\n      var maxRotX = -Infinity;\n      var maxRotY = -Infinity;\n      for (var i = 0, ii = coords.length; i < ii; i += stride) {\n        var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n        var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n        minRotX = Math.min(minRotX, rotX);\n        minRotY = Math.min(minRotY, rotY);\n        maxRotX = Math.max(maxRotX, rotX);\n        maxRotY = Math.max(maxRotY, rotY);\n      }\n      return [minRotX, minRotY, maxRotX, maxRotY];\n    }\n    /**\n     * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n     * @param {FitOptions} [options] Options.\n     */\n  }, {\n    key: \"fitInternal\",\n    value: function fitInternal(geometry, options) {\n      options = options || {};\n      var size = options.size;\n      if (!size) {\n        size = this.getViewportSizeMinusPadding_();\n      }\n      var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n      var nearest = options.nearest !== undefined ? options.nearest : false;\n      var minResolution;\n      if (options.minResolution !== undefined) {\n        minResolution = options.minResolution;\n      } else if (options.maxZoom !== undefined) {\n        minResolution = this.getResolutionForZoom(options.maxZoom);\n      } else {\n        minResolution = 0;\n      }\n      var rotatedExtent = this.rotatedExtentForGeometry(geometry);\n\n      // calculate resolution\n      var resolution = this.getResolutionForExtentInternal(rotatedExtent, [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n      resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n      resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n\n      // calculate center\n      var rotation = this.getRotation();\n      var sinAngle = Math.sin(rotation);\n      var cosAngle = Math.cos(rotation);\n      var centerRot = getCenter(rotatedExtent);\n      centerRot[0] += (padding[1] - padding[3]) / 2 * resolution;\n      centerRot[1] += (padding[0] - padding[2]) / 2 * resolution;\n      var centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n      var centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n      var center = this.getConstrainedCenter([centerX, centerY], resolution);\n      var callback = options.callback ? options.callback : VOID;\n      if (options.duration !== undefined) {\n        this.animateInternal({\n          resolution: resolution,\n          center: center,\n          duration: options.duration,\n          easing: options.easing\n        }, callback);\n      } else {\n        this.targetResolution_ = resolution;\n        this.targetCenter_ = center;\n        this.applyTargetState_(false, true);\n        animationCallback(callback, true);\n      }\n    }\n    /**\n     * Center on coordinate and view position.\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"./size.js\").Size} size Box pixel size.\n     * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n     * @api\n     */\n  }, {\n    key: \"centerOn\",\n    value: function centerOn(coordinate, size, position) {\n      this.centerOnInternal(fromUserCoordinate(coordinate, this.getProjection()), size, position);\n    }\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"./size.js\").Size} size Box pixel size.\n     * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n     */\n  }, {\n    key: \"centerOnInternal\",\n    value: function centerOnInternal(coordinate, size, position) {\n      this.setCenterInternal(calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));\n    }\n    /**\n     * Calculates the shift between map and viewport center.\n     * @param {import(\"./coordinate.js\").Coordinate} center Center.\n     * @param {number} resolution Resolution.\n     * @param {number} rotation Rotation.\n     * @param {import(\"./size.js\").Size} size Size.\n     * @return {Array<number>|undefined} Center shift.\n     */\n  }, {\n    key: \"calculateCenterShift\",\n    value: function calculateCenterShift(center, resolution, rotation, size) {\n      var centerShift;\n      var padding = this.padding_;\n      if (padding && center) {\n        var reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n        var shiftedCenter = calculateCenterOn(center, size, [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]], resolution, rotation);\n        centerShift = [center[0] - shiftedCenter[0], center[1] - shiftedCenter[1]];\n      }\n      return centerShift;\n    }\n    /**\n     * @return {boolean} Is defined.\n     */\n  }, {\n    key: \"isDef\",\n    value: function isDef() {\n      return !!this.getCenterInternal() && this.getResolution() !== undefined;\n    }\n    /**\n     * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n     * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n     * @api\n     */\n  }, {\n    key: \"adjustCenter\",\n    value: function adjustCenter(deltaCoordinates) {\n      var center = toUserCoordinate(this.targetCenter_, this.getProjection());\n      this.setCenter([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);\n    }\n    /**\n     * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n     * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n     */\n  }, {\n    key: \"adjustCenterInternal\",\n    value: function adjustCenterInternal(deltaCoordinates) {\n      var center = this.targetCenter_;\n      this.setCenterInternal([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);\n    }\n    /**\n     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n     * constraint will apply.\n     * @param {number} ratio The ratio to apply on the view resolution.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n     * @api\n     */\n  }, {\n    key: \"adjustResolution\",\n    value: function adjustResolution(ratio, anchor) {\n      anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n      this.adjustResolutionInternal(ratio, anchor);\n    }\n    /**\n     * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n     * constraint will apply.\n     * @param {number} ratio The ratio to apply on the view resolution.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n     */\n  }, {\n    key: \"adjustResolutionInternal\",\n    value: function adjustResolutionInternal(ratio, anchor) {\n      var isMoving = this.getAnimating() || this.getInteracting();\n      var size = this.getViewportSize_(this.getRotation());\n      var newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);\n      if (anchor) {\n        this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\n      }\n      this.targetResolution_ *= ratio;\n      this.applyTargetState_();\n    }\n    /**\n     * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n     * constraint will apply.\n     * @param {number} delta Relative value to add to the zoom level.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n     * @api\n     */\n  }, {\n    key: \"adjustZoom\",\n    value: function adjustZoom(delta, anchor) {\n      this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\n    }\n    /**\n     * Adds a value to the view rotation, optionally using an anchor. Any rotation\n     * constraint will apply.\n     * @param {number} delta Relative value to add to the zoom rotation, in radians.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n     * @api\n     */\n  }, {\n    key: \"adjustRotation\",\n    value: function adjustRotation(delta, anchor) {\n      if (anchor) {\n        anchor = fromUserCoordinate(anchor, this.getProjection());\n      }\n      this.adjustRotationInternal(delta, anchor);\n    }\n    /**\n     * @param {number} delta Relative value to add to the zoom rotation, in radians.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n     */\n  }, {\n    key: \"adjustRotationInternal\",\n    value: function adjustRotationInternal(delta, anchor) {\n      var isMoving = this.getAnimating() || this.getInteracting();\n      var newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);\n      if (anchor) {\n        this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\n      }\n      this.targetRotation_ += delta;\n      this.applyTargetState_();\n    }\n    /**\n     * Set the center of the current view. Any extent constraint will apply.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setCenter\",\n    value: function setCenter(center) {\n      this.setCenterInternal(center ? fromUserCoordinate(center, this.getProjection()) : center);\n    }\n    /**\n     * Set the center using the view projection (not the user projection).\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n     */\n  }, {\n    key: \"setCenterInternal\",\n    value: function setCenterInternal(center) {\n      this.targetCenter_ = center;\n      this.applyTargetState_();\n    }\n    /**\n     * @param {import(\"./ViewHint.js\").default} hint Hint.\n     * @param {number} delta Delta.\n     * @return {number} New value.\n     */\n  }, {\n    key: \"setHint\",\n    value: function setHint(hint, delta) {\n      this.hints_[hint] += delta;\n      this.changed();\n      return this.hints_[hint];\n    }\n    /**\n     * Set the resolution for this view. Any resolution constraint will apply.\n     * @param {number|undefined} resolution The resolution of the view.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setResolution\",\n    value: function setResolution(resolution) {\n      this.targetResolution_ = resolution;\n      this.applyTargetState_();\n    }\n    /**\n     * Set the rotation for this view. Any rotation constraint will apply.\n     * @param {number} rotation The rotation of the view in radians.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      this.targetRotation_ = rotation;\n      this.applyTargetState_();\n    }\n    /**\n     * Zoom to a specific zoom level. Any resolution constrain will apply.\n     * @param {number} zoom Zoom level.\n     * @api\n     */\n  }, {\n    key: \"setZoom\",\n    value: function setZoom(zoom) {\n      this.setResolution(this.getResolutionForZoom(zoom));\n    }\n    /**\n     * Recompute rotation/resolution/center based on target values.\n     * Note: we have to compute rotation first, then resolution and center considering that\n     * parameters can influence one another in case a view extent constraint is present.\n     * @param {boolean} [doNotCancelAnims] Do not cancel animations.\n     * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\n     * @private\n     */\n  }, {\n    key: \"applyTargetState_\",\n    value: function applyTargetState_(doNotCancelAnims, forceMoving) {\n      var isMoving = this.getAnimating() || this.getInteracting() || forceMoving;\n\n      // compute rotation\n      var newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);\n      var size = this.getViewportSize_(newRotation);\n      var newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);\n      var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n      if (this.get(ViewProperty.ROTATION) !== newRotation) {\n        this.set(ViewProperty.ROTATION, newRotation);\n      }\n      if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n        this.set(ViewProperty.RESOLUTION, newResolution);\n        this.set('zoom', this.getZoom(), true);\n      }\n      if (!newCenter || !this.get(ViewProperty.CENTER) || !equals(this.get(ViewProperty.CENTER), newCenter)) {\n        this.set(ViewProperty.CENTER, newCenter);\n      }\n      if (this.getAnimating() && !doNotCancelAnims) {\n        this.cancelAnimations();\n      }\n      this.cancelAnchor_ = undefined;\n    }\n    /**\n     * If any constraints need to be applied, an animation will be triggered.\n     * This is typically done on interaction end.\n     * Note: calling this with a duration of 0 will apply the constrained values straight away,\n     * without animation.\n     * @param {number} [duration] The animation duration in ms.\n     * @param {number} [resolutionDirection] Which direction to zoom.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n     */\n  }, {\n    key: \"resolveConstraints\",\n    value: function resolveConstraints(duration, resolutionDirection, anchor) {\n      duration = duration !== undefined ? duration : 200;\n      var direction = resolutionDirection || 0;\n      var newRotation = this.constraints_.rotation(this.targetRotation_);\n      var size = this.getViewportSize_(newRotation);\n      var newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);\n      var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n      if (duration === 0 && !this.cancelAnchor_) {\n        this.targetResolution_ = newResolution;\n        this.targetRotation_ = newRotation;\n        this.targetCenter_ = newCenter;\n        this.applyTargetState_();\n        return;\n      }\n      anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n      this.cancelAnchor_ = undefined;\n      if (this.getResolution() !== newResolution || this.getRotation() !== newRotation || !this.getCenterInternal() || !equals(this.getCenterInternal(), newCenter)) {\n        if (this.getAnimating()) {\n          this.cancelAnimations();\n        }\n        this.animateInternal({\n          rotation: newRotation,\n          center: newCenter,\n          resolution: newResolution,\n          duration: duration,\n          easing: easeOut,\n          anchor: anchor\n        });\n      }\n    }\n    /**\n     * Notify the View that an interaction has started.\n     * The view state will be resolved to a stable one if needed\n     * (depending on its constraints).\n     * @api\n     */\n  }, {\n    key: \"beginInteraction\",\n    value: function beginInteraction() {\n      this.resolveConstraints(0);\n      this.setHint(ViewHint.INTERACTING, 1);\n    }\n    /**\n     * Notify the View that an interaction has ended. The view state will be resolved\n     * to a stable one if needed (depending on its constraints).\n     * @param {number} [duration] Animation duration in ms.\n     * @param {number} [resolutionDirection] Which direction to zoom.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n     * @api\n     */\n  }, {\n    key: \"endInteraction\",\n    value: function endInteraction(duration, resolutionDirection, anchor) {\n      anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n      this.endInteractionInternal(duration, resolutionDirection, anchor);\n    }\n    /**\n     * Notify the View that an interaction has ended. The view state will be resolved\n     * to a stable one if needed (depending on its constraints).\n     * @param {number} [duration] Animation duration in ms.\n     * @param {number} [resolutionDirection] Which direction to zoom.\n     * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n     */\n  }, {\n    key: \"endInteractionInternal\",\n    value: function endInteractionInternal(duration, resolutionDirection, anchor) {\n      this.setHint(ViewHint.INTERACTING, -1);\n      this.resolveConstraints(duration, resolutionDirection, anchor);\n    }\n    /**\n     * Get a valid position for the view center according to the current constraints.\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n     * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\n     * This is useful to guess a valid center position at a different zoom level.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n     */\n  }, {\n    key: \"getConstrainedCenter\",\n    value: function getConstrainedCenter(targetCenter, targetResolution) {\n      var size = this.getViewportSize_(this.getRotation());\n      return this.constraints_.center(targetCenter, targetResolution || this.getResolution(), size);\n    }\n    /**\n     * Get a valid zoom level according to the current view constraints.\n     * @param {number|undefined} targetZoom Target zoom.\n     * @param {number} [direction=0] Indicate which resolution should be used\n     * by a renderer if the view resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @return {number|undefined} Valid zoom level.\n     */\n  }, {\n    key: \"getConstrainedZoom\",\n    value: function getConstrainedZoom(targetZoom, direction) {\n      var targetRes = this.getResolutionForZoom(targetZoom);\n      return this.getZoomForResolution(this.getConstrainedResolution(targetRes, direction));\n    }\n    /**\n     * Get a valid resolution according to the current view constraints.\n     * @param {number|undefined} targetResolution Target resolution.\n     * @param {number} [direction=0] Indicate which resolution should be used\n     * by a renderer if the view resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @return {number|undefined} Valid resolution.\n     */\n  }, {\n    key: \"getConstrainedResolution\",\n    value: function getConstrainedResolution(targetResolution, direction) {\n      direction = direction || 0;\n      var size = this.getViewportSize_(this.getRotation());\n      return this.constraints_.resolution(targetResolution, direction, size);\n    }\n  }, {\n    key: \"padding\",\n    get: function get() {\n      return this.padding_;\n    },\n    set: function set(padding) {\n      var oldPadding = this.padding_;\n      this.padding_ = padding;\n      var center = this.getCenter();\n      if (center) {\n        var newPadding = padding || [0, 0, 0, 0];\n        oldPadding = oldPadding || [0, 0, 0, 0];\n        var resolution = this.getResolution();\n        var offsetX = resolution / 2 * (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n        var offsetY = resolution / 2 * (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n        this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n      }\n    }\n  }]);\n  return View;\n}(BaseObject);\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    var smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n  var projection = createProjection(options.projection, 'EPSG:3857');\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    var extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n  return centerNone;\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  var resolutionConstraint;\n  var maxResolution;\n  var minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  var defaultMaxZoom = 28;\n  var defaultZoomFactor = 2;\n  var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n  var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n  var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n  var multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;\n  var smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;\n  var showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;\n  var projection = createProjection(options.projection, 'EPSG:3857');\n  var projExtent = projection.getExtent();\n  var constrainOnlyCenter = options.constrainOnlyCenter;\n  var extent = options.extent;\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n  if (options.resolutions !== undefined) {\n    var resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n      resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n  } else {\n    // calculate the default min and max resolution\n    var size = !projExtent ?\n    // use an extent that can fit the whole world if need be\n    360 * METERS_PER_UNIT.degrees / projection.getMetersPerUnit() : Math.max(getWidth(projExtent), getHeight(projExtent));\n    var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n    var defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n      resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    var constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    }\n    return rotationNone;\n  }\n  return disable;\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n  // calculate rotated position\n  var cosAngle = Math.cos(-rotation);\n  var sinAngle = Math.sin(-rotation);\n  var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution;\n\n  // go back to original angle\n  sinAngle = -sinAngle; // go back to original rotation\n  var centerX = rotX * cosAngle - rotY * sinAngle;\n  var centerY = rotY * cosAngle + rotX * sinAngle;\n  return [centerX, centerY];\n}\nexport default View;","map":null,"metadata":{},"sourceType":"module"}