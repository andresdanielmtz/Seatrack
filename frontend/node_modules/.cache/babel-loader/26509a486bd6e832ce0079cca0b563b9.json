{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport { IMAGE_DECODE } from './has.js';\nimport { getHeight } from './extent.js';\nimport { listenOnce, unlistenByKey } from './events.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\nvar ImageWrapper = /*#__PURE__*/function (_ImageBase) {\n  _inherits(ImageWrapper, _ImageBase);\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   */\n  function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n    var _this;\n    _classCallCheck(this, ImageWrapper);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageWrapper).call(this, extent, resolution, pixelRatio, ImageState.IDLE));\n\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    _this.image_ = new Image();\n    if (crossOrigin !== null) {\n      _this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    _this.unlisten_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    _this.state = ImageState.IDLE;\n\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n    _this.imageLoadFunction_ = imageLoadFunction;\n    return _this;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  _createClass(ImageWrapper, [{\n    key: \"getImage\",\n    value: function getImage() {\n      return this.image_;\n    }\n    /**\n     * Tracks loading or read errors.\n     *\n     * @private\n     */\n  }, {\n    key: \"handleImageError_\",\n    value: function handleImageError_() {\n      this.state = ImageState.ERROR;\n      this.unlistenImage_();\n      this.changed();\n    }\n    /**\n     * Tracks successful image load.\n     *\n     * @private\n     */\n  }, {\n    key: \"handleImageLoad_\",\n    value: function handleImageLoad_() {\n      if (this.resolution === undefined) {\n        this.resolution = getHeight(this.extent) / this.image_.height;\n      }\n      this.state = ImageState.LOADED;\n      this.unlistenImage_();\n      this.changed();\n    }\n    /**\n     * Load the image or retry if loading previously failed.\n     * Loading is taken care of by the tile queue, and calling this method is\n     * only needed for preloading or for reloading in case of an error.\n     * @api\n     */\n  }, {\n    key: \"load\",\n    value: function load() {\n      if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n        this.state = ImageState.LOADING;\n        this.changed();\n        this.imageLoadFunction_(this, this.src_);\n        this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n      }\n    }\n    /**\n     * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n     */\n  }, {\n    key: \"setImage\",\n    value: function setImage(image) {\n      this.image_ = image;\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n    /**\n     * Discards event handlers which listen for load completion or errors.\n     *\n     * @private\n     */\n  }, {\n    key: \"unlistenImage_\",\n    value: function unlistenImage_() {\n      if (this.unlisten_) {\n        this.unlisten_();\n        this.unlisten_ = null;\n      }\n    }\n  }]);\n  return ImageWrapper;\n}(ImageBase);\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  var img = /** @type {HTMLImageElement} */image;\n  var listening = true;\n  var decoding = false;\n  var loaded = false;\n  var listenerKeys = [listenOnce(img, EventType.LOAD, function () {\n    loaded = true;\n    if (!decoding) {\n      loadHandler();\n    }\n  })];\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img.decode().then(function () {\n      if (listening) {\n        loadHandler();\n      }\n    }).catch(function (error) {\n      if (listening) {\n        if (loaded) {\n          loadHandler();\n        } else {\n          errorHandler();\n        }\n      }\n    });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\nexport default ImageWrapper;","map":null,"metadata":{},"sourceType":"module"}