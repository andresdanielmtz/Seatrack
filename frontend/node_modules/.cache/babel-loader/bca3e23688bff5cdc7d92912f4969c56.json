{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/Feature\n */\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport { assert } from './asserts.js';\nimport { listen, unlistenByKey } from './events.js';\n\n/**\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\n */\n\n/**\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:geometry', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types\n *     |'change:geometry', Return>} FeatureOnSignature\n */\n\n/***\n * @template Geometry\n * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry\n */\n\n/**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature.js';\n * import Polygon from 'ol/geom/Polygon.js';\n * import Point from 'ol/geom/Point.js';\n *\n * const feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon',\n * });\n *\n * // get the polygon geometry\n * const poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * const point = feature.getGeometry();\n * ```\n *\n * @api\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\n */\nvar Feature = /*#__PURE__*/function (_BaseObject) {\n  _inherits(Feature, _BaseObject);\n  /**\n   * @param {Geometry|ObjectWithGeometry<Geometry>} [geometryOrProperties]\n   *     You may pass a Geometry object directly, or an object literal containing\n   *     properties. If you pass an object literal, you may include a Geometry\n   *     associated with a `geometry` key.\n   */\n  function Feature(geometryOrProperties) {\n    var _this;\n    _classCallCheck(this, Feature);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Feature).call(this));\n\n    /***\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.on;\n\n    /***\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.once;\n\n    /***\n     * @type {FeatureOnSignature<void>}\n     */\n    _this.un;\n\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n    _this.id_ = undefined;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    _this.geometryName_ = 'geometry';\n\n    /**\n     * User provided style.\n     * @private\n     * @type {import(\"./style/Style.js\").StyleLike}\n     */\n    _this.style_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\n     */\n    _this.styleFunction_ = undefined;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    _this.geometryChangeKey_ = null;\n    _this.addChangeListener(_this.geometryName_, _this.handleGeometryChanged_);\n    if (geometryOrProperties) {\n      if (typeof /** @type {?} */geometryOrProperties.getSimplifiedGeometry === 'function') {\n        var geometry = /** @type {Geometry} */geometryOrProperties;\n        _this.setGeometry(geometry);\n      } else {\n        /** @type {Object<string, *>} */\n        var properties = geometryOrProperties;\n        _this.setProperties(properties);\n      }\n    }\n    return _this;\n  }\n\n  /**\n   * Clone this feature. If the original feature has a geometry it\n   * is also cloned. The feature id is not set in the clone.\n   * @return {Feature<Geometry>} The clone.\n   * @api\n   */\n  _createClass(Feature, [{\n    key: \"clone\",\n    value: function clone() {\n      var clone = /** @type {Feature<Geometry>} */\n      new Feature(this.hasProperties() ? this.getProperties() : null);\n      clone.setGeometryName(this.getGeometryName());\n      var geometry = this.getGeometry();\n      if (geometry) {\n        clone.setGeometry( /** @type {Geometry} */geometry.clone());\n      }\n      var style = this.getStyle();\n      if (style) {\n        clone.setStyle(style);\n      }\n      return clone;\n    }\n    /**\n     * Get the feature's default geometry.  A feature may have any number of named\n     * geometries.  The \"default\" geometry (the one that is rendered by default) is\n     * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n     * @return {Geometry|undefined} The default geometry for the feature.\n     * @api\n     * @observable\n     */\n  }, {\n    key: \"getGeometry\",\n    value: function getGeometry() {\n      return (/** @type {Geometry|undefined} */this.get(this.geometryName_)\n      );\n    }\n    /**\n     * Get the feature identifier.  This is a stable identifier for the feature and\n     * is either set when reading data from a remote source or set explicitly by\n     * calling {@link module:ol/Feature~Feature#setId}.\n     * @return {number|string|undefined} Id.\n     * @api\n     */\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      return this.id_;\n    }\n    /**\n     * Get the name of the feature's default geometry.  By default, the default\n     * geometry is named `geometry`.\n     * @return {string} Get the property name associated with the default geometry\n     *     for this feature.\n     * @api\n     */\n  }, {\n    key: \"getGeometryName\",\n    value: function getGeometryName() {\n      return this.geometryName_;\n    }\n    /**\n     * Get the feature's style. Will return what was provided to the\n     * {@link module:ol/Feature~Feature#setStyle} method.\n     * @return {import(\"./style/Style.js\").StyleLike|undefined} The feature style.\n     * @api\n     */\n  }, {\n    key: \"getStyle\",\n    value: function getStyle() {\n      return this.style_;\n    }\n    /**\n     * Get the feature's style function.\n     * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\n     * representing the current style of this feature.\n     * @api\n     */\n  }, {\n    key: \"getStyleFunction\",\n    value: function getStyleFunction() {\n      return this.styleFunction_;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleGeometryChange_\",\n    value: function handleGeometryChange_() {\n      this.changed();\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleGeometryChanged_\",\n    value: function handleGeometryChanged_() {\n      if (this.geometryChangeKey_) {\n        unlistenByKey(this.geometryChangeKey_);\n        this.geometryChangeKey_ = null;\n      }\n      var geometry = this.getGeometry();\n      if (geometry) {\n        this.geometryChangeKey_ = listen(geometry, EventType.CHANGE, this.handleGeometryChange_, this);\n      }\n      this.changed();\n    }\n    /**\n     * Set the default geometry for the feature.  This will update the property\n     * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n     * @param {Geometry|undefined} geometry The new geometry.\n     * @api\n     * @observable\n     */\n  }, {\n    key: \"setGeometry\",\n    value: function setGeometry(geometry) {\n      this.set(this.geometryName_, geometry);\n    }\n    /**\n     * Set the style for the feature to override the layer style.  This can be a\n     * single style object, an array of styles, or a function that takes a\n     * resolution and returns an array of styles. To unset the feature style, call\n     * `setStyle()` without arguments or a falsey value.\n     * @param {import(\"./style/Style.js\").StyleLike} [style] Style for this feature.\n     * @api\n     * @fires module:ol/events/Event~BaseEvent#event:change\n     */\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(style) {\n      this.style_ = style;\n      this.styleFunction_ = !style ? undefined : createStyleFunction(style);\n      this.changed();\n    }\n    /**\n     * Set the feature id.  The feature id is considered stable and may be used when\n     * requesting features or comparing identifiers returned from a remote source.\n     * The feature id can be used with the\n     * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n     * @param {number|string|undefined} id The feature id.\n     * @api\n     * @fires module:ol/events/Event~BaseEvent#event:change\n     */\n  }, {\n    key: \"setId\",\n    value: function setId(id) {\n      this.id_ = id;\n      this.changed();\n    }\n    /**\n     * Set the property name to be used when getting the feature's default geometry.\n     * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n     * this name will be returned.\n     * @param {string} name The property name of the default geometry.\n     * @api\n     */\n  }, {\n    key: \"setGeometryName\",\n    value: function setGeometryName(name) {\n      this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);\n      this.geometryName_ = name;\n      this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\n      this.handleGeometryChanged_();\n    }\n  }]);\n  return Feature;\n}(BaseObject);\n/**\n * Convert the provided object into a feature style function.  Functions passed\n * through unchanged.  Arrays of Style or single style objects wrapped\n * in a new feature style function.\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\n *     A feature style function, a single style, or an array of styles.\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\n */\nexport function createStyleFunction(obj) {\n  if (typeof obj === 'function') {\n    return obj;\n  }\n  /**\n   * @type {Array<import(\"./style/Style.js\").default>}\n   */\n  var styles;\n  if (Array.isArray(obj)) {\n    styles = obj;\n  } else {\n    assert(typeof /** @type {?} */obj.getZIndex === 'function', 41); // Expected an `import(\"./style/Style.js\").Style` or an array of `import(\"./style/Style.js\").Style`\n    var style = /** @type {import(\"./style/Style.js\").default} */obj;\n    styles = [style];\n  }\n  return function () {\n    return styles;\n  };\n}\nexport default Feature;","map":null,"metadata":{},"sourceType":"module"}