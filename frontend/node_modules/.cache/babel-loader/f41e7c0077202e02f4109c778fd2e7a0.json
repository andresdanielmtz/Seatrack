{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { assert } from '../asserts.js';\nimport { get as getIconImage } from './IconImage.js';\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not.\n * The provided `imgSize` needs to match the actual size of the image.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nvar Icon = /*#__PURE__*/function (_ImageStyle) {\n  _inherits(Icon, _ImageStyle);\n  /**\n   * @param {Options} [options] Options.\n   */\n  function Icon(options) {\n    var _this;\n    _classCallCheck(this, Icon);\n    options = options || {};\n\n    /**\n     * @type {number}\n     */\n    var opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    var rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    var scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Icon).call(this, {\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode\n    }));\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    _this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    _this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    _this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    var image = options.img !== undefined ? options.img : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size|undefined}\n     */\n    _this.imgSize_ = options.imgSize;\n\n    /**\n     * @type {string|undefined}\n     */\n    var src = options.src;\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n    assert(!image || image && _this.imgSize_, 5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */image.src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n    // `width` or `height` cannot be provided together with `scale`\n    assert(!((options.width !== undefined || options.height !== undefined) && options.scale !== undefined), 69);\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    var imageState = options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    _this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    _this.iconImage_ = getIconImage(image, /** @type {string} */src, _this.imgSize_ !== undefined ? _this.imgSize_ : null, _this.crossOrigin_, imageState, _this.color_);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    _this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.size_ = options.size !== undefined ? options.size : null;\n\n    /**\n     * @type {number|undefined}\n     */\n    _this.width_ = options.width;\n\n    /**\n     * @type {number|undefined}\n     */\n    _this.height_ = options.height;\n\n    /**\n     * Recalculate the scale if width or height where given.\n     */\n    if (_this.width_ !== undefined || _this.height_ !== undefined) {\n      var _image = _this.getImage(1);\n      var setScale = function setScale() {\n        _this.updateScaleFromWidthAndHeight(_this.width_, _this.height_);\n      };\n      if (_image.width > 0) {\n        _this.updateScaleFromWidthAndHeight(_this.width_, _this.height_);\n      } else {\n        _image.addEventListener('load', setScale);\n      }\n    }\n    return _this;\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  _createClass(Icon, [{\n    key: \"clone\",\n    value: function clone() {\n      var scale = this.getScale();\n      return new Icon({\n        anchor: this.anchor_.slice(),\n        anchorOrigin: this.anchorOrigin_,\n        anchorXUnits: this.anchorXUnits_,\n        anchorYUnits: this.anchorYUnits_,\n        color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n        crossOrigin: this.crossOrigin_,\n        imgSize: this.imgSize_,\n        offset: this.offset_.slice(),\n        offsetOrigin: this.offsetOrigin_,\n        opacity: this.getOpacity(),\n        rotateWithView: this.getRotateWithView(),\n        rotation: this.getRotation(),\n        scale: Array.isArray(scale) ? scale.slice() : scale,\n        size: this.size_ !== null ? this.size_.slice() : undefined,\n        src: this.getSrc(),\n        displacement: this.getDisplacement().slice(),\n        declutterMode: this.getDeclutterMode(),\n        width: this.width_,\n        height: this.height_\n      });\n    }\n    /**\n     * Set the scale of the Icon by calculating it from given width and height and the\n     * width and height of the image.\n     *\n     * @private\n     * @param {number} width The width.\n     * @param {number} height The height.\n     */\n  }, {\n    key: \"updateScaleFromWidthAndHeight\",\n    value: function updateScaleFromWidthAndHeight(width, height) {\n      var image = this.getImage(1);\n      if (width !== undefined && height !== undefined) {\n        _get(_getPrototypeOf(Icon.prototype), \"setScale\", this).call(this, [width / image.width, height / image.height]);\n      } else if (width !== undefined) {\n        _get(_getPrototypeOf(Icon.prototype), \"setScale\", this).call(this, [width / image.width, width / image.width]);\n      } else if (height !== undefined) {\n        _get(_getPrototypeOf(Icon.prototype), \"setScale\", this).call(this, [height / image.height, height / image.height]);\n      } else {\n        _get(_getPrototypeOf(Icon.prototype), \"setScale\", this).call(this, [1, 1]);\n      }\n    }\n    /**\n     * Get the anchor point in pixels. The anchor determines the center point for the\n     * symbolizer.\n     * @return {Array<number>} Anchor.\n     * @api\n     */\n  }, {\n    key: \"getAnchor\",\n    value: function getAnchor() {\n      var anchor = this.normalizedAnchor_;\n      if (!anchor) {\n        anchor = this.anchor_;\n        var size = this.getSize();\n        if (this.anchorXUnits_ == 'fraction' || this.anchorYUnits_ == 'fraction') {\n          if (!size) {\n            return null;\n          }\n          anchor = this.anchor_.slice();\n          if (this.anchorXUnits_ == 'fraction') {\n            anchor[0] *= size[0];\n          }\n          if (this.anchorYUnits_ == 'fraction') {\n            anchor[1] *= size[1];\n          }\n        }\n        if (this.anchorOrigin_ != 'top-left') {\n          if (!size) {\n            return null;\n          }\n          if (anchor === this.anchor_) {\n            anchor = this.anchor_.slice();\n          }\n          if (this.anchorOrigin_ == 'top-right' || this.anchorOrigin_ == 'bottom-right') {\n            anchor[0] = -anchor[0] + size[0];\n          }\n          if (this.anchorOrigin_ == 'bottom-left' || this.anchorOrigin_ == 'bottom-right') {\n            anchor[1] = -anchor[1] + size[1];\n          }\n        }\n        this.normalizedAnchor_ = anchor;\n      }\n      var displacement = this.getDisplacement();\n      var scale = this.getScaleArray();\n      // anchor is scaled by renderer but displacement should not be scaled\n      // so divide by scale here\n      return [anchor[0] - displacement[0] / scale[0], anchor[1] + displacement[1] / scale[1]];\n    }\n    /**\n     * Set the anchor point. The anchor determines the center point for the\n     * symbolizer.\n     *\n     * @param {Array<number>} anchor Anchor.\n     * @api\n     */\n  }, {\n    key: \"setAnchor\",\n    value: function setAnchor(anchor) {\n      this.anchor_ = anchor;\n      this.normalizedAnchor_ = null;\n    }\n    /**\n     * Get the icon color.\n     * @return {import(\"../color.js\").Color} Color.\n     * @api\n     */\n  }, {\n    key: \"getColor\",\n    value: function getColor() {\n      return this.color_;\n    }\n    /**\n     * Get the image icon.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n     * @api\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage(pixelRatio) {\n      return this.iconImage_.getImage(pixelRatio);\n    }\n    /**\n     * Get the pixel ratio.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} The pixel ratio of the image.\n     * @api\n     */\n  }, {\n    key: \"getPixelRatio\",\n    value: function getPixelRatio(pixelRatio) {\n      return this.iconImage_.getPixelRatio(pixelRatio);\n    }\n    /**\n     * @return {import(\"../size.js\").Size} Image size.\n     */\n  }, {\n    key: \"getImageSize\",\n    value: function getImageSize() {\n      return this.iconImage_.getSize();\n    }\n    /**\n     * @return {import(\"../ImageState.js\").default} Image state.\n     */\n  }, {\n    key: \"getImageState\",\n    value: function getImageState() {\n      return this.iconImage_.getImageState();\n    }\n    /**\n     * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n     */\n  }, {\n    key: \"getHitDetectionImage\",\n    value: function getHitDetectionImage() {\n      return this.iconImage_.getHitDetectionImage();\n    }\n    /**\n     * Get the origin of the symbolizer.\n     * @return {Array<number>} Origin.\n     * @api\n     */\n  }, {\n    key: \"getOrigin\",\n    value: function getOrigin() {\n      if (this.origin_) {\n        return this.origin_;\n      }\n      var offset = this.offset_;\n      if (this.offsetOrigin_ != 'top-left') {\n        var size = this.getSize();\n        var iconImageSize = this.iconImage_.getSize();\n        if (!size || !iconImageSize) {\n          return null;\n        }\n        offset = offset.slice();\n        if (this.offsetOrigin_ == 'top-right' || this.offsetOrigin_ == 'bottom-right') {\n          offset[0] = iconImageSize[0] - size[0] - offset[0];\n        }\n        if (this.offsetOrigin_ == 'bottom-left' || this.offsetOrigin_ == 'bottom-right') {\n          offset[1] = iconImageSize[1] - size[1] - offset[1];\n        }\n      }\n      this.origin_ = offset;\n      return this.origin_;\n    }\n    /**\n     * Get the image URL.\n     * @return {string|undefined} Image src.\n     * @api\n     */\n  }, {\n    key: \"getSrc\",\n    value: function getSrc() {\n      return this.iconImage_.getSrc();\n    }\n    /**\n     * Get the size of the icon (in pixels).\n     * @return {import(\"../size.js\").Size} Image size.\n     * @api\n     */\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return !this.size_ ? this.iconImage_.getSize() : this.size_;\n    }\n    /**\n     * Get the width of the icon (in pixels).\n     * @return {number} Icon width (in pixels).\n     * @api\n     */\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.width_;\n    }\n    /**\n     * Get the height of the icon (in pixels).\n     * @return {number} Icon height (in pixels).\n     * @api\n     */\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.height_;\n    }\n    /**\n     * Set the width of the icon in pixels.\n     *\n     * @param {number} width The width to set.\n     */\n  }, {\n    key: \"setWidth\",\n    value: function setWidth(width) {\n      this.width_ = width;\n      this.updateScaleFromWidthAndHeight(width, this.height_);\n    }\n    /**\n     * Set the height of the icon in pixels.\n     *\n     * @param {number} height The height to set.\n     */\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(height) {\n      this.height_ = height;\n      this.updateScaleFromWidthAndHeight(this.width_, height);\n    }\n    /**\n     * Set the scale and updates the width and height correspondingly.\n     *\n     * @param {number|import(\"../size.js\").Size} scale Scale.\n     * @override\n     * @api\n     */\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      _get(_getPrototypeOf(Icon.prototype), \"setScale\", this).call(this, scale);\n      var image = this.getImage(1);\n      if (image) {\n        var widthScale = Array.isArray(scale) ? scale[0] : scale;\n        if (widthScale !== undefined) {\n          this.width_ = widthScale * image.width;\n        }\n        var heightScale = Array.isArray(scale) ? scale[1] : scale;\n        if (heightScale !== undefined) {\n          this.height_ = heightScale * image.height;\n        }\n      }\n    }\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n  }, {\n    key: \"listenImageChange\",\n    value: function listenImageChange(listener) {\n      this.iconImage_.addEventListener(EventType.CHANGE, listener);\n    }\n    /**\n     * Load not yet loaded URI.\n     * When rendering a feature with an icon style, the vector renderer will\n     * automatically call this method. However, you might want to call this\n     * method yourself for preloading or other purposes.\n     * @api\n     */\n  }, {\n    key: \"load\",\n    value: function load() {\n      this.iconImage_.load();\n    }\n    /**\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n  }, {\n    key: \"unlistenImageChange\",\n    value: function unlistenImageChange(listener) {\n      this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n    }\n  }]);\n  return Icon;\n}(ImageStyle);\nexport default Icon;","map":null,"metadata":{},"sourceType":"module"}