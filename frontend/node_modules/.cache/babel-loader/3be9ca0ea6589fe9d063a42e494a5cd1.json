{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/ImageCanvas\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\nvar ImageCanvas = /*#__PURE__*/function (_ImageBase) {\n  _inherits(ImageCanvas, _ImageBase);\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader} [loader] Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  function ImageCanvas(extent, resolution, pixelRatio, canvas, loader) {\n    var _this;\n    _classCallCheck(this, ImageCanvas);\n    var state = loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageCanvas).call(this, extent, resolution, pixelRatio, state));\n\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    _this.loader_ = loader !== undefined ? loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    _this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {?Error}\n     */\n    _this.error_ = null;\n    return _this;\n  }\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n  _createClass(ImageCanvas, [{\n    key: \"getError\",\n    value: function getError() {\n      return this.error_;\n    }\n    /**\n     * Handle async drawing complete.\n     * @param {Error} [err] Any error during drawing.\n     * @private\n     */\n  }, {\n    key: \"handleLoad_\",\n    value: function handleLoad_(err) {\n      if (err) {\n        this.error_ = err;\n        this.state = ImageState.ERROR;\n      } else {\n        this.state = ImageState.LOADED;\n      }\n      this.changed();\n    }\n    /**\n     * Load not yet loaded URI.\n     */\n  }, {\n    key: \"load\",\n    value: function load() {\n      if (this.state == ImageState.IDLE) {\n        this.state = ImageState.LOADING;\n        this.changed();\n        this.loader_(this.handleLoad_.bind(this));\n      }\n    }\n    /**\n     * @return {HTMLCanvasElement} Canvas element.\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage() {\n      return this.canvas_;\n    }\n  }]);\n  return ImageCanvas;\n}(ImageBase);\nexport default ImageCanvas;","map":null,"metadata":{},"sourceType":"module"}