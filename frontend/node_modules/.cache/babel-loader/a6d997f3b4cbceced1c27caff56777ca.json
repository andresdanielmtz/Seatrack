{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n/**\n * @module ol/renderer/Layer\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport Observable from '../Observable.js';\nimport { abstract } from '../util.js';\n\n/**\n * @template {import(\"../layer/Layer.js\").default} LayerType\n */\nvar LayerRenderer = /*#__PURE__*/function (_Observable) {\n  _inherits(LayerRenderer, _Observable);\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  function LayerRenderer(layer) {\n    var _this;\n    _classCallCheck(this, LayerRenderer);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LayerRenderer).call(this));\n\n    /**\n     * The renderer is initialized and ready to render.\n     * @type {boolean}\n     */\n    _this.ready = true;\n\n    /** @private */\n    _this.boundHandleImageChange_ = _this.handleImageChange_.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    /**\n     * @protected\n     * @type {LayerType}\n     */\n    _this.layer_ = layer;\n\n    /**\n     * @type {import(\"../render/canvas/ExecutorGroup\").default}\n     */\n    _this.declutterExecutorGroup = null;\n    return _this;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  _createClass(LayerRenderer, [{\n    key: \"getFeatures\",\n    value: function getFeatures(pixel) {\n      return abstract();\n    }\n    /**\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n     */\n  }, {\n    key: \"getData\",\n    value: function getData(pixel) {\n      return null;\n    }\n    /**\n     * Determine whether render should be called.\n     * @abstract\n     * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n     * @return {boolean} Layer is ready to be rendered.\n     */\n  }, {\n    key: \"prepareFrame\",\n    value: function prepareFrame(frameState) {\n      return abstract();\n    }\n    /**\n     * Render the layer.\n     * @abstract\n     * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target that may be used to render content to.\n     * @return {HTMLElement} The rendered element.\n     */\n  }, {\n    key: \"renderFrame\",\n    value: function renderFrame(frameState, target) {\n      return abstract();\n    }\n    /**\n     * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n     * @param {number} zoom Zoom level.\n     * @param {import(\"../Tile.js\").default} tile Tile.\n     * @return {boolean|void} If `false`, the tile will not be considered loaded.\n     */\n  }, {\n    key: \"loadedTileCallback\",\n    value: function loadedTileCallback(tiles, zoom, tile) {\n      if (!tiles[zoom]) {\n        tiles[zoom] = {};\n      }\n      tiles[zoom][tile.tileCoord.toString()] = tile;\n      return undefined;\n    }\n    /**\n     * Create a function that adds loaded tiles to the tile lookup.\n     * @param {import(\"../source/Tile.js\").default} source Tile source.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection of the tiles.\n     * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n     * @return {function(number, import(\"../TileRange.js\").default):boolean} A function that can be\n     *     called with a zoom level and a tile range to add loaded tiles to the lookup.\n     * @protected\n     */\n  }, {\n    key: \"createLoadedTileFinder\",\n    value: function createLoadedTileFinder(source, projection, tiles) {\n      var _this2 = this;\n      return (\n        /**\n         * @param {number} zoom Zoom level.\n         * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n         * @return {boolean} The tile range is fully loaded.\n         */\n        function (zoom, tileRange) {\n          var callback = _this2.loadedTileCallback.bind(_this2, tiles, zoom);\n          return source.forEachLoadedTile(projection, zoom, tileRange, callback);\n        }\n      );\n    }\n    /**\n     * @abstract\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n     * @param {number} hitTolerance Hit tolerance in pixels.\n     * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n     * @param {Array<import(\"./Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n     * @return {T|undefined} Callback result.\n     * @template T\n     */\n  }, {\n    key: \"forEachFeatureAtCoordinate\",\n    value: function forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n      return undefined;\n    }\n    /**\n     * @return {LayerType} Layer.\n     */\n  }, {\n    key: \"getLayer\",\n    value: function getLayer() {\n      return this.layer_;\n    }\n    /**\n     * Perform action necessary to get the layer rendered after new fonts have loaded\n     * @abstract\n     */\n  }, {\n    key: \"handleFontsChanged\",\n    value: function handleFontsChanged() {}\n    /**\n     * Handle changes in image state.\n     * @param {import(\"../events/Event.js\").default} event Image change event.\n     * @private\n     */\n  }, {\n    key: \"handleImageChange_\",\n    value: function handleImageChange_(event) {\n      var image = /** @type {import(\"../Image.js\").default} */event.target;\n      if (image.getState() === ImageState.LOADED) {\n        this.renderIfReadyAndVisible();\n      }\n    }\n    /**\n     * Load the image if not already loaded, and register the image change\n     * listener if needed.\n     * @param {import(\"../ImageBase.js\").default} image Image.\n     * @return {boolean} `true` if the image is already loaded, `false` otherwise.\n     * @protected\n     */\n  }, {\n    key: \"loadImage\",\n    value: function loadImage(image) {\n      var imageState = image.getState();\n      if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {\n        image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);\n      }\n      if (imageState == ImageState.IDLE) {\n        image.load();\n        imageState = image.getState();\n      }\n      return imageState == ImageState.LOADED;\n    }\n    /**\n     * @protected\n     */\n  }, {\n    key: \"renderIfReadyAndVisible\",\n    value: function renderIfReadyAndVisible() {\n      var layer = this.getLayer();\n      if (layer && layer.getVisible() && layer.getSourceState() === 'ready') {\n        layer.changed();\n      }\n    }\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      delete this.layer_;\n      _get(_getPrototypeOf(LayerRenderer.prototype), \"disposeInternal\", this).call(this);\n    }\n  }]);\n  return LayerRenderer;\n}(Observable);\nexport default LayerRenderer;","map":null,"metadata":{},"sourceType":"module"}