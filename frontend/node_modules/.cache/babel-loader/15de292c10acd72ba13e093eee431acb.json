{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport { listen, listenOnce, unlistenByKey } from './events.js';\n\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */\n\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */\n\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n\n/***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nvar Observable = /*#__PURE__*/function (_EventTarget) {\n  _inherits(Observable, _EventTarget);\n  function Observable() {\n    var _this;\n    _classCallCheck(this, Observable);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Observable).call(this));\n    _this.on = /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */\n    _this.onInternal;\n    _this.once = /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */\n    _this.onceInternal;\n    _this.un = /** @type {ObservableOnSignature<void>} */_this.unInternal;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.revision_ = 0;\n    return _this;\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  _createClass(Observable, [{\n    key: \"changed\",\n    value: function changed() {\n      ++this.revision_;\n      this.dispatchEvent(EventType.CHANGE);\n    }\n    /**\n     * Get the version number for this object.  Each time the object is modified,\n     * its version number will be incremented.\n     * @return {number} Revision.\n     * @api\n     */\n  }, {\n    key: \"getRevision\",\n    value: function getRevision() {\n      return this.revision_;\n    }\n    /**\n     * @param {string|Array<string>} type Type.\n     * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n     * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n     * @protected\n     */\n  }, {\n    key: \"onInternal\",\n    value: function onInternal(type, listener) {\n      if (Array.isArray(type)) {\n        var len = type.length;\n        var keys = new Array(len);\n        for (var i = 0; i < len; ++i) {\n          keys[i] = listen(this, type[i], listener);\n        }\n        return keys;\n      }\n      return listen(this, /** @type {string} */type, listener);\n    }\n    /**\n     * @param {string|Array<string>} type Type.\n     * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n     * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n     * @protected\n     */\n  }, {\n    key: \"onceInternal\",\n    value: function onceInternal(type, listener) {\n      var key;\n      if (Array.isArray(type)) {\n        var len = type.length;\n        key = new Array(len);\n        for (var i = 0; i < len; ++i) {\n          key[i] = listenOnce(this, type[i], listener);\n        }\n      } else {\n        key = listenOnce(this, /** @type {string} */type, listener);\n      }\n      /** @type {Object} */\n      listener.ol_key = key;\n      return key;\n    }\n    /**\n     * Unlisten for a certain type of event.\n     * @param {string|Array<string>} type Type.\n     * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n     * @protected\n     */\n  }, {\n    key: \"unInternal\",\n    value: function unInternal(type, listener) {\n      var key = /** @type {Object} */listener.ol_key;\n      if (key) {\n        unByKey(key);\n      } else if (Array.isArray(type)) {\n        for (var i = 0, ii = type.length; i < ii; ++i) {\n          this.removeEventListener(type[i], listener);\n        }\n      } else {\n        this.removeEventListener(type, listener);\n      }\n    }\n  }]);\n  return Observable;\n}(EventTarget);\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.on;\n\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.once;\n\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\nObservable.prototype.un;\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (var i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey( /** @type {import(\"./events.js\").EventsKey} */key);\n  }\n}\nexport default Observable;","map":null,"metadata":{},"sourceType":"module"}