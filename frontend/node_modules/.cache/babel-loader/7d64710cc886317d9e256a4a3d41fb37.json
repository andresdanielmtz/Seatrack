{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/interaction/MouseWheelZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, { zoomByDelta } from './Interaction.js';\nimport { DEVICE_PIXEL_RATIO, FIREFOX } from '../has.js';\nimport { all, always, focusWithTabindex } from '../events/condition.js';\nimport { clamp } from '../math.js';\n\n/**\n * @typedef {'trackpad' | 'wheel'} Mode\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.always}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {number} [maxDelta=1] Maximum mouse wheel delta.\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.\n * @property {boolean} [useAnchor=true] Enable zooming using the mouse's\n * location as the anchor. When set to `false`, zooming in and out will zoom to\n * the center of the screen instead of zooming on the mouse's location.\n * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom\n * event will always animate to the closest zoom level after an interaction;\n * false means intermediary zoom levels are allowed.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by scrolling the mouse wheel.\n * @api\n */\nvar MouseWheelZoom = /*#__PURE__*/function (_Interaction) {\n  _inherits(MouseWheelZoom, _Interaction);\n  /**\n   * @param {Options} [options] Options.\n   */\n  function MouseWheelZoom(options) {\n    var _this;\n    _classCallCheck(this, MouseWheelZoom);\n    options = options ? options : {};\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MouseWheelZoom).call(this, /** @type {import(\"./Interaction.js\").InteractionOptions} */options));\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.totalDelta_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.lastDelta_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 250;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.timeout_ = options.timeout !== undefined ? options.timeout : 80;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.useAnchor_ = options.useAnchor !== undefined ? options.useAnchor : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.constrainResolution_ = options.constrainResolution !== undefined ? options.constrainResolution : false;\n    var condition = options.condition ? options.condition : always;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.onFocusOnly ? all(focusWithTabindex, condition) : condition;\n\n    /**\n     * @private\n     * @type {?import(\"../coordinate.js\").Coordinate}\n     */\n    _this.lastAnchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.startTime_ = undefined;\n\n    /**\n     * @private\n     * @type {?}\n     */\n    _this.timeoutId_;\n\n    /**\n     * @private\n     * @type {Mode|undefined}\n     */\n    _this.mode_ = undefined;\n\n    /**\n     * Trackpad events separated by this delay will be considered separate\n     * interactions.\n     * @type {number}\n     */\n    _this.trackpadEventGap_ = 400;\n\n    /**\n     * @type {?}\n     */\n    _this.trackpadTimeoutId_;\n\n    /**\n     * The number of delta values per zoom level\n     * @private\n     * @type {number}\n     */\n    _this.deltaPerZoom_ = 300;\n    return _this;\n  }\n\n  /**\n   * @private\n   */\n  _createClass(MouseWheelZoom, [{\n    key: \"endInteraction_\",\n    value: function endInteraction_() {\n      this.trackpadTimeoutId_ = undefined;\n      var map = this.getMap();\n      if (!map) {\n        return;\n      }\n      var view = map.getView();\n      view.endInteraction(undefined, this.lastDelta_ ? this.lastDelta_ > 0 ? 1 : -1 : 0, this.lastAnchor_);\n    }\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually\n     * zooms the map.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     */\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(mapBrowserEvent) {\n      if (!this.condition_(mapBrowserEvent)) {\n        return true;\n      }\n      var type = mapBrowserEvent.type;\n      if (type !== EventType.WHEEL) {\n        return true;\n      }\n      var map = mapBrowserEvent.map;\n      var wheelEvent = /** @type {WheelEvent} */\n      mapBrowserEvent.originalEvent;\n      wheelEvent.preventDefault();\n      if (this.useAnchor_) {\n        this.lastAnchor_ = mapBrowserEvent.coordinate;\n      }\n\n      // Delta normalisation inspired by\n      // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js\n      var delta;\n      if (mapBrowserEvent.type == EventType.WHEEL) {\n        delta = wheelEvent.deltaY;\n        if (FIREFOX && wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n          delta /= DEVICE_PIXEL_RATIO;\n        }\n        if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n          delta *= 40;\n        }\n      }\n      if (delta === 0) {\n        return false;\n      }\n      this.lastDelta_ = delta;\n      var now = Date.now();\n      if (this.startTime_ === undefined) {\n        this.startTime_ = now;\n      }\n      if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {\n        this.mode_ = Math.abs(delta) < 4 ? 'trackpad' : 'wheel';\n      }\n      var view = map.getView();\n      if (this.mode_ === 'trackpad' && !(view.getConstrainResolution() || this.constrainResolution_)) {\n        if (this.trackpadTimeoutId_) {\n          clearTimeout(this.trackpadTimeoutId_);\n        } else {\n          if (view.getAnimating()) {\n            view.cancelAnimations();\n          }\n          view.beginInteraction();\n        }\n        this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.timeout_);\n        view.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_);\n        this.startTime_ = now;\n        return false;\n      }\n      this.totalDelta_ += delta;\n      var timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);\n      clearTimeout(this.timeoutId_);\n      this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);\n      return false;\n    }\n    /**\n     * @private\n     * @param {import(\"../Map.js\").default} map Map.\n     */\n  }, {\n    key: \"handleWheelZoom_\",\n    value: function handleWheelZoom_(map) {\n      var view = map.getView();\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n      var delta = -clamp(this.totalDelta_, -this.maxDelta_ * this.deltaPerZoom_, this.maxDelta_ * this.deltaPerZoom_) / this.deltaPerZoom_;\n      if (view.getConstrainResolution() || this.constrainResolution_) {\n        // view has a zoom constraint, zoom by 1\n        delta = delta ? delta > 0 ? 1 : -1 : 0;\n      }\n      zoomByDelta(view, delta, this.lastAnchor_, this.duration_);\n      this.mode_ = undefined;\n      this.totalDelta_ = 0;\n      this.lastAnchor_ = null;\n      this.startTime_ = undefined;\n      this.timeoutId_ = undefined;\n    }\n    /**\n     * Enable or disable using the mouse's location as an anchor when zooming\n     * @param {boolean} useAnchor true to zoom to the mouse's location, false\n     * to zoom to the center of the map\n     * @api\n     */\n  }, {\n    key: \"setMouseAnchor\",\n    value: function setMouseAnchor(useAnchor) {\n      this.useAnchor_ = useAnchor;\n      if (!useAnchor) {\n        this.lastAnchor_ = null;\n      }\n    }\n  }]);\n  return MouseWheelZoom;\n}(Interaction);\nexport default MouseWheelZoom;","map":null,"metadata":{},"sourceType":"module"}