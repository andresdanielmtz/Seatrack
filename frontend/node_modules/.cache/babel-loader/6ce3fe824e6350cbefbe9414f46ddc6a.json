{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/interaction/Pointer\n */\nimport Interaction from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nvar PointerInteraction = /*#__PURE__*/function (_Interaction) {\n  _inherits(PointerInteraction, _Interaction);\n  /**\n   * @param {Options} [options] Options.\n   */\n  function PointerInteraction(options) {\n    var _this;\n    _classCallCheck(this, PointerInteraction);\n    options = options ? options : {};\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PointerInteraction).call(this, /** @type {import(\"./Interaction.js\").InteractionOptions} */options));\n    if (options.handleDownEvent) {\n      _this.handleDownEvent = options.handleDownEvent;\n    }\n    if (options.handleDragEvent) {\n      _this.handleDragEvent = options.handleDragEvent;\n    }\n    if (options.handleMoveEvent) {\n      _this.handleMoveEvent = options.handleMoveEvent;\n    }\n    if (options.handleUpEvent) {\n      _this.handleUpEvent = options.handleUpEvent;\n    }\n    if (options.stopDown) {\n      _this.stopDown = options.stopDown;\n    }\n\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    _this.handlingDownUpSequence = false;\n\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n    _this.targetPointers = [];\n    return _this;\n  }\n\n  /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */\n  _createClass(PointerInteraction, [{\n    key: \"getPointerCount\",\n    value: function getPointerCount() {\n      return this.targetPointers.length;\n    }\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     * @protected\n     */\n  }, {\n    key: \"handleDownEvent\",\n    value: function handleDownEvent(mapBrowserEvent) {\n      return false;\n    }\n    /**\n     * Handle pointer drag events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @protected\n     */\n  }, {\n    key: \"handleDragEvent\",\n    value: function handleDragEvent(mapBrowserEvent) {}\n    /**\n     * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\n     * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n     * detected.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n     * @return {boolean} `false` to stop event propagation.\n     * @api\n     */\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(mapBrowserEvent) {\n      if (!mapBrowserEvent.originalEvent) {\n        return true;\n      }\n      var stopEvent = false;\n      this.updateTrackedPointers_(mapBrowserEvent);\n      if (this.handlingDownUpSequence) {\n        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n          this.handleDragEvent(mapBrowserEvent);\n          // prevent page scrolling during dragging\n          mapBrowserEvent.originalEvent.preventDefault();\n        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n          var handledUp = this.handleUpEvent(mapBrowserEvent);\n          this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n        }\n      } else {\n        if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n          var handled = this.handleDownEvent(mapBrowserEvent);\n          this.handlingDownUpSequence = handled;\n          stopEvent = this.stopDown(handled);\n        } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n          this.handleMoveEvent(mapBrowserEvent);\n        }\n      }\n      return !stopEvent;\n    }\n    /**\n     * Handle pointer move events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @protected\n     */\n  }, {\n    key: \"handleMoveEvent\",\n    value: function handleMoveEvent(mapBrowserEvent) {}\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     * @protected\n     */\n  }, {\n    key: \"handleUpEvent\",\n    value: function handleUpEvent(mapBrowserEvent) {\n      return false;\n    }\n    /**\n     * This function is used to determine if \"down\" events should be propagated\n     * to other interactions or should be stopped.\n     * @param {boolean} handled Was the event handled by the interaction?\n     * @return {boolean} Should the `down` event be stopped?\n     */\n  }, {\n    key: \"stopDown\",\n    value: function stopDown(handled) {\n      return handled;\n    }\n    /**\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @private\n     */\n  }, {\n    key: \"updateTrackedPointers_\",\n    value: function updateTrackedPointers_(mapBrowserEvent) {\n      if (mapBrowserEvent.activePointers) {\n        this.targetPointers = mapBrowserEvent.activePointers;\n      }\n    }\n  }]);\n  return PointerInteraction;\n}(Interaction);\n/**\n * @param {Array<PointerEvent>} pointerEvents List of events.\n * @return {{clientX: number, clientY: number}} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  var length = pointerEvents.length;\n  var clientX = 0;\n  var clientY = 0;\n  for (var i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return {\n    clientX: clientX / length,\n    clientY: clientY / length\n  };\n}\nexport default PointerInteraction;","map":null,"metadata":{},"sourceType":"module"}