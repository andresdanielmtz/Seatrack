{"ast":null,"code":"import _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport { getUid } from './util.js';\nimport { isEmpty } from './obj.js';\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport var ObjectEvent = /*#__PURE__*/function (_Event) {\n  _inherits(ObjectEvent, _Event);\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  function ObjectEvent(type, key, oldValue) {\n    var _this;\n    _classCallCheck(this, ObjectEvent);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ObjectEvent).call(this, type));\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    _this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    _this.oldValue = oldValue;\n    return _this;\n  }\n  return ObjectEvent;\n}(Event);\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nvar BaseObject = /*#__PURE__*/function (_Observable) {\n  _inherits(BaseObject, _Observable);\n  /**\n   * @param {Object<string, *>} [values] An object with key-value pairs.\n   */\n  function BaseObject(values) {\n    var _this2;\n    _classCallCheck(this, BaseObject);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(BaseObject).call(this));\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this2.on;\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this2.once;\n\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n    _this2.un;\n\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(_assertThisInitialized(_assertThisInitialized(_this2)));\n\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n    _this2.values_ = null;\n    if (values !== undefined) {\n      _this2.setProperties(values);\n    }\n    return _this2;\n  }\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  _createClass(BaseObject, [{\n    key: \"get\",\n    value: function get(key) {\n      var value;\n      if (this.values_ && this.values_.hasOwnProperty(key)) {\n        value = this.values_[key];\n      }\n      return value;\n    }\n    /**\n     * Get a list of object property names.\n     * @return {Array<string>} List of property names.\n     * @api\n     */\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.values_ && Object.keys(this.values_) || [];\n    }\n    /**\n     * Get an object of all property names and values.\n     * @return {Object<string, *>} Object.\n     * @api\n     */\n  }, {\n    key: \"getProperties\",\n    value: function getProperties() {\n      return this.values_ && Object.assign({}, this.values_) || {};\n    }\n    /**\n     * @return {boolean} The object has properties.\n     */\n  }, {\n    key: \"hasProperties\",\n    value: function hasProperties() {\n      return !!this.values_;\n    }\n    /**\n     * @param {string} key Key name.\n     * @param {*} oldValue Old value.\n     */\n  }, {\n    key: \"notify\",\n    value: function notify(key, oldValue) {\n      var eventType;\n      eventType = \"change:\".concat(key);\n      if (this.hasListener(eventType)) {\n        this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n      }\n      eventType = ObjectEventType.PROPERTYCHANGE;\n      if (this.hasListener(eventType)) {\n        this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n      }\n    }\n    /**\n     * @param {string} key Key name.\n     * @param {import(\"./events.js\").Listener} listener Listener.\n     */\n  }, {\n    key: \"addChangeListener\",\n    value: function addChangeListener(key, listener) {\n      this.addEventListener(\"change:\".concat(key), listener);\n    }\n    /**\n     * @param {string} key Key name.\n     * @param {import(\"./events.js\").Listener} listener Listener.\n     */\n  }, {\n    key: \"removeChangeListener\",\n    value: function removeChangeListener(key, listener) {\n      this.removeEventListener(\"change:\".concat(key), listener);\n    }\n    /**\n     * Sets a value.\n     * @param {string} key Key name.\n     * @param {*} value Value.\n     * @param {boolean} [silent] Update without triggering an event.\n     * @api\n     */\n  }, {\n    key: \"set\",\n    value: function set(key, value, silent) {\n      var values = this.values_ || (this.values_ = {});\n      if (silent) {\n        values[key] = value;\n      } else {\n        var oldValue = values[key];\n        values[key] = value;\n        if (oldValue !== value) {\n          this.notify(key, oldValue);\n        }\n      }\n    }\n    /**\n     * Sets a collection of key-value pairs.  Note that this changes any existing\n     * properties and adds new ones (it does not remove any existing properties).\n     * @param {Object<string, *>} values Values.\n     * @param {boolean} [silent] Update without triggering an event.\n     * @api\n     */\n  }, {\n    key: \"setProperties\",\n    value: function setProperties(values, silent) {\n      for (var key in values) {\n        this.set(key, values[key], silent);\n      }\n    }\n    /**\n     * Apply any properties from another object without triggering events.\n     * @param {BaseObject} source The source object.\n     * @protected\n     */\n  }, {\n    key: \"applyProperties\",\n    value: function applyProperties(source) {\n      if (!source.values_) {\n        return;\n      }\n      Object.assign(this.values_ || (this.values_ = {}), source.values_);\n    }\n    /**\n     * Unsets a property.\n     * @param {string} key Key name.\n     * @param {boolean} [silent] Unset without triggering an event.\n     * @api\n     */\n  }, {\n    key: \"unset\",\n    value: function unset(key, silent) {\n      if (this.values_ && key in this.values_) {\n        var oldValue = this.values_[key];\n        delete this.values_[key];\n        if (isEmpty(this.values_)) {\n          this.values_ = null;\n        }\n        if (!silent) {\n          this.notify(key, oldValue);\n        }\n      }\n    }\n  }]);\n  return BaseObject;\n}(Observable);\nexport default BaseObject;","map":null,"metadata":{},"sourceType":"module"}