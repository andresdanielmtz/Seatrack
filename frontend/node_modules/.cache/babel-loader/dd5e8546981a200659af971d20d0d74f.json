{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n * @module ol/TileRange\n */\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nvar TileRange = /*#__PURE__*/function () {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  function TileRange(minX, maxX, minY, maxY) {\n    _classCallCheck(this, TileRange);\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  _createClass(TileRange, [{\n    key: \"contains\",\n    value: function contains(tileCoord) {\n      return this.containsXY(tileCoord[1], tileCoord[2]);\n    }\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Contains.\n     */\n  }, {\n    key: \"containsTileRange\",\n    value: function containsTileRange(tileRange) {\n      return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n    }\n    /**\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @return {boolean} Contains coordinate.\n     */\n  }, {\n    key: \"containsXY\",\n    value: function containsXY(x, y) {\n      return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    }\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Equals.\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(tileRange) {\n      return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n    }\n    /**\n     * @param {TileRange} tileRange Tile range.\n     */\n  }, {\n    key: \"extend\",\n    value: function extend(tileRange) {\n      if (tileRange.minX < this.minX) {\n        this.minX = tileRange.minX;\n      }\n      if (tileRange.maxX > this.maxX) {\n        this.maxX = tileRange.maxX;\n      }\n      if (tileRange.minY < this.minY) {\n        this.minY = tileRange.minY;\n      }\n      if (tileRange.maxY > this.maxY) {\n        this.maxY = tileRange.maxY;\n      }\n    }\n    /**\n     * @return {number} Height.\n     */\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.maxY - this.minY + 1;\n    }\n    /**\n     * @return {import(\"./size.js\").Size} Size.\n     */\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return [this.getWidth(), this.getHeight()];\n    }\n    /**\n     * @return {number} Width.\n     */\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.maxX - this.minX + 1;\n    }\n    /**\n     * @param {TileRange} tileRange Tile range.\n     * @return {boolean} Intersects.\n     */\n  }, {\n    key: \"intersects\",\n    value: function intersects(tileRange) {\n      return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;\n    }\n  }]);\n  return TileRange;\n}();\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  }\n  return new TileRange(minX, maxX, minY, maxY);\n}\nexport default TileRange;","map":null,"metadata":{},"sourceType":"module"}