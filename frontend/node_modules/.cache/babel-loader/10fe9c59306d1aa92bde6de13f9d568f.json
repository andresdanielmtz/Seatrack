{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n * @module ol/Kinetic\n */\n/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @api\n */\nvar Kinetic = /*#__PURE__*/function () {\n  /**\n   * @param {number} decay Rate of decay (must be negative).\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n   * @param {number} delay Delay to consider to calculate the kinetic\n   *     initial values (milliseconds).\n   */\n  function Kinetic(decay, minVelocity, delay) {\n    _classCallCheck(this, Kinetic);\n    /**\n     * @private\n     * @type {number}\n     */\n    this.decay_ = decay;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minVelocity_ = minVelocity;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delay_ = delay;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.points_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.initialVelocity_ = 0;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  _createClass(Kinetic, [{\n    key: \"begin\",\n    value: function begin() {\n      this.points_.length = 0;\n      this.angle_ = 0;\n      this.initialVelocity_ = 0;\n    }\n    /**\n     * @param {number} x X.\n     * @param {number} y Y.\n     */\n  }, {\n    key: \"update\",\n    value: function update(x, y) {\n      this.points_.push(x, y, Date.now());\n    }\n    /**\n     * @return {boolean} Whether we should do kinetic animation.\n     */\n  }, {\n    key: \"end\",\n    value: function end() {\n      if (this.points_.length < 6) {\n        // at least 2 points are required (i.e. there must be at least 6 elements\n        // in the array)\n        return false;\n      }\n      var delay = Date.now() - this.delay_;\n      var lastIndex = this.points_.length - 3;\n      if (this.points_[lastIndex + 2] < delay) {\n        // the last tracked point is too old, which means that the user stopped\n        // panning before releasing the map\n        return false;\n      }\n\n      // get the first point which still falls into the delay time\n      var firstIndex = lastIndex - 3;\n      while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n        firstIndex -= 3;\n      }\n      var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];\n      // we don't want a duration of 0 (divide by zero)\n      // we also make sure the user panned for a duration of at least one frame\n      // (1/60s) to compute sane displacement values\n      if (duration < 1000 / 60) {\n        return false;\n      }\n      var dx = this.points_[lastIndex] - this.points_[firstIndex];\n      var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n      this.angle_ = Math.atan2(dy, dx);\n      this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n      return this.initialVelocity_ > this.minVelocity_;\n    }\n    /**\n     * @return {number} Total distance travelled (pixels).\n     */\n  }, {\n    key: \"getDistance\",\n    value: function getDistance() {\n      return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n    }\n    /**\n     * @return {number} Angle of the kinetic panning animation (radians).\n     */\n  }, {\n    key: \"getAngle\",\n    value: function getAngle() {\n      return this.angle_;\n    }\n  }]);\n  return Kinetic;\n}();\nexport default Kinetic;","map":null,"metadata":{},"sourceType":"module"}