{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/style/Circle\n */\n\nimport RegularShape from './RegularShape.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {Array<number>} [displacement=[0,0]] displacement\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\n * @property {number} [rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\n * (meaningful only when used in conjunction with a two dimensional scale).\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\n */\n\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\nvar CircleStyle = /*#__PURE__*/function (_RegularShape) {\n  _inherits(CircleStyle, _RegularShape);\n  /**\n   * @param {Options} [options] Options.\n   */\n  function CircleStyle(options) {\n    _classCallCheck(this, CircleStyle);\n    options = options ? options : {\n      radius: 5\n    };\n    return _possibleConstructorReturn(this, _getPrototypeOf(CircleStyle).call(this, {\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke,\n      scale: options.scale !== undefined ? options.scale : 1,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      rotateWithView: options.rotateWithView !== undefined ? options.rotateWithView : false,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode\n    }));\n  }\n\n  /**\n   * Clones the style.\n   * @return {CircleStyle} The cloned style.\n   * @api\n   */\n  _createClass(CircleStyle, [{\n    key: \"clone\",\n    value: function clone() {\n      var scale = this.getScale();\n      var style = new CircleStyle({\n        fill: this.getFill() ? this.getFill().clone() : undefined,\n        stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n        radius: this.getRadius(),\n        scale: Array.isArray(scale) ? scale.slice() : scale,\n        rotation: this.getRotation(),\n        rotateWithView: this.getRotateWithView(),\n        displacement: this.getDisplacement().slice(),\n        declutterMode: this.getDeclutterMode()\n      });\n      style.setOpacity(this.getOpacity());\n      return style;\n    }\n    /**\n     * Set the circle radius.\n     *\n     * @param {number} radius Circle radius.\n     * @api\n     */\n  }, {\n    key: \"setRadius\",\n    value: function setRadius(radius) {\n      this.radius_ = radius;\n      this.render();\n    }\n  }]);\n  return CircleStyle;\n}(RegularShape);\nexport default CircleStyle;","map":null,"metadata":{},"sourceType":"module"}