{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n * @module ol/style/Image\n */\nimport { abstract } from '../util.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} opacity Opacity.\n * @property {boolean} rotateWithView If the image should get rotated with the view.\n * @property {number} rotation Rotation.\n * @property {number|import(\"../size.js\").Size} scale Scale.\n * @property {Array<number>} displacement Displacement.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} declutterMode Declutter mode: `declutter`, `obstacle`, 'none */\n\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */\nvar ImageStyle = /*#__PURE__*/function () {\n  /**\n   * @param {Options} options Options.\n   */\n  function ImageStyle(options) {\n    _classCallCheck(this, ImageStyle);\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = options.opacity;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.displacement_ = options.displacement;\n\n    /**\n     * @private\n     * @type {\"declutter\"|\"obstacle\"|\"none\"|undefined}\n     */\n    this.declutterMode_ = options.declutterMode;\n  }\n\n  /**\n   * Clones the style.\n   * @return {ImageStyle} The cloned style.\n   * @api\n   */\n  _createClass(ImageStyle, [{\n    key: \"clone\",\n    value: function clone() {\n      var scale = this.getScale();\n      return new ImageStyle({\n        opacity: this.getOpacity(),\n        scale: Array.isArray(scale) ? scale.slice() : scale,\n        rotation: this.getRotation(),\n        rotateWithView: this.getRotateWithView(),\n        displacement: this.getDisplacement().slice(),\n        declutterMode: this.getDeclutterMode()\n      });\n    }\n    /**\n     * Get the symbolizer opacity.\n     * @return {number} Opacity.\n     * @api\n     */\n  }, {\n    key: \"getOpacity\",\n    value: function getOpacity() {\n      return this.opacity_;\n    }\n    /**\n     * Determine whether the symbolizer rotates with the map.\n     * @return {boolean} Rotate with map.\n     * @api\n     */\n  }, {\n    key: \"getRotateWithView\",\n    value: function getRotateWithView() {\n      return this.rotateWithView_;\n    }\n    /**\n     * Get the symoblizer rotation.\n     * @return {number} Rotation.\n     * @api\n     */\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return this.rotation_;\n    }\n    /**\n     * Get the symbolizer scale.\n     * @return {number|import(\"../size.js\").Size} Scale.\n     * @api\n     */\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      return this.scale_;\n    }\n    /**\n     * Get the symbolizer scale array.\n     * @return {import(\"../size.js\").Size} Scale array.\n     */\n  }, {\n    key: \"getScaleArray\",\n    value: function getScaleArray() {\n      return this.scaleArray_;\n    }\n    /**\n     * Get the displacement of the shape\n     * @return {Array<number>} Shape's center displacement\n     * @api\n     */\n  }, {\n    key: \"getDisplacement\",\n    value: function getDisplacement() {\n      return this.displacement_;\n    }\n    /**\n     * Get the declutter mode of the shape\n     * @return {\"declutter\"|\"obstacle\"|\"none\"|undefined} Shape's declutter mode\n     * @api\n     */\n  }, {\n    key: \"getDeclutterMode\",\n    value: function getDeclutterMode() {\n      return this.declutterMode_;\n    }\n    /**\n     * Get the anchor point in pixels. The anchor determines the center point for the\n     * symbolizer.\n     * @abstract\n     * @return {Array<number>} Anchor.\n     */\n  }, {\n    key: \"getAnchor\",\n    value: function getAnchor() {\n      return abstract();\n    }\n    /**\n     * Get the image element for the symbolizer.\n     * @abstract\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage(pixelRatio) {\n      return abstract();\n    }\n    /**\n     * @abstract\n     * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n     */\n  }, {\n    key: \"getHitDetectionImage\",\n    value: function getHitDetectionImage() {\n      return abstract();\n    }\n    /**\n     * Get the image pixel ratio.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Pixel ratio.\n     */\n  }, {\n    key: \"getPixelRatio\",\n    value: function getPixelRatio(pixelRatio) {\n      return 1;\n    }\n    /**\n     * @abstract\n     * @return {import(\"../ImageState.js\").default} Image state.\n     */\n  }, {\n    key: \"getImageState\",\n    value: function getImageState() {\n      return abstract();\n    }\n    /**\n     * @abstract\n     * @return {import(\"../size.js\").Size} Image size.\n     */\n  }, {\n    key: \"getImageSize\",\n    value: function getImageSize() {\n      return abstract();\n    }\n    /**\n     * Get the origin of the symbolizer.\n     * @abstract\n     * @return {Array<number>} Origin.\n     */\n  }, {\n    key: \"getOrigin\",\n    value: function getOrigin() {\n      return abstract();\n    }\n    /**\n     * Get the size of the symbolizer (in pixels).\n     * @abstract\n     * @return {import(\"../size.js\").Size} Size.\n     */\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return abstract();\n    }\n    /**\n     * Set the displacement.\n     *\n     * @param {Array<number>} displacement Displacement.\n     * @api\n     */\n  }, {\n    key: \"setDisplacement\",\n    value: function setDisplacement(displacement) {\n      this.displacement_ = displacement;\n    }\n    /**\n     * Set the opacity.\n     *\n     * @param {number} opacity Opacity.\n     * @api\n     */\n  }, {\n    key: \"setOpacity\",\n    value: function setOpacity(opacity) {\n      this.opacity_ = opacity;\n    }\n    /**\n     * Set whether to rotate the style with the view.\n     *\n     * @param {boolean} rotateWithView Rotate with map.\n     * @api\n     */\n  }, {\n    key: \"setRotateWithView\",\n    value: function setRotateWithView(rotateWithView) {\n      this.rotateWithView_ = rotateWithView;\n    }\n    /**\n     * Set the rotation.\n     *\n     * @param {number} rotation Rotation.\n     * @api\n     */\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      this.rotation_ = rotation;\n    }\n    /**\n     * Set the scale.\n     *\n     * @param {number|import(\"../size.js\").Size} scale Scale.\n     * @api\n     */\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      this.scale_ = scale;\n      this.scaleArray_ = toSize(scale);\n    }\n    /**\n     * @abstract\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n  }, {\n    key: \"listenImageChange\",\n    value: function listenImageChange(listener) {\n      abstract();\n    }\n    /**\n     * Load not yet loaded URI.\n     * @abstract\n     */\n  }, {\n    key: \"load\",\n    value: function load() {\n      abstract();\n    }\n    /**\n     * @abstract\n     * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n     */\n  }, {\n    key: \"unlistenImageChange\",\n    value: function unlistenImageChange(listener) {\n      abstract();\n    }\n  }]);\n  return ImageStyle;\n}();\nexport default ImageStyle;","map":null,"metadata":{},"sourceType":"module"}