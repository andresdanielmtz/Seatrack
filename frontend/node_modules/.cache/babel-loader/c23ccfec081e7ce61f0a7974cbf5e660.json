{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, { createOrUpdate as createOrUpdateTileRange } from '../TileRange.js';\nimport { DEFAULT_TILE_SIZE } from './common.js';\nimport { assert } from '../asserts.js';\nimport { ceil, clamp, floor } from '../math.js';\nimport { createOrUpdate, getTopLeft } from '../extent.js';\nimport { createOrUpdate as createOrUpdateTileCoord } from '../tilecoord.js';\nimport { intersectsLinearRing } from '../geom/flat/intersectsextent.js';\nimport { isSorted, linearFindNearest } from '../array.js';\nimport { toSize } from '../size.js';\n\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nvar tmpTileCoord = [0, 0, 0];\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nvar DECIMALS = 5;\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nvar TileGrid = /*#__PURE__*/function () {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  function TileGrid(options) {\n    _classCallCheck(this, TileGrid);\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n    this.resolutions_ = options.resolutions;\n    assert(isSorted(this.resolutions_, function (a, b) {\n      return b - a;\n    }, true), 17); // `resolutions` must be sorted in descending order\n\n    // check if we've got a consistent zoom factor and origin\n    var zoomFactor;\n    if (!options.origins) {\n      for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zoomFactor_ = zoomFactor;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n    }\n\n    var extent = options.extent;\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n    assert(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 18); // Either `origin` or `origins` must be configured, never both\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n    }\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;\n    assert(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 22); // Either `tileSize` or `tileSizes` must be configured, never both\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n    this.fullTileRanges_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = [0, 0, 0, 0];\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\n        var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n        if (extent) {\n          var restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n        return tileRange;\n      }, this);\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n  _createClass(TileGrid, [{\n    key: \"forEachTileCoord\",\n    value: function forEachTileCoord(extent, zoom, callback) {\n      var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n      for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n        for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n          callback([zoom, i, j]);\n        }\n      }\n    }\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n     * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n     * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n     * @return {boolean} Callback succeeded.\n     */\n  }, {\n    key: \"forEachTileCoordParentTileRange\",\n    value: function forEachTileCoordParentTileRange(tileCoord, callback, tempTileRange, tempExtent) {\n      var tileRange, x, y;\n      var tileCoordExtent = null;\n      var z = tileCoord[0] - 1;\n      if (this.zoomFactor_ === 2) {\n        x = tileCoord[1];\n        y = tileCoord[2];\n      } else {\n        tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\n      }\n      while (z >= this.minZoom) {\n        if (this.zoomFactor_ === 2) {\n          x = Math.floor(x / 2);\n          y = Math.floor(y / 2);\n          tileRange = createOrUpdateTileRange(x, x, y, y, tempTileRange);\n        } else {\n          tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n        }\n        if (callback(z, tileRange)) {\n          return true;\n        }\n        --z;\n      }\n      return false;\n    }\n    /**\n     * Get the extent for this tile grid, if it was configured.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n  }, {\n    key: \"getExtent\",\n    value: function getExtent() {\n      return this.extent_;\n    }\n    /**\n     * Get the maximum zoom level for the grid.\n     * @return {number} Max zoom.\n     * @api\n     */\n  }, {\n    key: \"getMaxZoom\",\n    value: function getMaxZoom() {\n      return this.maxZoom;\n    }\n    /**\n     * Get the minimum zoom level for the grid.\n     * @return {number} Min zoom.\n     * @api\n     */\n  }, {\n    key: \"getMinZoom\",\n    value: function getMinZoom() {\n      return this.minZoom;\n    }\n    /**\n     * Get the origin for the grid at the given zoom level.\n     * @param {number} z Integer zoom level.\n     * @return {import(\"../coordinate.js\").Coordinate} Origin.\n     * @api\n     */\n  }, {\n    key: \"getOrigin\",\n    value: function getOrigin(z) {\n      if (this.origin_) {\n        return this.origin_;\n      }\n      return this.origins_[z];\n    }\n    /**\n     * Get the resolution for the given zoom level.\n     * @param {number} z Integer zoom level.\n     * @return {number} Resolution.\n     * @api\n     */\n  }, {\n    key: \"getResolution\",\n    value: function getResolution(z) {\n      return this.resolutions_[z];\n    }\n    /**\n     * Get the list of resolutions for the tile grid.\n     * @return {Array<number>} Resolutions.\n     * @api\n     */\n  }, {\n    key: \"getResolutions\",\n    value: function getResolutions() {\n      return this.resolutions_;\n    }\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n     * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n     * @return {import(\"../TileRange.js\").default|null} Tile range.\n     */\n  }, {\n    key: \"getTileCoordChildTileRange\",\n    value: function getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\n      if (tileCoord[0] < this.maxZoom) {\n        if (this.zoomFactor_ === 2) {\n          var minX = tileCoord[1] * 2;\n          var minY = tileCoord[2] * 2;\n          return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, tempTileRange);\n        }\n        var tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent || this.tmpExtent_);\n        return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, tempTileRange);\n      }\n      return null;\n    }\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {number} z Integer zoom level.\n     * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n     * @return {import(\"../TileRange.js\").default|null} Tile range.\n     */\n  }, {\n    key: \"getTileRangeForTileCoordAndZ\",\n    value: function getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\n      if (z > this.maxZoom || z < this.minZoom) {\n        return null;\n      }\n      var tileCoordZ = tileCoord[0];\n      var tileCoordX = tileCoord[1];\n      var tileCoordY = tileCoord[2];\n      if (z === tileCoordZ) {\n        return createOrUpdateTileRange(tileCoordX, tileCoordY, tileCoordX, tileCoordY, tempTileRange);\n      }\n      if (this.zoomFactor_) {\n        var factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n        var minX = Math.floor(tileCoordX * factor);\n        var minY = Math.floor(tileCoordY * factor);\n        if (z < tileCoordZ) {\n          return createOrUpdateTileRange(minX, minX, minY, minY, tempTileRange);\n        }\n        var maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n        var maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n        return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n      }\n      var tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n      return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n    }\n    /**\n     * Get the extent for a tile range.\n     * @param {number} z Integer zoom level.\n     * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n     * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     */\n  }, {\n    key: \"getTileRangeExtent\",\n    value: function getTileRangeExtent(z, tileRange, tempExtent) {\n      var origin = this.getOrigin(z);\n      var resolution = this.getResolution(z);\n      var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n      var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n      var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n      var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n      var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n      return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\n    }\n    /**\n     * Get a tile range for the given extent and integer zoom level.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} z Integer zoom level.\n     * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\n     * @return {import(\"../TileRange.js\").default} Tile range.\n     */\n  }, {\n    key: \"getTileRangeForExtentAndZ\",\n    value: function getTileRangeForExtentAndZ(extent, z, tempTileRange) {\n      this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);\n      var minX = tmpTileCoord[1];\n      var minY = tmpTileCoord[2];\n      this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);\n      var maxX = tmpTileCoord[1];\n      var maxY = tmpTileCoord[2];\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n    }\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n     */\n  }, {\n    key: \"getTileCoordCenter\",\n    value: function getTileCoordCenter(tileCoord) {\n      var origin = this.getOrigin(tileCoord[0]);\n      var resolution = this.getResolution(tileCoord[0]);\n      var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n      return [origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution, origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution];\n    }\n    /**\n     * Get the extent of a tile coordinate.\n     *\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n  }, {\n    key: \"getTileCoordExtent\",\n    value: function getTileCoordExtent(tileCoord, tempExtent) {\n      var origin = this.getOrigin(tileCoord[0]);\n      var resolution = this.getResolution(tileCoord[0]);\n      var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n      var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n      var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n      var maxX = minX + tileSize[0] * resolution;\n      var maxY = minY + tileSize[1] * resolution;\n      return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\n    }\n    /**\n     * Get the tile coordinate for the given map coordinate and resolution.  This\n     * method considers that coordinates that intersect tile boundaries should be\n     * assigned the higher tile coordinate.\n     *\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {number} resolution Resolution.\n     * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n     * @api\n     */\n  }, {\n    key: \"getTileCoordForCoordAndResolution\",\n    value: function getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n      return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n    }\n    /**\n     * Note that this method should not be called for resolutions that correspond\n     * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n     * @param {number} x X.\n     * @param {number} y Y.\n     * @param {number} resolution Resolution (for a non-integer zoom level).\n     * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n     *     intersections go to the higher tile coordinate, let edge intersections\n     *     go to the lower tile coordinate.\n     * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n     * @private\n     */\n  }, {\n    key: \"getTileCoordForXYAndResolution_\",\n    value: function getTileCoordForXYAndResolution_(x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n      var z = this.getZForResolution(resolution);\n      var scale = resolution / this.getResolution(z);\n      var origin = this.getOrigin(z);\n      var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n      var tileCoordX = scale * (x - origin[0]) / resolution / tileSize[0];\n      var tileCoordY = scale * (origin[1] - y) / resolution / tileSize[1];\n      if (reverseIntersectionPolicy) {\n        tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n        tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n      } else {\n        tileCoordX = floor(tileCoordX, DECIMALS);\n        tileCoordY = floor(tileCoordY, DECIMALS);\n      }\n      return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n    }\n    /**\n     * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n     * they should have separate implementations.  This method is for integer zoom\n     * levels.  The other method should only be called for resolutions corresponding\n     * to non-integer zoom levels.\n     * @param {number} x Map x coordinate.\n     * @param {number} y Map y coordinate.\n     * @param {number} z Integer zoom level.\n     * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n     *     intersections go to the higher tile coordinate, let edge intersections\n     *     go to the lower tile coordinate.\n     * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n     * @private\n     */\n  }, {\n    key: \"getTileCoordForXYAndZ_\",\n    value: function getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n      var origin = this.getOrigin(z);\n      var resolution = this.getResolution(z);\n      var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n      var tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n      var tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n      if (reverseIntersectionPolicy) {\n        tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n        tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n      } else {\n        tileCoordX = floor(tileCoordX, DECIMALS);\n        tileCoordY = floor(tileCoordY, DECIMALS);\n      }\n      return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n    }\n    /**\n     * Get a tile coordinate given a map coordinate and zoom level.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {number} z Zoom level.\n     * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n     * @api\n     */\n  }, {\n    key: \"getTileCoordForCoordAndZ\",\n    value: function getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n      return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n    }\n    /**\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @return {number} Tile resolution.\n     */\n  }, {\n    key: \"getTileCoordResolution\",\n    value: function getTileCoordResolution(tileCoord) {\n      return this.resolutions_[tileCoord[0]];\n    }\n    /**\n     * Get the tile size for a zoom level. The type of the return value matches the\n     * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n     * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\n     * @param {number} z Z.\n     * @return {number|import(\"../size.js\").Size} Tile size.\n     * @api\n     */\n  }, {\n    key: \"getTileSize\",\n    value: function getTileSize(z) {\n      if (this.tileSize_) {\n        return this.tileSize_;\n      }\n      return this.tileSizes_[z];\n    }\n    /**\n     * @param {number} z Zoom level.\n     * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n     */\n  }, {\n    key: \"getFullTileRange\",\n    value: function getFullTileRange(z) {\n      if (!this.fullTileRanges_) {\n        return this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, z) : null;\n      }\n      return this.fullTileRanges_[z];\n    }\n    /**\n     * @param {number} resolution Resolution.\n     * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n     *     If 0, the nearest resolution will be used.\n     *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n     *     nearest lower resolution (higher Z) will be used. Default is 0.\n     *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n     *\n     * For example to change tile Z at the midpoint of zoom levels\n     * ```js\n     * function(value, high, low) {\n     *   return value - low * Math.sqrt(high / low);\n     * }\n     * ```\n     * @return {number} Z.\n     * @api\n     */\n  }, {\n    key: \"getZForResolution\",\n    value: function getZForResolution(resolution, opt_direction) {\n      var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\n      return clamp(z, this.minZoom, this.maxZoom);\n    }\n    /**\n     * The tile with the provided tile coordinate intersects the given viewport.\n     * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\n     * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\n     * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\n     */\n  }, {\n    key: \"tileCoordIntersectsViewport\",\n    value: function tileCoordIntersectsViewport(tileCoord, viewport) {\n      return intersectsLinearRing(viewport, 0, viewport.length, 2, this.getTileCoordExtent(tileCoord));\n    }\n    /**\n     * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n     * @private\n     */\n  }, {\n    key: \"calculateTileRanges_\",\n    value: function calculateTileRanges_(extent) {\n      var length = this.resolutions_.length;\n      var fullTileRanges = new Array(length);\n      for (var z = this.minZoom; z < length; ++z) {\n        fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n      }\n      this.fullTileRanges_ = fullTileRanges;\n    }\n  }]);\n  return TileGrid;\n}();\nexport default TileGrid;","map":null,"metadata":{},"sourceType":"module"}