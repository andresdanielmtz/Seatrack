{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport { toSize } from '../size.js';\n\n/**\n * @typedef {'point' | 'line'} TextPlacement\n * Default text placement is `'point'`. Note that\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\n */\n\n/**\n * @typedef {'left' | 'center' | 'right'} TextJustify\n */\n\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nvar DEFAULT_FILL_COLOR = '#333';\n\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS `font` value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {TextPlacement} [placement='point'] Text placement.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for the immediate rendering API.\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {TextJustify} [justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\n * `'hanging'`, `'ideographic'`.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nvar Text = /*#__PURE__*/function () {\n  /**\n   * @param {Options} [options] Options.\n   */\n  function Text(options) {\n    _classCallCheck(this, Text);\n    options = options || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.font_ = options.font;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n\n    /**\n     * @private\n     * @type {string|Array<string>|undefined}\n     */\n    this.text_ = options.text;\n\n    /**\n     * @private\n     * @type {CanvasTextAlign|undefined}\n     */\n    this.textAlign_ = options.textAlign;\n\n    /**\n     * @private\n     * @type {TextJustify|undefined}\n     */\n    this.justify_ = options.justify;\n\n    /**\n     * @private\n     * @type {CanvasTextBaseline|undefined}\n     */\n    this.textBaseline_ = options.textBaseline;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : new Fill({\n      color: DEFAULT_FILL_COLOR\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n\n    /**\n     * @private\n     * @type {TextPlacement}\n     */\n    this.placement_ = options.placement !== undefined ? options.placement : 'point';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overflow_ = !!options.overflow;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.padding_ = options.padding === undefined ? null : options.padding;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */\n  _createClass(Text, [{\n    key: \"clone\",\n    value: function clone() {\n      var scale = this.getScale();\n      return new Text({\n        font: this.getFont(),\n        placement: this.getPlacement(),\n        maxAngle: this.getMaxAngle(),\n        overflow: this.getOverflow(),\n        rotation: this.getRotation(),\n        rotateWithView: this.getRotateWithView(),\n        scale: Array.isArray(scale) ? scale.slice() : scale,\n        text: this.getText(),\n        textAlign: this.getTextAlign(),\n        justify: this.getJustify(),\n        textBaseline: this.getTextBaseline(),\n        fill: this.getFill() ? this.getFill().clone() : undefined,\n        stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n        offsetX: this.getOffsetX(),\n        offsetY: this.getOffsetY(),\n        backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n        backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,\n        padding: this.getPadding() || undefined\n      });\n    }\n    /**\n     * Get the `overflow` configuration.\n     * @return {boolean} Let text overflow the length of the path they follow.\n     * @api\n     */\n  }, {\n    key: \"getOverflow\",\n    value: function getOverflow() {\n      return this.overflow_;\n    }\n    /**\n     * Get the font name.\n     * @return {string|undefined} Font.\n     * @api\n     */\n  }, {\n    key: \"getFont\",\n    value: function getFont() {\n      return this.font_;\n    }\n    /**\n     * Get the maximum angle between adjacent characters.\n     * @return {number} Angle in radians.\n     * @api\n     */\n  }, {\n    key: \"getMaxAngle\",\n    value: function getMaxAngle() {\n      return this.maxAngle_;\n    }\n    /**\n     * Get the label placement.\n     * @return {TextPlacement} Text placement.\n     * @api\n     */\n  }, {\n    key: \"getPlacement\",\n    value: function getPlacement() {\n      return this.placement_;\n    }\n    /**\n     * Get the x-offset for the text.\n     * @return {number} Horizontal text offset.\n     * @api\n     */\n  }, {\n    key: \"getOffsetX\",\n    value: function getOffsetX() {\n      return this.offsetX_;\n    }\n    /**\n     * Get the y-offset for the text.\n     * @return {number} Vertical text offset.\n     * @api\n     */\n  }, {\n    key: \"getOffsetY\",\n    value: function getOffsetY() {\n      return this.offsetY_;\n    }\n    /**\n     * Get the fill style for the text.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n  }, {\n    key: \"getFill\",\n    value: function getFill() {\n      return this.fill_;\n    }\n    /**\n     * Determine whether the text rotates with the map.\n     * @return {boolean|undefined} Rotate with map.\n     * @api\n     */\n  }, {\n    key: \"getRotateWithView\",\n    value: function getRotateWithView() {\n      return this.rotateWithView_;\n    }\n    /**\n     * Get the text rotation.\n     * @return {number|undefined} Rotation.\n     * @api\n     */\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return this.rotation_;\n    }\n    /**\n     * Get the text scale.\n     * @return {number|import(\"../size.js\").Size|undefined} Scale.\n     * @api\n     */\n  }, {\n    key: \"getScale\",\n    value: function getScale() {\n      return this.scale_;\n    }\n    /**\n     * Get the symbolizer scale array.\n     * @return {import(\"../size.js\").Size} Scale array.\n     */\n  }, {\n    key: \"getScaleArray\",\n    value: function getScaleArray() {\n      return this.scaleArray_;\n    }\n    /**\n     * Get the stroke style for the text.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n  }, {\n    key: \"getStroke\",\n    value: function getStroke() {\n      return this.stroke_;\n    }\n    /**\n     * Get the text to be rendered.\n     * @return {string|Array<string>|undefined} Text.\n     * @api\n     */\n  }, {\n    key: \"getText\",\n    value: function getText() {\n      return this.text_;\n    }\n    /**\n     * Get the text alignment.\n     * @return {CanvasTextAlign|undefined} Text align.\n     * @api\n     */\n  }, {\n    key: \"getTextAlign\",\n    value: function getTextAlign() {\n      return this.textAlign_;\n    }\n    /**\n     * Get the justification.\n     * @return {TextJustify|undefined} Justification.\n     * @api\n     */\n  }, {\n    key: \"getJustify\",\n    value: function getJustify() {\n      return this.justify_;\n    }\n    /**\n     * Get the text baseline.\n     * @return {CanvasTextBaseline|undefined} Text baseline.\n     * @api\n     */\n  }, {\n    key: \"getTextBaseline\",\n    value: function getTextBaseline() {\n      return this.textBaseline_;\n    }\n    /**\n     * Get the background fill style for the text.\n     * @return {import(\"./Fill.js\").default} Fill style.\n     * @api\n     */\n  }, {\n    key: \"getBackgroundFill\",\n    value: function getBackgroundFill() {\n      return this.backgroundFill_;\n    }\n    /**\n     * Get the background stroke style for the text.\n     * @return {import(\"./Stroke.js\").default} Stroke style.\n     * @api\n     */\n  }, {\n    key: \"getBackgroundStroke\",\n    value: function getBackgroundStroke() {\n      return this.backgroundStroke_;\n    }\n    /**\n     * Get the padding for the text.\n     * @return {Array<number>|null} Padding.\n     * @api\n     */\n  }, {\n    key: \"getPadding\",\n    value: function getPadding() {\n      return this.padding_;\n    }\n    /**\n     * Set the `overflow` property.\n     *\n     * @param {boolean} overflow Let text overflow the path that it follows.\n     * @api\n     */\n  }, {\n    key: \"setOverflow\",\n    value: function setOverflow(overflow) {\n      this.overflow_ = overflow;\n    }\n    /**\n     * Set the font.\n     *\n     * @param {string|undefined} font Font.\n     * @api\n     */\n  }, {\n    key: \"setFont\",\n    value: function setFont(font) {\n      this.font_ = font;\n    }\n    /**\n     * Set the maximum angle between adjacent characters.\n     *\n     * @param {number} maxAngle Angle in radians.\n     * @api\n     */\n  }, {\n    key: \"setMaxAngle\",\n    value: function setMaxAngle(maxAngle) {\n      this.maxAngle_ = maxAngle;\n    }\n    /**\n     * Set the x offset.\n     *\n     * @param {number} offsetX Horizontal text offset.\n     * @api\n     */\n  }, {\n    key: \"setOffsetX\",\n    value: function setOffsetX(offsetX) {\n      this.offsetX_ = offsetX;\n    }\n    /**\n     * Set the y offset.\n     *\n     * @param {number} offsetY Vertical text offset.\n     * @api\n     */\n  }, {\n    key: \"setOffsetY\",\n    value: function setOffsetY(offsetY) {\n      this.offsetY_ = offsetY;\n    }\n    /**\n     * Set the text placement.\n     *\n     * @param {TextPlacement} placement Placement.\n     * @api\n     */\n  }, {\n    key: \"setPlacement\",\n    value: function setPlacement(placement) {\n      this.placement_ = placement;\n    }\n    /**\n     * Set whether to rotate the text with the view.\n     *\n     * @param {boolean} rotateWithView Rotate with map.\n     * @api\n     */\n  }, {\n    key: \"setRotateWithView\",\n    value: function setRotateWithView(rotateWithView) {\n      this.rotateWithView_ = rotateWithView;\n    }\n    /**\n     * Set the fill.\n     *\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n  }, {\n    key: \"setFill\",\n    value: function setFill(fill) {\n      this.fill_ = fill;\n    }\n    /**\n     * Set the rotation.\n     *\n     * @param {number|undefined} rotation Rotation.\n     * @api\n     */\n  }, {\n    key: \"setRotation\",\n    value: function setRotation(rotation) {\n      this.rotation_ = rotation;\n    }\n    /**\n     * Set the scale.\n     *\n     * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n     * @api\n     */\n  }, {\n    key: \"setScale\",\n    value: function setScale(scale) {\n      this.scale_ = scale;\n      this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n    }\n    /**\n     * Set the stroke.\n     *\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n  }, {\n    key: \"setStroke\",\n    value: function setStroke(stroke) {\n      this.stroke_ = stroke;\n    }\n    /**\n     * Set the text.\n     *\n     * @param {string|Array<string>|undefined} text Text.\n     * @api\n     */\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      this.text_ = text;\n    }\n    /**\n     * Set the text alignment.\n     *\n     * @param {CanvasTextAlign|undefined} textAlign Text align.\n     * @api\n     */\n  }, {\n    key: \"setTextAlign\",\n    value: function setTextAlign(textAlign) {\n      this.textAlign_ = textAlign;\n    }\n    /**\n     * Set the justification.\n     *\n     * @param {TextJustify|undefined} justify Justification.\n     * @api\n     */\n  }, {\n    key: \"setJustify\",\n    value: function setJustify(justify) {\n      this.justify_ = justify;\n    }\n    /**\n     * Set the text baseline.\n     *\n     * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\n     * @api\n     */\n  }, {\n    key: \"setTextBaseline\",\n    value: function setTextBaseline(textBaseline) {\n      this.textBaseline_ = textBaseline;\n    }\n    /**\n     * Set the background fill.\n     *\n     * @param {import(\"./Fill.js\").default} fill Fill style.\n     * @api\n     */\n  }, {\n    key: \"setBackgroundFill\",\n    value: function setBackgroundFill(fill) {\n      this.backgroundFill_ = fill;\n    }\n    /**\n     * Set the background stroke.\n     *\n     * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n     * @api\n     */\n  }, {\n    key: \"setBackgroundStroke\",\n    value: function setBackgroundStroke(stroke) {\n      this.backgroundStroke_ = stroke;\n    }\n    /**\n     * Set the padding (`[top, right, bottom, left]`).\n     *\n     * @param {Array<number>|null} padding Padding.\n     * @api\n     */\n  }, {\n    key: \"setPadding\",\n    value: function setPadding(padding) {\n      this.padding_ = padding;\n    }\n  }]);\n  return Text;\n}();\nexport default Text;","map":null,"metadata":{},"sourceType":"module"}