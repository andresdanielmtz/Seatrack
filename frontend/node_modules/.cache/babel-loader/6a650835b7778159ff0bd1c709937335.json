{"ast":null,"code":"import _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/Collection\n */\nimport AssertionError from './AssertionError.js';\nimport BaseObject from './Object.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport Event from './events/Event.js';\n\n/**\n * @enum {string}\n * @private\n */\nvar Property = {\n  LENGTH: 'length'\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n * @template T\n */\nexport var CollectionEvent = /*#__PURE__*/function (_Event) {\n  _inherits(CollectionEvent, _Event);\n  /**\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\n   * @param {T} element Element.\n   * @param {number} index The index of the added or removed element.\n   */\n  function CollectionEvent(type, element, index) {\n    var _this;\n    _classCallCheck(this, CollectionEvent);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CollectionEvent).call(this, type));\n\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {T}\n     * @api\n     */\n    _this.element = element;\n\n    /**\n     * The index of the added or removed element.\n     * @type {number}\n     * @api\n     */\n    _this.index = index;\n    return _this;\n  }\n  return CollectionEvent;\n}(Event);\n\n/***\n * @template T\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\nvar Collection = /*#__PURE__*/function (_BaseObject) {\n  _inherits(Collection, _BaseObject);\n  /**\n   * @param {Array<T>} [array] Array.\n   * @param {Options} [options] Collection options.\n   */\n  function Collection(array, options) {\n    var _this2;\n    _classCallCheck(this, Collection);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Collection).call(this));\n\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n    _this2.on;\n\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n    _this2.once;\n\n    /***\n     * @type {CollectionOnSignature<T, void>}\n     */\n    _this2.un;\n    options = options || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this2.unique_ = !!options.unique;\n\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n    _this2.array_ = array ? array : [];\n    if (_this2.unique_) {\n      for (var i = 0, ii = _this2.array_.length; i < ii; ++i) {\n        _this2.assertUnique_(_this2.array_[i], i);\n      }\n    }\n    _this2.updateLength_();\n    return _this2;\n  }\n\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n  _createClass(Collection, [{\n    key: \"clear\",\n    value: function clear() {\n      while (this.getLength() > 0) {\n        this.pop();\n      }\n    }\n    /**\n     * Add elements to the collection.  This pushes each item in the provided array\n     * to the end of the collection.\n     * @param {!Array<T>} arr Array.\n     * @return {Collection<T>} This collection.\n     * @api\n     */\n  }, {\n    key: \"extend\",\n    value: function extend(arr) {\n      for (var i = 0, ii = arr.length; i < ii; ++i) {\n        this.push(arr[i]);\n      }\n      return this;\n    }\n    /**\n     * Iterate over each element, calling the provided callback.\n     * @param {function(T, number, Array<T>): *} f The function to call\n     *     for every element. This function takes 3 arguments (the element, the\n     *     index and the array). The return value is ignored.\n     * @api\n     */\n  }, {\n    key: \"forEach\",\n    value: function forEach(f) {\n      var array = this.array_;\n      for (var i = 0, ii = array.length; i < ii; ++i) {\n        f(array[i], i, array);\n      }\n    }\n    /**\n     * Get a reference to the underlying Array object. Warning: if the array\n     * is mutated, no events will be dispatched by the collection, and the\n     * collection's \"length\" property won't be in sync with the actual length\n     * of the array.\n     * @return {!Array<T>} Array.\n     * @api\n     */\n  }, {\n    key: \"getArray\",\n    value: function getArray() {\n      return this.array_;\n    }\n    /**\n     * Get the element at the provided index.\n     * @param {number} index Index.\n     * @return {T} Element.\n     * @api\n     */\n  }, {\n    key: \"item\",\n    value: function item(index) {\n      return this.array_[index];\n    }\n    /**\n     * Get the length of this collection.\n     * @return {number} The length of the array.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.get(Property.LENGTH);\n    }\n    /**\n     * Insert an element at the provided index.\n     * @param {number} index Index.\n     * @param {T} elem Element.\n     * @api\n     */\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(index, elem) {\n      if (index < 0 || index > this.getLength()) {\n        throw new Error('Index out of bounds: ' + index);\n      }\n      if (this.unique_) {\n        this.assertUnique_(elem);\n      }\n      this.array_.splice(index, 0, elem);\n      this.updateLength_();\n      this.dispatchEvent(new CollectionEvent(CollectionEventType.ADD, elem, index));\n    }\n    /**\n     * Remove the last element of the collection and return it.\n     * Return `undefined` if the collection is empty.\n     * @return {T|undefined} Element.\n     * @api\n     */\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      return this.removeAt(this.getLength() - 1);\n    }\n    /**\n     * Insert the provided element at the end of the collection.\n     * @param {T} elem Element.\n     * @return {number} New length of the collection.\n     * @api\n     */\n  }, {\n    key: \"push\",\n    value: function push(elem) {\n      if (this.unique_) {\n        this.assertUnique_(elem);\n      }\n      var n = this.getLength();\n      this.insertAt(n, elem);\n      return this.getLength();\n    }\n    /**\n     * Remove the first occurrence of an element from the collection.\n     * @param {T} elem Element.\n     * @return {T|undefined} The removed element or undefined if none found.\n     * @api\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(elem) {\n      var arr = this.array_;\n      for (var i = 0, ii = arr.length; i < ii; ++i) {\n        if (arr[i] === elem) {\n          return this.removeAt(i);\n        }\n      }\n      return undefined;\n    }\n    /**\n     * Remove the element at the provided index and return it.\n     * Return `undefined` if the collection does not contain this index.\n     * @param {number} index Index.\n     * @return {T|undefined} Value.\n     * @api\n     */\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(index) {\n      if (index < 0 || index >= this.getLength()) {\n        return undefined;\n      }\n      var prev = this.array_[index];\n      this.array_.splice(index, 1);\n      this.updateLength_();\n      this.dispatchEvent( /** @type {CollectionEvent<T>} */\n      new CollectionEvent(CollectionEventType.REMOVE, prev, index));\n      return prev;\n    }\n    /**\n     * Set the element at the provided index.\n     * @param {number} index Index.\n     * @param {T} elem Element.\n     * @api\n     */\n  }, {\n    key: \"setAt\",\n    value: function setAt(index, elem) {\n      var n = this.getLength();\n      if (index >= n) {\n        this.insertAt(index, elem);\n        return;\n      }\n      if (index < 0) {\n        throw new Error('Index out of bounds: ' + index);\n      }\n      if (this.unique_) {\n        this.assertUnique_(elem, index);\n      }\n      var prev = this.array_[index];\n      this.array_[index] = elem;\n      this.dispatchEvent( /** @type {CollectionEvent<T>} */\n      new CollectionEvent(CollectionEventType.REMOVE, prev, index));\n      this.dispatchEvent( /** @type {CollectionEvent<T>} */\n      new CollectionEvent(CollectionEventType.ADD, elem, index));\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"updateLength_\",\n    value: function updateLength_() {\n      this.set(Property.LENGTH, this.array_.length);\n    }\n    /**\n     * @private\n     * @param {T} elem Element.\n     * @param {number} [except] Optional index to ignore.\n     */\n  }, {\n    key: \"assertUnique_\",\n    value: function assertUnique_(elem, except) {\n      for (var i = 0, ii = this.array_.length; i < ii; ++i) {\n        if (this.array_[i] === elem && i !== except) {\n          throw new AssertionError(58);\n        }\n      }\n    }\n  }]);\n  return Collection;\n}(BaseObject);\nexport default Collection;","map":null,"metadata":{},"sourceType":"module"}