{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport { assert } from '../asserts.js';\nimport { listen, unlistenByKey } from '../events.js';\n\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/**\n * @typedef {'sourceready'|'change:source'} LayerEventType\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n * A `sourceready` event is fired when the layer's source is ready.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nvar Layer = /*#__PURE__*/function (_BaseLayer) {\n  _inherits(Layer, _BaseLayer);\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  function Layer(options) {\n    var _this;\n    _classCallCheck(this, Layer);\n    var baseOptions = Object.assign({}, options);\n    delete baseOptions.source;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Layer).call(this, baseOptions));\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    _this.un;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {RendererType}\n     */\n    _this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.sourceReady_ = false;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    _this.rendered = false;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      _this.render = options.render;\n    }\n    if (options.map) {\n      _this.setMap(options.map);\n    }\n    _this.addChangeListener(LayerProperty.SOURCE, _this.handleSourcePropertyChange_);\n    var source = options.source ? /** @type {SourceType} */options.source : null;\n    _this.setSource(source);\n    return _this;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  _createClass(Layer, [{\n    key: \"getLayersArray\",\n    value: function getLayersArray(array) {\n      array = array ? array : [];\n      array.push(this);\n      return array;\n    }\n    /**\n     * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n     * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n     */\n  }, {\n    key: \"getLayerStatesArray\",\n    value: function getLayerStatesArray(states) {\n      states = states ? states : [];\n      states.push(this.getLayerState());\n      return states;\n    }\n    /**\n     * Get the layer source.\n     * @return {SourceType|null} The layer source (or `null` if not yet set).\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getSource\",\n    value: function getSource() {\n      return (/** @type {SourceType} */this.get(LayerProperty.SOURCE) || null\n      );\n    }\n    /**\n     * @return {SourceType|null} The source being rendered.\n     */\n  }, {\n    key: \"getRenderSource\",\n    value: function getRenderSource() {\n      return this.getSource();\n    }\n    /**\n     * @return {import(\"../source/Source.js\").State} Source state.\n     */\n  }, {\n    key: \"getSourceState\",\n    value: function getSourceState() {\n      var source = this.getSource();\n      return !source ? 'undefined' : source.getState();\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleSourceChange_\",\n    value: function handleSourceChange_() {\n      this.changed();\n      if (this.sourceReady_ || this.getSource().getState() !== 'ready') {\n        return;\n      }\n      this.sourceReady_ = true;\n      this.dispatchEvent('sourceready');\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleSourcePropertyChange_\",\n    value: function handleSourcePropertyChange_() {\n      var _this2 = this;\n      if (this.sourceChangeKey_) {\n        unlistenByKey(this.sourceChangeKey_);\n        this.sourceChangeKey_ = null;\n      }\n      this.sourceReady_ = false;\n      var source = this.getSource();\n      if (source) {\n        this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n        if (source.getState() === 'ready') {\n          this.sourceReady_ = true;\n          setTimeout(function () {\n            _this2.dispatchEvent('sourceready');\n          }, 0);\n        }\n      }\n      this.changed();\n    }\n    /**\n     * @param {import(\"../pixel\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n     * an array of features.\n     */\n  }, {\n    key: \"getFeatures\",\n    value: function getFeatures(pixel) {\n      if (!this.renderer_) {\n        return Promise.resolve([]);\n      }\n      return this.renderer_.getFeatures(pixel);\n    }\n    /**\n     * @param {import(\"../pixel\").Pixel} pixel Pixel.\n     * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n     */\n  }, {\n    key: \"getData\",\n    value: function getData(pixel) {\n      if (!this.renderer_ || !this.rendered) {\n        return null;\n      }\n      return this.renderer_.getData(pixel);\n    }\n    /**\n     * In charge to manage the rendering of the layer. One layer type is\n     * bounded with one layer renderer.\n     * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n     * @param {HTMLElement} target Target which the renderer may (but need not) use\n     * for rendering its content.\n     * @return {HTMLElement} The rendered element.\n     */\n  }, {\n    key: \"render\",\n    value: function render(frameState, target) {\n      var layerRenderer = this.getRenderer();\n      if (layerRenderer.prepareFrame(frameState)) {\n        this.rendered = true;\n        return layerRenderer.renderFrame(frameState, target);\n      }\n    }\n    /**\n     * Called when a layer is not visible during a map render.\n     */\n  }, {\n    key: \"unrender\",\n    value: function unrender() {\n      this.rendered = false;\n    }\n    /**\n     * For use inside the library only.\n     * @param {import(\"../Map.js\").default|null} map Map.\n     */\n  }, {\n    key: \"setMapInternal\",\n    value: function setMapInternal(map) {\n      if (!map) {\n        this.unrender();\n      }\n      this.set(LayerProperty.MAP, map);\n    }\n    /**\n     * For use inside the library only.\n     * @return {import(\"../Map.js\").default|null} Map.\n     */\n  }, {\n    key: \"getMapInternal\",\n    value: function getMapInternal() {\n      return this.get(LayerProperty.MAP);\n    }\n    /**\n     * Sets the layer to be rendered on top of other layers on a map. The map will\n     * not manage this layer in its layers collection. This\n     * is useful for temporary layers. To remove an unmanaged layer from the map,\n     * use `#setMap(null)`.\n     *\n     * To add the layer to a map and have it managed by the map, use\n     * {@link module:ol/Map~Map#addLayer} instead.\n     * @param {import(\"../Map.js\").default|null} map Map.\n     * @api\n     */\n  }, {\n    key: \"setMap\",\n    value: function setMap(map) {\n      if (this.mapPrecomposeKey_) {\n        unlistenByKey(this.mapPrecomposeKey_);\n        this.mapPrecomposeKey_ = null;\n      }\n      if (!map) {\n        this.changed();\n      }\n      if (this.mapRenderKey_) {\n        unlistenByKey(this.mapRenderKey_);\n        this.mapRenderKey_ = null;\n      }\n      if (map) {\n        this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n          var renderEvent = /** @type {import(\"../render/Event.js\").default} */evt;\n          var layerStatesArray = renderEvent.frameState.layerStatesArray;\n          var layerState = this.getLayerState(false);\n          // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n          assert(!layerStatesArray.some(function (arrayLayerState) {\n            return arrayLayerState.layer === layerState.layer;\n          }), 67);\n          layerStatesArray.push(layerState);\n        }, this);\n        this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n        this.changed();\n      }\n    }\n    /**\n     * Set the layer source.\n     * @param {SourceType|null} source The layer source.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setSource\",\n    value: function setSource(source) {\n      this.set(LayerProperty.SOURCE, source);\n    }\n    /**\n     * Get the renderer for this layer.\n     * @return {RendererType|null} The layer renderer.\n     */\n  }, {\n    key: \"getRenderer\",\n    value: function getRenderer() {\n      if (!this.renderer_) {\n        this.renderer_ = this.createRenderer();\n      }\n      return this.renderer_;\n    }\n    /**\n     * @return {boolean} The layer has a renderer.\n     */\n  }, {\n    key: \"hasRenderer\",\n    value: function hasRenderer() {\n      return !!this.renderer_;\n    }\n    /**\n     * Create a renderer for this layer.\n     * @return {RendererType} A layer renderer.\n     * @protected\n     */\n  }, {\n    key: \"createRenderer\",\n    value: function createRenderer() {\n      return null;\n    }\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      if (this.renderer_) {\n        this.renderer_.dispose();\n        delete this.renderer_;\n      }\n      this.setSource(null);\n      _get(_getPrototypeOf(Layer.prototype), \"disposeInternal\", this).call(this);\n    }\n  }]);\n  return Layer;\n}(BaseLayer);\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  var resolution = viewState.resolution;\n  if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {\n    return false;\n  }\n  var zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nexport default Layer;","map":null,"metadata":{},"sourceType":"module"}