{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as _getTileGridForProjection } from '../tilegrid.js';\nimport { getUid } from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nvar TileImage = /*#__PURE__*/function (_UrlTile) {\n  _inherits(TileImage, _UrlTile);\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  function TileImage(options) {\n    var _this;\n    _classCallCheck(this, TileImage);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TileImage).call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    }));\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    _this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    _this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    _this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    _this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.renderReprojectionEdges_ = false;\n    return _this;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  _createClass(TileImage, [{\n    key: \"canExpireCache\",\n    value: function canExpireCache() {\n      if (this.tileCache.canExpireCache()) {\n        return true;\n      }\n      for (var key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n      return false;\n    }\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {!Object<string, boolean>} usedTiles Used tiles.\n     */\n  }, {\n    key: \"expireCache\",\n    value: function expireCache(projection, usedTiles) {\n      var usedTileCache = this.getTileCacheForProjection(projection);\n      this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n      for (var id in this.tileCacheForProjection) {\n        var tileCache = this.tileCacheForProjection[id];\n        tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n      }\n    }\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {number} Gutter.\n     */\n  }, {\n    key: \"getGutterForProjection\",\n    value: function getGutterForProjection(projection) {\n      if (this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n        return 0;\n      }\n      return this.getGutter();\n    }\n    /**\n     * @return {number} Gutter.\n     */\n  }, {\n    key: \"getGutter\",\n    value: function getGutter() {\n      return 0;\n    }\n    /**\n     * Return the key to be used for all tiles in the source.\n     * @return {string} The key for all tiles.\n     */\n  }, {\n    key: \"getKey\",\n    value: function getKey() {\n      var key = _get(_getPrototypeOf(TileImage.prototype), \"getKey\", this).call(this);\n      if (!this.getInterpolate()) {\n        key += ':disable-interpolation';\n      }\n      return key;\n    }\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {boolean} Opaque.\n     */\n  }, {\n    key: \"getOpaque\",\n    value: function getOpaque(projection) {\n      if (this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n        return false;\n      }\n      return _get(_getPrototypeOf(TileImage.prototype), \"getOpaque\", this).call(this, projection);\n    }\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n     */\n  }, {\n    key: \"getTileGridForProjection\",\n    value: function getTileGridForProjection(projection) {\n      var thisProj = this.getProjection();\n      if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n        return this.tileGrid;\n      }\n      var projKey = getUid(projection);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = _getTileGridForProjection(projection);\n      }\n      return this.tileGridForProjection[projKey];\n    }\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../TileCache.js\").default} Tile cache.\n     */\n  }, {\n    key: \"getTileCacheForProjection\",\n    value: function getTileCacheForProjection(projection) {\n      var thisProj = this.getProjection();\n      if (!thisProj || equivalent(thisProj, projection)) {\n        return this.tileCache;\n      }\n      var projKey = getUid(projection);\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n      return this.tileCacheForProjection[projKey];\n    }\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {string} key The key set on the tile.\n     * @return {!ImageTile} Tile.\n     * @private\n     */\n  }, {\n    key: \"createTile_\",\n    value: function createTile_(z, x, y, pixelRatio, projection, key) {\n      var tileCoord = [z, x, y];\n      var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      var tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n      var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n      tile.key = key;\n      tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n      return tile;\n    }\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!(ImageTile|ReprojTile)} Tile.\n     */\n  }, {\n    key: \"getTile\",\n    value: function getTile(z, x, y, pixelRatio, projection) {\n      var _this2 = this;\n      var sourceProjection = this.getProjection();\n      if (!sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n        return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n      }\n      var cache = this.getTileCacheForProjection(projection);\n      var tileCoord = [z, x, y];\n      var tile;\n      var tileCoordKey = getKey(tileCoord);\n      if (cache.containsKey(tileCoordKey)) {\n        tile = cache.get(tileCoordKey);\n      }\n      var key = this.getKey();\n      if (tile && tile.key == key) {\n        return tile;\n      }\n      var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n      var targetTileGrid = this.getTileGridForProjection(projection);\n      var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {\n        return _this2.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n      }, this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.getInterpolate());\n      newTile.key = key;\n      if (tile) {\n        newTile.interimTile = tile;\n        newTile.refreshInterimChain();\n        cache.replace(tileCoordKey, newTile);\n      } else {\n        cache.set(tileCoordKey, newTile);\n      }\n      return newTile;\n    }\n    /**\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!ImageTile} Tile.\n     * @protected\n     */\n  }, {\n    key: \"getTileInternal\",\n    value: function getTileInternal(z, x, y, pixelRatio, projection) {\n      var tile = null;\n      var tileCoordKey = getKeyZXY(z, x, y);\n      var key = this.getKey();\n      if (!this.tileCache.containsKey(tileCoordKey)) {\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n        this.tileCache.set(tileCoordKey, tile);\n      } else {\n        tile = this.tileCache.get(tileCoordKey);\n        if (tile.key != key) {\n          // The source's params changed. If the tile has an interim tile and if we\n          // can use it then we use it. Otherwise we create a new tile.  In both\n          // cases we attempt to assign an interim tile to the new tile.\n          var interimTile = tile;\n          tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n          //make the new tile the head of the list,\n          if (interimTile.getState() == TileState.IDLE) {\n            //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n            tile.interimTile = interimTile.interimTile;\n          } else {\n            tile.interimTile = interimTile;\n          }\n          tile.refreshInterimChain();\n          this.tileCache.replace(tileCoordKey, tile);\n        }\n      }\n      return tile;\n    }\n    /**\n     * Sets whether to render reprojection edges or not (usually for debugging).\n     * @param {boolean} render Render the edges.\n     * @api\n     */\n  }, {\n    key: \"setRenderReprojectionEdges\",\n    value: function setRenderReprojectionEdges(render) {\n      if (this.renderReprojectionEdges_ == render) {\n        return;\n      }\n      this.renderReprojectionEdges_ = render;\n      for (var id in this.tileCacheForProjection) {\n        this.tileCacheForProjection[id].clear();\n      }\n      this.changed();\n    }\n    /**\n     * Sets the tile grid to use when reprojecting the tiles to the given\n     * projection instead of the default tile grid for the projection.\n     *\n     * This can be useful when the default tile grid cannot be created\n     * (e.g. projection has no extent defined) or\n     * for optimization reasons (custom tile size, resolutions, ...).\n     *\n     * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n     * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n     * @api\n     */\n  }, {\n    key: \"setTileGridForProjection\",\n    value: function setTileGridForProjection(projection, tilegrid) {\n      var proj = getProjection(projection);\n      if (proj) {\n        var projKey = getUid(proj);\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _get(_getPrototypeOf(TileImage.prototype), \"clear\", this).call(this);\n      for (var id in this.tileCacheForProjection) {\n        this.tileCacheForProjection[id].clear();\n      }\n    }\n  }]);\n  return TileImage;\n}(UrlTile);\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */imageTile.getImage().src = src;\n}\nexport default TileImage;","map":null,"metadata":{},"sourceType":"module"}