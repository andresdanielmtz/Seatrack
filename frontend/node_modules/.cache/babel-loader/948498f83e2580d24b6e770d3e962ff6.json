{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n * @module ol/style/IconImageCache\n */\nimport { asString } from '../color.js';\n\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.\n */\nvar IconImageCache = /*#__PURE__*/function () {\n  function IconImageCache() {\n    _classCallCheck(this, IconImageCache);\n    /**\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\n     * @private\n     */\n    this.cache_ = {};\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.cacheSize_ = 0;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxCacheSize_ = 32;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  _createClass(IconImageCache, [{\n    key: \"clear\",\n    value: function clear() {\n      this.cache_ = {};\n      this.cacheSize_ = 0;\n    }\n    /**\n     * @return {boolean} Can expire cache.\n     */\n  }, {\n    key: \"canExpireCache\",\n    value: function canExpireCache() {\n      return this.cacheSize_ > this.maxCacheSize_;\n    }\n    /**\n     * FIXME empty description for jsdoc\n     */\n  }, {\n    key: \"expire\",\n    value: function expire() {\n      if (this.canExpireCache()) {\n        var i = 0;\n        for (var key in this.cache_) {\n          var iconImage = this.cache_[key];\n          if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n            delete this.cache_[key];\n            --this.cacheSize_;\n          }\n        }\n      }\n    }\n    /**\n     * @param {string} src Src.\n     * @param {?string} crossOrigin Cross origin.\n     * @param {import(\"../color.js\").Color} color Color.\n     * @return {import(\"./IconImage.js\").default} Icon image.\n     */\n  }, {\n    key: \"get\",\n    value: function get(src, crossOrigin, color) {\n      var key = getKey(src, crossOrigin, color);\n      return key in this.cache_ ? this.cache_[key] : null;\n    }\n    /**\n     * @param {string} src Src.\n     * @param {?string} crossOrigin Cross origin.\n     * @param {import(\"../color.js\").Color} color Color.\n     * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n     */\n  }, {\n    key: \"set\",\n    value: function set(src, crossOrigin, color, iconImage) {\n      var key = getKey(src, crossOrigin, color);\n      this.cache_[key] = iconImage;\n      ++this.cacheSize_;\n    }\n    /**\n     * Set the cache size of the icon cache. Default is `32`. Change this value when\n     * your map uses more than 32 different icon images and you are not caching icon\n     * styles on the application level.\n     * @param {number} maxCacheSize Cache max size.\n     * @api\n     */\n  }, {\n    key: \"setSize\",\n    value: function setSize(maxCacheSize) {\n      this.maxCacheSize_ = maxCacheSize;\n      this.expire();\n    }\n  }]);\n  return IconImageCache;\n}();\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\nfunction getKey(src, crossOrigin, color) {\n  var colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\nexport default IconImageCache;\n\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\nexport var shared = new IconImageCache();","map":null,"metadata":{},"sourceType":"module"}