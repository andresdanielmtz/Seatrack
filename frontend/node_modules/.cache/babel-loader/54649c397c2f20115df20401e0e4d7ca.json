{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/ImageTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport { createCanvasContext2D } from './dom.js';\nimport { listenImage } from './Image.js';\nvar ImageTile = /*#__PURE__*/function (_Tile) {\n  _inherits(ImageTile, _Tile);\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\n   */\n  function ImageTile(tileCoord, state, src, crossOrigin, tileLoadFunction, options) {\n    var _this;\n    _classCallCheck(this, ImageTile);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageTile).call(this, tileCoord, state, options));\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    _this.crossOrigin_ = crossOrigin;\n\n    /**\n     * Image URI\n     *\n     * @private\n     * @type {string}\n     */\n    _this.src_ = src;\n    _this.key = src;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    _this.image_ = new Image();\n    if (crossOrigin !== null) {\n      _this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    _this.unlisten_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */\n    _this.tileLoadFunction_ = tileLoadFunction;\n    return _this;\n  }\n\n  /**\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  _createClass(ImageTile, [{\n    key: \"getImage\",\n    value: function getImage() {\n      return this.image_;\n    }\n    /**\n     * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).\n     * @param {HTMLCanvasElement|HTMLImageElement} element Element.\n     */\n  }, {\n    key: \"setImage\",\n    value: function setImage(element) {\n      this.image_ = element;\n      this.state = TileState.LOADED;\n      this.unlistenImage_();\n      this.changed();\n    }\n    /**\n     * Tracks loading or read errors.\n     *\n     * @private\n     */\n  }, {\n    key: \"handleImageError_\",\n    value: function handleImageError_() {\n      this.state = TileState.ERROR;\n      this.unlistenImage_();\n      this.image_ = getBlankImage();\n      this.changed();\n    }\n    /**\n     * Tracks successful image load.\n     *\n     * @private\n     */\n  }, {\n    key: \"handleImageLoad_\",\n    value: function handleImageLoad_() {\n      var image = /** @type {HTMLImageElement} */this.image_;\n      if (image.naturalWidth && image.naturalHeight) {\n        this.state = TileState.LOADED;\n      } else {\n        this.state = TileState.EMPTY;\n      }\n      this.unlistenImage_();\n      this.changed();\n    }\n    /**\n     * Load the image or retry if loading previously failed.\n     * Loading is taken care of by the tile queue, and calling this method is\n     * only needed for preloading or for reloading in case of an error.\n     *\n     * To retry loading tiles on failed requests, use a custom `tileLoadFunction`\n     * that checks for error status codes and reloads only when the status code is\n     * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been\n     * made already:\n     *\n     * ```js\n     * const retryCodes = [408, 429, 500, 502, 503, 504];\n     * const retries = {};\n     * source.setTileLoadFunction((tile, src) => {\n     *   const image = tile.getImage();\n     *   fetch(src)\n     *     .then((response) => {\n     *       if (retryCodes.includes(response.status)) {\n     *         retries[src] = (retries[src] || 0) + 1;\n     *         if (retries[src] <= 3) {\n     *           setTimeout(() => tile.load(), retries[src] * 1000);\n     *         }\n     *         return Promise.reject();\n     *       }\n     *       return response.blob();\n     *     })\n     *     .then((blob) => {\n     *       const imageUrl = URL.createObjectURL(blob);\n     *       image.src = imageUrl;\n     *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);\n     *     })\n     *     .catch(() => tile.setState(3)); // error\n     * });\n     * ```\n     *\n     * @api\n     */\n  }, {\n    key: \"load\",\n    value: function load() {\n      if (this.state == TileState.ERROR) {\n        this.state = TileState.IDLE;\n        this.image_ = new Image();\n        if (this.crossOrigin_ !== null) {\n          this.image_.crossOrigin = this.crossOrigin_;\n        }\n      }\n      if (this.state == TileState.IDLE) {\n        this.state = TileState.LOADING;\n        this.changed();\n        this.tileLoadFunction_(this, this.src_);\n        this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n      }\n    }\n    /**\n     * Discards event handlers which listen for load completion or errors.\n     *\n     * @private\n     */\n  }, {\n    key: \"unlistenImage_\",\n    value: function unlistenImage_() {\n      if (this.unlisten_) {\n        this.unlisten_();\n        this.unlisten_ = null;\n      }\n    }\n  }]);\n  return ImageTile;\n}(Tile);\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */\nfunction getBlankImage() {\n  var ctx = createCanvasContext2D(1, 1);\n  ctx.fillStyle = 'rgba(0,0,0,0)';\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.canvas;\n}\nexport default ImageTile;","map":null,"metadata":{},"sourceType":"module"}