{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/interaction/PinchRotate\n */\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { disable } from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nvar PinchRotate = /*#__PURE__*/function (_PointerInteraction) {\n  _inherits(PinchRotate, _PointerInteraction);\n  /**\n   * @param {Options} [options] Options.\n   */\n  function PinchRotate(options) {\n    var _this;\n    _classCallCheck(this, PinchRotate);\n    options = options ? options : {};\n    var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */\n    options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PinchRotate).call(this, pointerOptions));\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    _this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.rotating_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.rotationDelta_ = 0.0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 250;\n    return _this;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  _createClass(PinchRotate, [{\n    key: \"handleDragEvent\",\n    value: function handleDragEvent(mapBrowserEvent) {\n      var rotationDelta = 0.0;\n      var touch0 = this.targetPointers[0];\n      var touch1 = this.targetPointers[1];\n\n      // angle between touches\n      var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n      if (this.lastAngle_ !== undefined) {\n        var delta = angle - this.lastAngle_;\n        this.rotationDelta_ += delta;\n        if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n          this.rotating_ = true;\n        }\n        rotationDelta = delta;\n      }\n      this.lastAngle_ = angle;\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      if (view.getConstraints().rotation === disable) {\n        return;\n      }\n\n      // rotate anchor point.\n      // FIXME: should be the intersection point between the lines:\n      //     touch0,touch1 and previousTouch0,previousTouch1\n      this.anchor_ = map.getCoordinateFromPixelInternal(map.getEventPixel(centroidFromPointers(this.targetPointers)));\n\n      // rotate\n      if (this.rotating_) {\n        map.render();\n        view.adjustRotationInternal(rotationDelta, this.anchor_);\n      }\n    }\n    /**\n     * Handle pointer up events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n  }, {\n    key: \"handleUpEvent\",\n    value: function handleUpEvent(mapBrowserEvent) {\n      if (this.targetPointers.length < 2) {\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        view.endInteraction(this.duration_);\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Handle pointer down events.\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n     * @return {boolean} If the event was consumed.\n     */\n  }, {\n    key: \"handleDownEvent\",\n    value: function handleDownEvent(mapBrowserEvent) {\n      if (this.targetPointers.length >= 2) {\n        var map = mapBrowserEvent.map;\n        this.anchor_ = null;\n        this.lastAngle_ = undefined;\n        this.rotating_ = false;\n        this.rotationDelta_ = 0.0;\n        if (!this.handlingDownUpSequence) {\n          map.getView().beginInteraction();\n        }\n        return true;\n      }\n      return false;\n    }\n  }]);\n  return PinchRotate;\n}(PointerInteraction);\nexport default PinchRotate;","map":null,"metadata":{},"sourceType":"module"}