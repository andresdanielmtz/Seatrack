{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n/**\n * @module ol/render/canvas/BuilderGroup\n */\n\nimport Builder from './Builder.js';\nimport ImageBuilder from './ImageBuilder.js';\nimport LineStringBuilder from './LineStringBuilder.js';\nimport PolygonBuilder from './PolygonBuilder.js';\nimport TextBuilder from './TextBuilder.js';\n\n/**\n * @type {Object<import(\"../canvas.js\").BuilderType, typeof Builder>}\n */\nvar BATCH_CONSTRUCTORS = {\n  'Circle': PolygonBuilder,\n  'Default': Builder,\n  'Image': ImageBuilder,\n  'LineString': LineStringBuilder,\n  'Polygon': PolygonBuilder,\n  'Text': TextBuilder\n};\nvar BuilderGroup = /*#__PURE__*/function () {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  function BuilderGroup(tolerance, maxExtent, resolution, pixelRatio) {\n    _classCallCheck(this, BuilderGroup);\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tolerance_ = tolerance;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, Builder>>}\n     */\n    this.buildersByZIndex_ = {};\n  }\n\n  /**\n   * @return {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Builder.js\").SerializableInstructions>>} The serializable instructions\n   */\n  _createClass(BuilderGroup, [{\n    key: \"finish\",\n    value: function finish() {\n      var builderInstructions = {};\n      for (var zKey in this.buildersByZIndex_) {\n        builderInstructions[zKey] = builderInstructions[zKey] || {};\n        var builders = this.buildersByZIndex_[zKey];\n        for (var builderKey in builders) {\n          var builderInstruction = builders[builderKey].finish();\n          builderInstructions[zKey][builderKey] = builderInstruction;\n        }\n      }\n      return builderInstructions;\n    }\n    /**\n     * @param {number|undefined} zIndex Z index.\n     * @param {import(\"../canvas.js\").BuilderType} builderType Replay type.\n     * @return {import(\"../VectorContext.js\").default} Replay.\n     */\n  }, {\n    key: \"getBuilder\",\n    value: function getBuilder(zIndex, builderType) {\n      var zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';\n      var replays = this.buildersByZIndex_[zIndexKey];\n      if (replays === undefined) {\n        replays = {};\n        this.buildersByZIndex_[zIndexKey] = replays;\n      }\n      var replay = replays[builderType];\n      if (replay === undefined) {\n        var Constructor = BATCH_CONSTRUCTORS[builderType];\n        replay = new Constructor(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_);\n        replays[builderType] = replay;\n      }\n      return replay;\n    }\n  }]);\n  return BuilderGroup;\n}();\nexport default BuilderGroup;","map":null,"metadata":{},"sourceType":"module"}