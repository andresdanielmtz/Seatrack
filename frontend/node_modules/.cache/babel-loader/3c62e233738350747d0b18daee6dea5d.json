{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/layer/Base\n */\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport { abstract } from '../util.js';\nimport { assert } from '../asserts.js';\nimport { clamp } from '../math.js';\n\n/**\n * A css color, or a function called with a view resolution returning a css color.\n *\n * @typedef {string|function(number):string} BackgroundColor\n * @api\n */\n\n/**\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nvar BaseLayer = /*#__PURE__*/function (_BaseObject) {\n  _inherits(BaseLayer, _BaseObject);\n  /**\n   * @param {Options} options Layer options.\n   */\n  function BaseLayer(options) {\n    var _this;\n    _classCallCheck(this, BaseLayer);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseLayer).call(this));\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n\n    /***\n     * @type {BaseLayerOnSignature<void>}\n     */\n    _this.un;\n\n    /**\n     * @type {BackgroundColor|false}\n     * @private\n     */\n    _this.background_ = options.background;\n\n    /**\n     * @type {Object<string, *>}\n     */\n    var properties = Object.assign({}, options);\n    if (typeof options.properties === 'object') {\n      delete properties.properties;\n      Object.assign(properties, options.properties);\n    }\n    properties[LayerProperty.OPACITY] = options.opacity !== undefined ? options.opacity : 1;\n    assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number\n\n    properties[LayerProperty.VISIBLE] = options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;\n    properties[LayerProperty.MIN_ZOOM] = options.minZoom !== undefined ? options.minZoom : -Infinity;\n    properties[LayerProperty.MAX_ZOOM] = options.maxZoom !== undefined ? options.maxZoom : Infinity;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    _this.className_ = properties.className !== undefined ? properties.className : 'ol-layer';\n    delete properties.className;\n    _this.setProperties(properties);\n\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    _this.state_ = null;\n    return _this;\n  }\n\n  /**\n   * Get the background for this layer.\n   * @return {BackgroundColor|false} Layer background.\n   */\n  _createClass(BaseLayer, [{\n    key: \"getBackground\",\n    value: function getBackground() {\n      return this.background_;\n    }\n    /**\n     * @return {string} CSS class name.\n     */\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return this.className_;\n    }\n    /**\n     * This method is not meant to be called by layers or layer renderers because the state\n     * is incorrect if the layer is included in a layer group.\n     *\n     * @param {boolean} [managed] Layer is managed.\n     * @return {import(\"./Layer.js\").State} Layer state.\n     */\n  }, {\n    key: \"getLayerState\",\n    value: function getLayerState(managed) {\n      /** @type {import(\"./Layer.js\").State} */\n      var state = this.state_ || /** @type {?} */{\n        layer: this,\n        managed: managed === undefined ? true : managed\n      };\n      var zIndex = this.getZIndex();\n      state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n      state.visible = this.getVisible();\n      state.extent = this.getExtent();\n      state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n      state.maxResolution = this.getMaxResolution();\n      state.minResolution = Math.max(this.getMinResolution(), 0);\n      state.minZoom = this.getMinZoom();\n      state.maxZoom = this.getMaxZoom();\n      this.state_ = state;\n      return state;\n    }\n    /**\n     * @abstract\n     * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\n     *     modified in place).\n     * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n     */\n  }, {\n    key: \"getLayersArray\",\n    value: function getLayersArray(array) {\n      return abstract();\n    }\n    /**\n     * @abstract\n     * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\n     *     states (to be modified in place).\n     * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n     */\n  }, {\n    key: \"getLayerStatesArray\",\n    value: function getLayerStatesArray(states) {\n      return abstract();\n    }\n    /**\n     * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n     * will be visible regardless of extent.\n     * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getExtent\",\n    value: function getExtent() {\n      return (/** @type {import(\"../extent.js\").Extent|undefined} */\n        this.get(LayerProperty.EXTENT)\n      );\n    }\n    /**\n     * Return the maximum resolution of the layer.\n     * @return {number} The maximum resolution of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getMaxResolution\",\n    value: function getMaxResolution() {\n      return (/** @type {number} */this.get(LayerProperty.MAX_RESOLUTION)\n      );\n    }\n    /**\n     * Return the minimum resolution of the layer.\n     * @return {number} The minimum resolution of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getMinResolution\",\n    value: function getMinResolution() {\n      return (/** @type {number} */this.get(LayerProperty.MIN_RESOLUTION)\n      );\n    }\n    /**\n     * Return the minimum zoom level of the layer.\n     * @return {number} The minimum zoom level of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getMinZoom\",\n    value: function getMinZoom() {\n      return (/** @type {number} */this.get(LayerProperty.MIN_ZOOM)\n      );\n    }\n    /**\n     * Return the maximum zoom level of the layer.\n     * @return {number} The maximum zoom level of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getMaxZoom\",\n    value: function getMaxZoom() {\n      return (/** @type {number} */this.get(LayerProperty.MAX_ZOOM)\n      );\n    }\n    /**\n     * Return the opacity of the layer (between 0 and 1).\n     * @return {number} The opacity of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getOpacity\",\n    value: function getOpacity() {\n      return (/** @type {number} */this.get(LayerProperty.OPACITY)\n      );\n    }\n    /**\n     * @abstract\n     * @return {import(\"../source/Source.js\").State} Source state.\n     */\n  }, {\n    key: \"getSourceState\",\n    value: function getSourceState() {\n      return abstract();\n    }\n    /**\n     * Return the visibility of the layer (`true` or `false`).\n     * @return {boolean} The visibility of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getVisible\",\n    value: function getVisible() {\n      return (/** @type {boolean} */this.get(LayerProperty.VISIBLE)\n      );\n    }\n    /**\n     * Return the Z-index of the layer, which is used to order layers before\n     * rendering. The default Z-index is 0.\n     * @return {number} The Z-index of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"getZIndex\",\n    value: function getZIndex() {\n      return (/** @type {number} */this.get(LayerProperty.Z_INDEX)\n      );\n    }\n    /**\n     * Sets the background color.\n     * @param {BackgroundColor} [background] Background color.\n     */\n  }, {\n    key: \"setBackground\",\n    value: function setBackground(background) {\n      this.background_ = background;\n      this.changed();\n    }\n    /**\n     * Set the extent at which the layer is visible.  If `undefined`, the layer\n     * will be visible at all extents.\n     * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setExtent\",\n    value: function setExtent(extent) {\n      this.set(LayerProperty.EXTENT, extent);\n    }\n    /**\n     * Set the maximum resolution at which the layer is visible.\n     * @param {number} maxResolution The maximum resolution of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setMaxResolution\",\n    value: function setMaxResolution(maxResolution) {\n      this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n    }\n    /**\n     * Set the minimum resolution at which the layer is visible.\n     * @param {number} minResolution The minimum resolution of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setMinResolution\",\n    value: function setMinResolution(minResolution) {\n      this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n    }\n    /**\n     * Set the maximum zoom (exclusive) at which the layer is visible.\n     * Note that the zoom levels for layer visibility are based on the\n     * view zoom level, which may be different from a tile source zoom level.\n     * @param {number} maxZoom The maximum zoom of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setMaxZoom\",\n    value: function setMaxZoom(maxZoom) {\n      this.set(LayerProperty.MAX_ZOOM, maxZoom);\n    }\n    /**\n     * Set the minimum zoom (inclusive) at which the layer is visible.\n     * Note that the zoom levels for layer visibility are based on the\n     * view zoom level, which may be different from a tile source zoom level.\n     * @param {number} minZoom The minimum zoom of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setMinZoom\",\n    value: function setMinZoom(minZoom) {\n      this.set(LayerProperty.MIN_ZOOM, minZoom);\n    }\n    /**\n     * Set the opacity of the layer, allowed values range from 0 to 1.\n     * @param {number} opacity The opacity of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setOpacity\",\n    value: function setOpacity(opacity) {\n      assert(typeof opacity === 'number', 64); // Layer opacity must be a number\n      this.set(LayerProperty.OPACITY, opacity);\n    }\n    /**\n     * Set the visibility of the layer (`true` or `false`).\n     * @param {boolean} visible The visibility of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setVisible\",\n    value: function setVisible(visible) {\n      this.set(LayerProperty.VISIBLE, visible);\n    }\n    /**\n     * Set Z-index of the layer, which is used to order layers before rendering.\n     * The default Z-index is 0.\n     * @param {number} zindex The z-index of the layer.\n     * @observable\n     * @api\n     */\n  }, {\n    key: \"setZIndex\",\n    value: function setZIndex(zindex) {\n      this.set(LayerProperty.Z_INDEX, zindex);\n    }\n    /**\n     * Clean up.\n     */\n  }, {\n    key: \"disposeInternal\",\n    value: function disposeInternal() {\n      if (this.state_) {\n        this.state_.layer = null;\n        this.state_ = null;\n      }\n      _get(_getPrototypeOf(BaseLayer.prototype), \"disposeInternal\", this).call(this);\n    }\n  }]);\n  return BaseLayer;\n}(BaseObject);\nexport default BaseLayer;","map":null,"metadata":{},"sourceType":"module"}