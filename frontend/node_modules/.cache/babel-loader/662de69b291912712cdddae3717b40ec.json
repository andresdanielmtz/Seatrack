{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { abstract } from '../util.js';\nimport { assert } from '../asserts.js';\nimport { equivalent } from '../proj.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { getForProjection as _getTileGridForProjection, wrapX } from '../tilegrid.js';\nimport { scale as scaleSize, toSize } from '../size.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] CacheSize.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nvar TileSource = /*#__PURE__*/function (_Source) {\n  _inherits(TileSource, _Source);\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  function TileSource(options) {\n    var _this;\n    _classCallCheck(this, TileSource);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TileSource).call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate\n    }));\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n    _this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     */\n    _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n    var tileSize = [256, 256];\n    if (_this.tileGrid) {\n      toSize(_this.tileGrid.getTileSize(_this.tileGrid.getMinZoom()), tileSize);\n    }\n\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n    _this.tileCache = new TileCache(options.cacheSize || 0);\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.key_ = options.key || '';\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    _this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate\n    };\n\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    _this.zDirection = options.zDirection ? options.zDirection : 0;\n    return _this;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  _createClass(TileSource, [{\n    key: \"canExpireCache\",\n    value: function canExpireCache() {\n      return this.tileCache.canExpireCache();\n    }\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {!Object<string, boolean>} usedTiles Used tiles.\n     */\n  }, {\n    key: \"expireCache\",\n    value: function expireCache(projection, usedTiles) {\n      var tileCache = this.getTileCacheForProjection(projection);\n      if (tileCache) {\n        tileCache.expireCache(usedTiles);\n      }\n    }\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @param {number} z Zoom level.\n     * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n     * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n     *     loaded tile.  If the callback returns `false`, the tile will not be\n     *     considered loaded.\n     * @return {boolean} The tile range is fully covered with loaded tiles.\n     */\n  }, {\n    key: \"forEachLoadedTile\",\n    value: function forEachLoadedTile(projection, z, tileRange, callback) {\n      var tileCache = this.getTileCacheForProjection(projection);\n      if (!tileCache) {\n        return false;\n      }\n      var covered = true;\n      var tile, tileCoordKey, loaded;\n      for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          tileCoordKey = getKeyZXY(z, x, y);\n          loaded = false;\n          if (tileCache.containsKey(tileCoordKey)) {\n            tile = /** @type {!import(\"../Tile.js\").default} */\n            tileCache.get(tileCoordKey);\n            loaded = tile.getState() === TileState.LOADED;\n            if (loaded) {\n              loaded = callback(tile) !== false;\n            }\n          }\n          if (!loaded) {\n            covered = false;\n          }\n        }\n      }\n      return covered;\n    }\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {number} Gutter.\n     */\n  }, {\n    key: \"getGutterForProjection\",\n    value: function getGutterForProjection(projection) {\n      return 0;\n    }\n    /**\n     * Return the key to be used for all tiles in the source.\n     * @return {string} The key for all tiles.\n     */\n  }, {\n    key: \"getKey\",\n    value: function getKey() {\n      return this.key_;\n    }\n    /**\n     * Set the value to be used as the key for all tiles in the source.\n     * @param {string} key The key for tiles.\n     * @protected\n     */\n  }, {\n    key: \"setKey\",\n    value: function setKey(key) {\n      if (this.key_ !== key) {\n        this.key_ = key;\n        this.changed();\n      }\n    }\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {boolean} Opaque.\n     */\n  }, {\n    key: \"getOpaque\",\n    value: function getOpaque(projection) {\n      return this.opaque_;\n    }\n    /**\n     * @param {import(\"../proj/Projection\").default} [projection] Projection.\n     * @return {Array<number>|null} Resolutions.\n     */\n  }, {\n    key: \"getResolutions\",\n    value: function getResolutions(projection) {\n      var tileGrid = projection ? this.getTileGridForProjection(projection) : this.tileGrid;\n      if (!tileGrid) {\n        return null;\n      }\n      return tileGrid.getResolutions();\n    }\n    /**\n     * @abstract\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../Tile.js\").default} Tile.\n     */\n  }, {\n    key: \"getTile\",\n    value: function getTile(z, x, y, pixelRatio, projection) {\n      return abstract();\n    }\n    /**\n     * Return the tile grid of the tile source.\n     * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n     * @api\n     */\n  }, {\n    key: \"getTileGrid\",\n    value: function getTileGrid() {\n      return this.tileGrid;\n    }\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n     */\n  }, {\n    key: \"getTileGridForProjection\",\n    value: function getTileGridForProjection(projection) {\n      if (!this.tileGrid) {\n        return _getTileGridForProjection(projection);\n      }\n      return this.tileGrid;\n    }\n    /**\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../TileCache.js\").default} Tile cache.\n     * @protected\n     */\n  }, {\n    key: \"getTileCacheForProjection\",\n    value: function getTileCacheForProjection(projection) {\n      var sourceProjection = this.getProjection();\n      assert(sourceProjection === null || equivalent(sourceProjection, projection), 68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\n      );\n\n      return this.tileCache;\n    }\n    /**\n     * Get the tile pixel ratio for this source. Subclasses may override this\n     * method, which is meant to return a supported pixel ratio that matches the\n     * provided `pixelRatio` as close as possible.\n     * @param {number} pixelRatio Pixel ratio.\n     * @return {number} Tile pixel ratio.\n     */\n  }, {\n    key: \"getTilePixelRatio\",\n    value: function getTilePixelRatio(pixelRatio) {\n      return this.tilePixelRatio_;\n    }\n    /**\n     * @param {number} z Z.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     * @return {import(\"../size.js\").Size} Tile size.\n     */\n  }, {\n    key: \"getTilePixelSize\",\n    value: function getTilePixelSize(z, pixelRatio, projection) {\n      var tileGrid = this.getTileGridForProjection(projection);\n      var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n      var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n      if (tilePixelRatio == 1) {\n        return tileSize;\n      }\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n    /**\n     * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n     * is outside the resolution and extent range of the tile grid, `null` will be\n     * returned.\n     * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n     * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\n     * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n     *     null if no tile URL should be created for the passed `tileCoord`.\n     */\n  }, {\n    key: \"getTileCoordForTileUrlFunction\",\n    value: function getTileCoordForTileUrlFunction(tileCoord, projection) {\n      projection = projection !== undefined ? projection : this.getProjection();\n      var tileGrid = this.getTileGridForProjection(projection);\n      if (this.getWrapX() && projection.isGlobal()) {\n        tileCoord = wrapX(tileGrid, tileCoord, projection);\n      }\n      return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n    }\n    /**\n     * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n     * @api\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.tileCache.clear();\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      this.clear();\n      _get(_getPrototypeOf(TileSource.prototype), \"refresh\", this).call(this);\n    }\n    /**\n     * Increases the cache size if needed\n     * @param {number} tileCount Minimum number of tiles needed.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n  }, {\n    key: \"updateCacheSize\",\n    value: function updateCacheSize(tileCount, projection) {\n      var tileCache = this.getTileCacheForProjection(projection);\n      if (tileCount > tileCache.highWaterMark) {\n        tileCache.highWaterMark = tileCount;\n      }\n    }\n    /**\n     * Marks a tile coord as being used, without triggering a load.\n     * @abstract\n     * @param {number} z Tile coordinate z.\n     * @param {number} x Tile coordinate x.\n     * @param {number} y Tile coordinate y.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n  }, {\n    key: \"useTile\",\n    value: function useTile(z, x, y, projection) {}\n  }]);\n  return TileSource;\n}(Source);\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport var TileSourceEvent = /*#__PURE__*/function (_Event) {\n  _inherits(TileSourceEvent, _Event);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  function TileSourceEvent(type, tile) {\n    var _this2;\n    _classCallCheck(this, TileSourceEvent);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(TileSourceEvent).call(this, type));\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    _this2.tile = tile;\n    return _this2;\n  }\n  return TileSourceEvent;\n}(Event);\nexport default TileSource;","map":null,"metadata":{},"sourceType":"module"}