{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/render/canvas/LineStringBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction, { beginPathInstruction, strokeInstruction } from './Instruction.js';\nimport { defaultLineDash, defaultLineDashOffset } from '../canvas.js';\nvar CanvasLineStringBuilder = /*#__PURE__*/function (_CanvasBuilder) {\n  _inherits(CanvasLineStringBuilder, _CanvasBuilder);\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  function CanvasLineStringBuilder(tolerance, maxExtent, resolution, pixelRatio) {\n    _classCallCheck(this, CanvasLineStringBuilder);\n    return _possibleConstructorReturn(this, _getPrototypeOf(CanvasLineStringBuilder).call(this, tolerance, maxExtent, resolution, pixelRatio));\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} end.\n   */\n  _createClass(CanvasLineStringBuilder, [{\n    key: \"drawFlatCoordinates_\",\n    value: function drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\n      var myBegin = this.coordinates.length;\n      var myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);\n      var moveToLineToInstruction = [CanvasInstruction.MOVE_TO_LINE_TO, myBegin, myEnd];\n      this.instructions.push(moveToLineToInstruction);\n      this.hitDetectionInstructions.push(moveToLineToInstruction);\n      return end;\n    }\n    /**\n     * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} lineStringGeometry Line string geometry.\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     */\n  }, {\n    key: \"drawLineString\",\n    value: function drawLineString(lineStringGeometry, feature) {\n      var state = this.state;\n      var strokeStyle = state.strokeStyle;\n      var lineWidth = state.lineWidth;\n      if (strokeStyle === undefined || lineWidth === undefined) {\n        return;\n      }\n      this.updateStrokeStyle(state, this.applyStroke);\n      this.beginGeometry(lineStringGeometry, feature);\n      this.hitDetectionInstructions.push([CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin, state.miterLimit, defaultLineDash, defaultLineDashOffset], beginPathInstruction);\n      var flatCoordinates = lineStringGeometry.getFlatCoordinates();\n      var stride = lineStringGeometry.getStride();\n      this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);\n      this.hitDetectionInstructions.push(strokeInstruction);\n      this.endGeometry(feature);\n    }\n    /**\n     * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     */\n  }, {\n    key: \"drawMultiLineString\",\n    value: function drawMultiLineString(multiLineStringGeometry, feature) {\n      var state = this.state;\n      var strokeStyle = state.strokeStyle;\n      var lineWidth = state.lineWidth;\n      if (strokeStyle === undefined || lineWidth === undefined) {\n        return;\n      }\n      this.updateStrokeStyle(state, this.applyStroke);\n      this.beginGeometry(multiLineStringGeometry, feature);\n      this.hitDetectionInstructions.push([CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth, state.lineCap, state.lineJoin, state.miterLimit, state.lineDash, state.lineDashOffset], beginPathInstruction);\n      var ends = multiLineStringGeometry.getEnds();\n      var flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\n      var stride = multiLineStringGeometry.getStride();\n      var offset = 0;\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        offset = this.drawFlatCoordinates_(flatCoordinates, offset, /** @type {number} */ends[i], stride);\n      }\n      this.hitDetectionInstructions.push(strokeInstruction);\n      this.endGeometry(feature);\n    }\n    /**\n     * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n     */\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      var state = this.state;\n      if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {\n        this.instructions.push(strokeInstruction);\n      }\n      this.reverseHitDetectionInstructions();\n      this.state = null;\n      return _get(_getPrototypeOf(CanvasLineStringBuilder.prototype), \"finish\", this).call(this);\n    }\n    /**\n     * @param {import(\"../canvas.js\").FillStrokeState} state State.\n     */\n  }, {\n    key: \"applyStroke\",\n    value: function applyStroke(state) {\n      if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {\n        this.instructions.push(strokeInstruction);\n        state.lastStroke = this.coordinates.length;\n      }\n      state.lastStroke = 0;\n      _get(_getPrototypeOf(CanvasLineStringBuilder.prototype), \"applyStroke\", this).call(this, state);\n      this.instructions.push(beginPathInstruction);\n    }\n  }]);\n  return CanvasLineStringBuilder;\n}(CanvasBuilder);\nexport default CanvasLineStringBuilder;","map":null,"metadata":{},"sourceType":"module"}