{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/layer/BaseVector\n */\nimport Layer from './Layer.js';\nimport RBush from 'rbush';\nimport Style, { createDefaultStyle, toFunction as toStyleFunction } from '../style/Style.js';\nimport { toStyle } from '../style/flat.js';\n\n/**\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {VectorSourceType} [source] Source.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all\n * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority\n * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.\n * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has\n * higher priority.\n *\n * As an optimization decluttered features from layers with the same `className` are rendered above\n * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this\n * behavior and place declutterd features with their own layer configure the layer with a `className`\n * other than `ol-layer`.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\n * which will be used if this is not set.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\n * be recreated during animations. This means that no vectors will be shown clipped, but the\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\n * batches will be recreated when no animation is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\n * be recreated during interactions. See also `updateWhileAnimating`.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nvar Property = {\n  RENDER_ORDER: 'renderOrder'\n};\n\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\n * @template {import(\"../renderer/canvas/VectorLayer.js\").default|import(\"../renderer/canvas/VectorTileLayer.js\").default|import(\"../renderer/canvas/VectorImageLayer.js\").default|import(\"../renderer/webgl/PointsLayer.js\").default} RendererType\n * @extends {Layer<VectorSourceType, RendererType>}\n * @api\n */\nvar BaseVectorLayer = /*#__PURE__*/function (_Layer) {\n  _inherits(BaseVectorLayer, _Layer);\n  /**\n   * @param {Options<VectorSourceType>} [options] Options.\n   */\n  function BaseVectorLayer(options) {\n    var _this;\n    _classCallCheck(this, BaseVectorLayer);\n    options = options ? options : {};\n    var baseOptions = Object.assign({}, options);\n    delete baseOptions.style;\n    delete baseOptions.renderBuffer;\n    delete baseOptions.updateWhileAnimating;\n    delete baseOptions.updateWhileInteracting;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseVectorLayer).call(this, baseOptions));\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.declutter_ = options.declutter !== undefined ? options.declutter : false;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.renderBuffer_ = options.renderBuffer !== undefined ? options.renderBuffer : 100;\n\n    /**\n     * User provided style.\n     * @type {import(\"../style/Style.js\").StyleLike}\n     * @private\n     */\n    _this.style_ = null;\n\n    /**\n     * Style function for use within the library.\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\n     * @private\n     */\n    _this.styleFunction_ = undefined;\n    _this.setStyle(options.style);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ? options.updateWhileAnimating : false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ? options.updateWhileInteracting : false;\n    return _this;\n  }\n\n  /**\n   * @return {boolean} Declutter.\n   */\n  _createClass(BaseVectorLayer, [{\n    key: \"getDeclutter\",\n    value: function getDeclutter() {\n      return this.declutter_;\n    }\n    /**\n     * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\n     * that resolves with an array of features. The array will either contain the topmost feature\n     * when a hit was detected, or it will be empty.\n     *\n     * The hit detection algorithm used for this method is optimized for performance, but is less\n     * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\n     * Text is not considered, and icons are only represented by their bounding box instead of the exact\n     * image.\n     *\n     * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n     * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\n     * @api\n     */\n  }, {\n    key: \"getFeatures\",\n    value: function getFeatures(pixel) {\n      return _get(_getPrototypeOf(BaseVectorLayer.prototype), \"getFeatures\", this).call(this, pixel);\n    }\n    /**\n     * @return {number|undefined} Render buffer.\n     */\n  }, {\n    key: \"getRenderBuffer\",\n    value: function getRenderBuffer() {\n      return this.renderBuffer_;\n    }\n    /**\n     * @return {function(import(\"../Feature.js\").default, import(\"../Feature.js\").default): number|null|undefined} Render\n     *     order.\n     */\n  }, {\n    key: \"getRenderOrder\",\n    value: function getRenderOrder() {\n      return (/** @type {import(\"../render.js\").OrderFunction|null|undefined} */\n        this.get(Property.RENDER_ORDER)\n      );\n    }\n    /**\n     * Get the style for features.  This returns whatever was passed to the `style`\n     * option at construction or to the `setStyle` method.\n     * @return {import(\"../style/Style.js\").StyleLike|null|undefined} Layer style.\n     * @api\n     */\n  }, {\n    key: \"getStyle\",\n    value: function getStyle() {\n      return this.style_;\n    }\n    /**\n     * Get the style function.\n     * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\n     * @api\n     */\n  }, {\n    key: \"getStyleFunction\",\n    value: function getStyleFunction() {\n      return this.styleFunction_;\n    }\n    /**\n     * @return {boolean} Whether the rendered layer should be updated while\n     *     animating.\n     */\n  }, {\n    key: \"getUpdateWhileAnimating\",\n    value: function getUpdateWhileAnimating() {\n      return this.updateWhileAnimating_;\n    }\n    /**\n     * @return {boolean} Whether the rendered layer should be updated while\n     *     interacting.\n     */\n  }, {\n    key: \"getUpdateWhileInteracting\",\n    value: function getUpdateWhileInteracting() {\n      return this.updateWhileInteracting_;\n    }\n    /**\n     * Render declutter items for this layer\n     * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n     */\n  }, {\n    key: \"renderDeclutter\",\n    value: function renderDeclutter(frameState) {\n      if (!frameState.declutterTree) {\n        frameState.declutterTree = new RBush(9);\n      }\n      /** @type {*} */\n      this.getRenderer().renderDeclutter(frameState);\n    }\n    /**\n     * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\n     *     Render order.\n     */\n  }, {\n    key: \"setRenderOrder\",\n    value: function setRenderOrder(renderOrder) {\n      this.set(Property.RENDER_ORDER, renderOrder);\n    }\n    /**\n     * Set the style for features.  This can be a single style object, an array\n     * of styles, or a function that takes a feature and resolution and returns\n     * an array of styles. If set to `null`, the layer has no style (a `null` style),\n     * so only features that have their own styles will be rendered in the layer. Call\n     * `setStyle()` without arguments to reset to the default style. See\n     * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.\n     *\n     * If your layer has a static style, you can use \"flat\" style object literals instead of\n     * using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.).  See the documentation\n     * for the [flat style types]{@link module:ol/style/flat~FlatStyle} to see what properties are supported.\n     *\n     * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\n     * @api\n     */\n  }, {\n    key: \"setStyle\",\n    value: function setStyle(style) {\n      /**\n       * @type {import(\"../style/Style.js\").StyleLike|null}\n       */\n      var styleLike;\n      if (style === undefined) {\n        styleLike = createDefaultStyle;\n      } else if (style === null) {\n        styleLike = null;\n      } else if (typeof style === 'function') {\n        styleLike = style;\n      } else if (style instanceof Style) {\n        styleLike = style;\n      } else if (Array.isArray(style)) {\n        var len = style.length;\n\n        /**\n         * @type {Array<Style>}\n         */\n        var styles = new Array(len);\n        for (var i = 0; i < len; ++i) {\n          var s = style[i];\n          if (s instanceof Style) {\n            styles[i] = s;\n          } else {\n            styles[i] = toStyle(s);\n          }\n        }\n        styleLike = styles;\n      } else {\n        styleLike = toStyle(style);\n      }\n      this.style_ = styleLike;\n      this.styleFunction_ = style === null ? undefined : toStyleFunction(this.style_);\n      this.changed();\n    }\n  }]);\n  return BaseVectorLayer;\n}(Layer);\nexport default BaseVectorLayer;","map":null,"metadata":{},"sourceType":"module"}