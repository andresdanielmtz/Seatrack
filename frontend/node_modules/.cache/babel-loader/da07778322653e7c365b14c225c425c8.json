{"ast":null,"code":"import _toConsumableArray from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n/**\n * @module ol/source/Vector\n */\n\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RBush from '../structs/RBush.js';\nimport Source from './Source.js';\nimport VectorEventType from './VectorEventType.js';\nimport { TRUE, VOID } from '../functions.js';\nimport { all as allStrategy } from '../loadingstrategy.js';\nimport { assert } from '../asserts.js';\nimport { containsExtent, equals, wrapAndSliceX } from '../extent.js';\nimport { extend } from '../array.js';\nimport { getUid } from '../util.js';\nimport { isEmpty as _isEmpty } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { xhr } from '../featureloader.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number, import(\"../proj/Projection.js\").default): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this\n * type.\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n */\nexport var VectorSourceEvent = /*#__PURE__*/function (_Event) {\n  _inherits(VectorSourceEvent, _Event);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default<Geometry>} [feature] Feature.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} [features] Features.\n   */\n  function VectorSourceEvent(type, feature, features) {\n    var _this;\n    _classCallCheck(this, VectorSourceEvent);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VectorSourceEvent).call(this, type));\n\n    /**\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\n     * @type {import(\"../Feature.js\").default<Geometry>|undefined}\n     * @api\n     */\n    _this.feature = feature;\n\n    /**\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\n     * @type {Array<import(\"../Feature.js\").default<Geometry>>|undefined}\n     * @api\n     */\n    _this.features = features;\n    return _this;\n  }\n  return VectorSourceEvent;\n}(Event);\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default<Geometry>>|Collection<import(\"../Feature.js\").default<Geometry>>} [features]\n * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\n * will only fire if the `success` and `failure` callbacks are used.\n *\n * Example:\n *\n * ```js\n * import Vector from 'ol/source/Vector.js';\n * import GeoJSON from 'ol/format/GeoJSON.js';\n * import {bbox} from 'ol/loadingstrategy.js';\n *\n * const vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection, success, failure) {\n *      const proj = projection.getCode();\n *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      const xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      const onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *        failure();\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);\n *          vectorSource.addFeatures(features);\n *          success(features);\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox,\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy.all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection~Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n */\nvar VectorSource = /*#__PURE__*/function (_Source) {\n  _inherits(VectorSource, _Source);\n  /**\n   * @param {Options<Geometry>} [options] Vector source options.\n   */\n  function VectorSource(options) {\n    var _this2;\n    _classCallCheck(this, VectorSource);\n    options = options || {};\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(VectorSource).call(this, {\n      attributions: options.attributions,\n      interpolate: true,\n      projection: undefined,\n      state: 'ready',\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    }));\n\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this2.on;\n\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this2.once;\n\n    /***\n     * @type {VectorSourceOnSignature<void>}\n     */\n    _this2.un;\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    _this2.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    _this2.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this2.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    _this2.url_ = options.url;\n    if (options.loader !== undefined) {\n      _this2.loader_ = options.loader;\n    } else if (_this2.url_ !== undefined) {\n      assert(_this2.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n      _this2.loader_ = xhr(_this2.url_, /** @type {import(\"../format/Feature.js\").default} */_this2.format_);\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    _this2.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n    var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this2.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    _this2.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    _this2.loadingExtentsCount_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this2.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this2.idIndex_ = {};\n\n    /**\n     * A lookup of features by uid (using getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this2.uidIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    _this2.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default<Geometry>>|null}\n     */\n    _this2.featuresCollection_ = null;\n\n    /** @type {Collection<import(\"../Feature.js\").default<Geometry>>} */\n    var collection;\n    /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */\n    var features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      _this2.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      _this2.bindFeaturesCollection_(collection);\n    }\n    return _this2;\n  }\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,\n   * meaning that if a feature with a duplicate id is added in the collection, it will\n   * be removed from it right away.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\n   * @api\n   */\n  _createClass(VectorSource, [{\n    key: \"addFeature\",\n    value: function addFeature(feature) {\n      this.addFeatureInternal(feature);\n      this.changed();\n    }\n    /**\n     * Add a feature without firing a `change` event.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     * @protected\n     */\n  }, {\n    key: \"addFeatureInternal\",\n    value: function addFeatureInternal(feature) {\n      var featureKey = getUid(feature);\n      if (!this.addToIndex_(featureKey, feature)) {\n        if (this.featuresCollection_) {\n          this.featuresCollection_.remove(feature);\n        }\n        return;\n      }\n      this.setupChangeEvents_(featureKey, feature);\n      var geometry = feature.getGeometry();\n      if (geometry) {\n        var extent = geometry.getExtent();\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n    }\n    /**\n     * @param {string} featureKey Unique identifier for the feature.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n     * @private\n     */\n  }, {\n    key: \"setupChangeEvents_\",\n    value: function setupChangeEvents_(featureKey, feature) {\n      this.featureChangeKeys_[featureKey] = [listen(feature, EventType.CHANGE, this.handleFeatureChange_, this), listen(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this)];\n    }\n    /**\n     * @param {string} featureKey Unique identifier for the feature.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n     * @return {boolean} The feature is \"valid\", in the sense that it is also a\n     *     candidate for insertion into the Rtree.\n     * @private\n     */\n  }, {\n    key: \"addToIndex_\",\n    value: function addToIndex_(featureKey, feature) {\n      var valid = true;\n      var id = feature.getId();\n      if (id !== undefined) {\n        if (!(id.toString() in this.idIndex_)) {\n          this.idIndex_[id.toString()] = feature;\n        } else {\n          valid = false;\n        }\n      }\n      if (valid) {\n        assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source\n        this.uidIndex_[featureKey] = feature;\n      }\n      return valid;\n    }\n    /**\n     * Add a batch of features to the source.\n     * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\n     * @api\n     */\n  }, {\n    key: \"addFeatures\",\n    value: function addFeatures(features) {\n      this.addFeaturesInternal(features);\n      this.changed();\n    }\n    /**\n     * Add features without firing a `change` event.\n     * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\n     * @protected\n     */\n  }, {\n    key: \"addFeaturesInternal\",\n    value: function addFeaturesInternal(features) {\n      var extents = [];\n      var newFeatures = [];\n      var geometryFeatures = [];\n      for (var i = 0, length = features.length; i < length; i++) {\n        var feature = features[i];\n        var featureKey = getUid(feature);\n        if (this.addToIndex_(featureKey, feature)) {\n          newFeatures.push(feature);\n        }\n      }\n      for (var _i = 0, _length = newFeatures.length; _i < _length; _i++) {\n        var _feature = newFeatures[_i];\n        var _featureKey = getUid(_feature);\n        this.setupChangeEvents_(_featureKey, _feature);\n        var geometry = _feature.getGeometry();\n        if (geometry) {\n          var extent = geometry.getExtent();\n          extents.push(extent);\n          geometryFeatures.push(_feature);\n        } else {\n          this.nullGeometryFeatures_[_featureKey] = _feature;\n        }\n      }\n      if (this.featuresRtree_) {\n        this.featuresRtree_.load(extents, geometryFeatures);\n      }\n      if (this.hasListener(VectorEventType.ADDFEATURE)) {\n        for (var _i2 = 0, _length2 = newFeatures.length; _i2 < _length2; _i2++) {\n          this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[_i2]));\n        }\n      }\n    }\n    /**\n     * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\n     * @private\n     */\n  }, {\n    key: \"bindFeaturesCollection_\",\n    value: function bindFeaturesCollection_(collection) {\n      var _this3 = this;\n      var modifyingCollection = false;\n      this.addEventListener(VectorEventType.ADDFEATURE,\n      /**\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.push(evt.feature);\n          modifyingCollection = false;\n        }\n      });\n      this.addEventListener(VectorEventType.REMOVEFEATURE,\n      /**\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.remove(evt.feature);\n          modifyingCollection = false;\n        }\n      });\n      collection.addEventListener(CollectionEventType.ADD,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent<import(\"../Feature.js\").default<Geometry>>} evt The collection event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          _this3.addFeature(evt.element);\n          modifyingCollection = false;\n        }\n      });\n      collection.addEventListener(CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent<import(\"../Feature.js\").default<Geometry>>} evt The collection event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          _this3.removeFeature(evt.element);\n          modifyingCollection = false;\n        }\n      });\n      this.featuresCollection_ = collection;\n    }\n    /**\n     * Remove all features from the source.\n     * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.\n     * @api\n     */\n  }, {\n    key: \"clear\",\n    value: function clear(fast) {\n      var _this4 = this;\n      if (fast) {\n        for (var featureId in this.featureChangeKeys_) {\n          var keys = this.featureChangeKeys_[featureId];\n          keys.forEach(unlistenByKey);\n        }\n        if (!this.featuresCollection_) {\n          this.featureChangeKeys_ = {};\n          this.idIndex_ = {};\n          this.uidIndex_ = {};\n        }\n      } else {\n        if (this.featuresRtree_) {\n          var removeAndIgnoreReturn = function removeAndIgnoreReturn(feature) {\n            _this4.removeFeatureInternal(feature);\n          };\n          this.featuresRtree_.forEach(removeAndIgnoreReturn);\n          for (var id in this.nullGeometryFeatures_) {\n            this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n          }\n        }\n      }\n      if (this.featuresCollection_) {\n        this.featuresCollection_.clear();\n      }\n      if (this.featuresRtree_) {\n        this.featuresRtree_.clear();\n      }\n      this.nullGeometryFeatures_ = {};\n      var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n      this.dispatchEvent(clearEvent);\n      this.changed();\n    }\n    /**\n     * Iterate through all features on the source, calling the provided callback\n     * with each one.  If the callback returns any \"truthy\" value, iteration will\n     * stop and the function will return the same value.\n     * Note: this function only iterate through the feature that have a defined geometry.\n     *\n     * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n     *     on the source.  Return a truthy value to stop iteration.\n     * @return {T|undefined} The return value from the last call to the callback.\n     * @template T\n     * @api\n     */\n  }, {\n    key: \"forEachFeature\",\n    value: function forEachFeature(callback) {\n      if (this.featuresRtree_) {\n        return this.featuresRtree_.forEach(callback);\n      } else if (this.featuresCollection_) {\n        this.featuresCollection_.forEach(callback);\n      }\n    }\n    /**\n     * Iterate through all features whose geometries contain the provided\n     * coordinate, calling the callback with each feature.  If the callback returns\n     * a \"truthy\" value, iteration will stop and the function will return the same\n     * value.\n     *\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n     *     whose goemetry contains the provided coordinate.\n     * @return {T|undefined} The return value from the last call to the callback.\n     * @template T\n     */\n  }, {\n    key: \"forEachFeatureAtCoordinateDirect\",\n    value: function forEachFeatureAtCoordinateDirect(coordinate, callback) {\n      var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n      return this.forEachFeatureInExtent(extent, function (feature) {\n        var geometry = feature.getGeometry();\n        if (geometry.intersectsCoordinate(coordinate)) {\n          return callback(feature);\n        }\n        return undefined;\n      });\n    }\n    /**\n     * Iterate through all features whose bounding box intersects the provided\n     * extent (note that the feature's geometry may not intersect the extent),\n     * calling the callback with each feature.  If the callback returns a \"truthy\"\n     * value, iteration will stop and the function will return the same value.\n     *\n     * If you are interested in features whose geometry intersects an extent, call\n     * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n     *\n     * When `useSpatialIndex` is set to false, this method will loop through all\n     * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n     *\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n     *     whose bounding box intersects the provided extent.\n     * @return {T|undefined} The return value from the last call to the callback.\n     * @template T\n     * @api\n     */\n  }, {\n    key: \"forEachFeatureInExtent\",\n    value: function forEachFeatureInExtent(extent, callback) {\n      if (this.featuresRtree_) {\n        return this.featuresRtree_.forEachInExtent(extent, callback);\n      } else if (this.featuresCollection_) {\n        this.featuresCollection_.forEach(callback);\n      }\n    }\n    /**\n     * Iterate through all features whose geometry intersects the provided extent,\n     * calling the callback with each feature.  If the callback returns a \"truthy\"\n     * value, iteration will stop and the function will return the same value.\n     *\n     * If you only want to test for bounding box intersection, call the\n     * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n     *\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n     *     whose geometry intersects the provided extent.\n     * @return {T|undefined} The return value from the last call to the callback.\n     * @template T\n     * @api\n     */\n  }, {\n    key: \"forEachFeatureIntersectingExtent\",\n    value: function forEachFeatureIntersectingExtent(extent, callback) {\n      return this.forEachFeatureInExtent(extent,\n      /**\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n       * @return {T|undefined} The return value from the last call to the callback.\n       */\n      function (feature) {\n        var geometry = feature.getGeometry();\n        if (geometry.intersectsExtent(extent)) {\n          var result = callback(feature);\n          if (result) {\n            return result;\n          }\n        }\n      });\n    }\n    /**\n     * Get the features collection associated with this source. Will be `null`\n     * unless the source was configured with `useSpatialIndex` set to `false`, or\n     * with an {@link module:ol/Collection~Collection} as `features`.\n     * @return {Collection<import(\"../Feature.js\").default<Geometry>>|null} The collection of features.\n     * @api\n     */\n  }, {\n    key: \"getFeaturesCollection\",\n    value: function getFeaturesCollection() {\n      return this.featuresCollection_;\n    }\n    /**\n     * Get a snapshot of the features currently on the source in random order. The returned array\n     * is a copy, the features are references to the features in the source.\n     * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n     * @api\n     */\n  }, {\n    key: \"getFeatures\",\n    value: function getFeatures() {\n      var features;\n      if (this.featuresCollection_) {\n        features = this.featuresCollection_.getArray().slice(0);\n      } else if (this.featuresRtree_) {\n        features = this.featuresRtree_.getAll();\n        if (!_isEmpty(this.nullGeometryFeatures_)) {\n          extend(features, Object.values(this.nullGeometryFeatures_));\n        }\n      }\n      return (/** @type {Array<import(\"../Feature.js\").default<Geometry>>} */\n        features\n      );\n    }\n    /**\n     * Get all features whose geometry intersects the provided coordinate.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n     * @api\n     */\n  }, {\n    key: \"getFeaturesAtCoordinate\",\n    value: function getFeaturesAtCoordinate(coordinate) {\n      var features = [];\n      this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n        features.push(feature);\n      });\n      return features;\n    }\n    /**\n     * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n     * all features intersecting the given extent in random order (so it may include\n     * features whose geometries do not intersect the extent).\n     *\n     * When `useSpatialIndex` is set to false, this method will return all\n     * features.\n     *\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {import(\"../proj/Projection.js\").default} [projection] Include features\n     * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.\n     * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n     * @api\n     */\n  }, {\n    key: \"getFeaturesInExtent\",\n    value: function getFeaturesInExtent(extent, projection) {\n      var _this5 = this;\n      if (this.featuresRtree_) {\n        var _ref;\n        var multiWorld = projection && projection.canWrapX() && this.getWrapX();\n        if (!multiWorld) {\n          return this.featuresRtree_.getInExtent(extent);\n        }\n        var extents = wrapAndSliceX(extent, projection);\n        return (_ref = []).concat.apply(_ref, _toConsumableArray(extents.map(function (anExtent) {\n          return _this5.featuresRtree_.getInExtent(anExtent);\n        })));\n      } else if (this.featuresCollection_) {\n        return this.featuresCollection_.getArray().slice(0);\n      }\n      return [];\n    }\n    /**\n     * Get the closest feature to the provided coordinate.\n     *\n     * This method is not available when the source is configured with\n     * `useSpatialIndex` set to `false`.\n     * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @param {function(import(\"../Feature.js\").default<Geometry>):boolean} [filter] Feature filter function.\n     *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}\n     *     and it should return a boolean value. By default, no filtering is made.\n     * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\n     * @api\n     */\n  }, {\n    key: \"getClosestFeatureToCoordinate\",\n    value: function getClosestFeatureToCoordinate(coordinate, filter) {\n      // Find the closest feature using branch and bound.  We start searching an\n      // infinite extent, and find the distance from the first feature found.  This\n      // becomes the closest feature.  We then compute a smaller extent which any\n      // closer feature must intersect.  We continue searching with this smaller\n      // extent, trying to find a closer feature.  Every time we find a closer\n      // feature, we update the extent being searched so that any even closer\n      // feature must intersect it.  We continue until we run out of features.\n      var x = coordinate[0];\n      var y = coordinate[1];\n      var closestFeature = null;\n      var closestPoint = [NaN, NaN];\n      var minSquaredDistance = Infinity;\n      var extent = [-Infinity, -Infinity, Infinity, Infinity];\n      filter = filter ? filter : TRUE;\n      this.featuresRtree_.forEachInExtent(extent,\n      /**\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n       */\n      function (feature) {\n        if (filter(feature)) {\n          var geometry = feature.getGeometry();\n          var previousMinSquaredDistance = minSquaredDistance;\n          minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n          if (minSquaredDistance < previousMinSquaredDistance) {\n            closestFeature = feature;\n            // This is sneaky.  Reduce the extent that it is currently being\n            // searched while the R-Tree traversal using this same extent object\n            // is still in progress.  This is safe because the new extent is\n            // strictly contained by the old extent.\n            var minDistance = Math.sqrt(minSquaredDistance);\n            extent[0] = x - minDistance;\n            extent[1] = y - minDistance;\n            extent[2] = x + minDistance;\n            extent[3] = y + minDistance;\n          }\n        }\n      });\n      return closestFeature;\n    }\n    /**\n     * Get the extent of the features currently in the source.\n     *\n     * This method is not available when the source is configured with\n     * `useSpatialIndex` set to `false`.\n     * @param {import(\"../extent.js\").Extent} [extent] Destination extent. If provided, no new extent\n     *     will be created. Instead, that extent's coordinates will be overwritten.\n     * @return {import(\"../extent.js\").Extent} Extent.\n     * @api\n     */\n  }, {\n    key: \"getExtent\",\n    value: function getExtent(extent) {\n      return this.featuresRtree_.getExtent(extent);\n    }\n    /**\n     * Get a feature by its identifier (the value returned by feature.getId()).\n     * Note that the index treats string and numeric identifiers as the same.  So\n     * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n     *\n     * @param {string|number} id Feature identifier.\n     * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\n     * @api\n     */\n  }, {\n    key: \"getFeatureById\",\n    value: function getFeatureById(id) {\n      var feature = this.idIndex_[id.toString()];\n      return feature !== undefined ? feature : null;\n    }\n    /**\n     * Get a feature by its internal unique identifier (using `getUid`).\n     *\n     * @param {string} uid Feature identifier.\n     * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\n     */\n  }, {\n    key: \"getFeatureByUid\",\n    value: function getFeatureByUid(uid) {\n      var feature = this.uidIndex_[uid];\n      return feature !== undefined ? feature : null;\n    }\n    /**\n     * Get the format associated with this source.\n     *\n     * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n     * @api\n     */\n  }, {\n    key: \"getFormat\",\n    value: function getFormat() {\n      return this.format_;\n    }\n    /**\n     * @return {boolean} The source can have overlapping geometries.\n     */\n  }, {\n    key: \"getOverlaps\",\n    value: function getOverlaps() {\n      return this.overlaps_;\n    }\n    /**\n     * Get the url associated with this source.\n     *\n     * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n     * @api\n     */\n  }, {\n    key: \"getUrl\",\n    value: function getUrl() {\n      return this.url_;\n    }\n    /**\n     * @param {Event} event Event.\n     * @private\n     */\n  }, {\n    key: \"handleFeatureChange_\",\n    value: function handleFeatureChange_(event) {\n      var feature = /** @type {import(\"../Feature.js\").default<Geometry>} */\n      event.target;\n      var featureKey = getUid(feature);\n      var geometry = feature.getGeometry();\n      if (!geometry) {\n        if (!(featureKey in this.nullGeometryFeatures_)) {\n          if (this.featuresRtree_) {\n            this.featuresRtree_.remove(feature);\n          }\n          this.nullGeometryFeatures_[featureKey] = feature;\n        }\n      } else {\n        var extent = geometry.getExtent();\n        if (featureKey in this.nullGeometryFeatures_) {\n          delete this.nullGeometryFeatures_[featureKey];\n          if (this.featuresRtree_) {\n            this.featuresRtree_.insert(extent, feature);\n          }\n        } else {\n          if (this.featuresRtree_) {\n            this.featuresRtree_.update(extent, feature);\n          }\n        }\n      }\n      var id = feature.getId();\n      if (id !== undefined) {\n        var sid = id.toString();\n        if (this.idIndex_[sid] !== feature) {\n          this.removeFromIdIndex_(feature);\n          this.idIndex_[sid] = feature;\n        }\n      } else {\n        this.removeFromIdIndex_(feature);\n        this.uidIndex_[featureKey] = feature;\n      }\n      this.changed();\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));\n    }\n    /**\n     * Returns true if the feature is contained within the source.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     * @return {boolean} Has feature.\n     * @api\n     */\n  }, {\n    key: \"hasFeature\",\n    value: function hasFeature(feature) {\n      var id = feature.getId();\n      if (id !== undefined) {\n        return id in this.idIndex_;\n      }\n      return getUid(feature) in this.uidIndex_;\n    }\n    /**\n     * @return {boolean} Is empty.\n     */\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      if (this.featuresRtree_) {\n        return this.featuresRtree_.isEmpty() && _isEmpty(this.nullGeometryFeatures_);\n      }\n      if (this.featuresCollection_) {\n        return this.featuresCollection_.getLength() === 0;\n      }\n      return true;\n    }\n    /**\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\n     */\n  }, {\n    key: \"loadFeatures\",\n    value: function loadFeatures(extent, resolution, projection) {\n      var _this6 = this;\n      var loadedExtentsRtree = this.loadedExtentsRtree_;\n      var extentsToLoad = this.strategy_(extent, resolution, projection);\n      var _loop = function _loop() {\n        var extentToLoad = extentsToLoad[i];\n        var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n        /**\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n         * @return {boolean} Contains.\n         */\n        function (object) {\n          return containsExtent(object.extent, extentToLoad);\n        });\n        if (!alreadyLoaded) {\n          ++_this6.loadingExtentsCount_;\n          _this6.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADSTART));\n          _this6.loader_.call(_this6, extentToLoad, resolution, projection, function (features) {\n            --_this6.loadingExtentsCount_;\n            _this6.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADEND, undefined, features));\n          }, function () {\n            --_this6.loadingExtentsCount_;\n            _this6.dispatchEvent(new VectorSourceEvent(VectorEventType.FEATURESLOADERROR));\n          });\n          loadedExtentsRtree.insert(extentToLoad, {\n            extent: extentToLoad.slice()\n          });\n        }\n      };\n      for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n        _loop();\n      }\n      this.loading = this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      this.clear(true);\n      this.loadedExtentsRtree_.clear();\n      _get(_getPrototypeOf(VectorSource.prototype), \"refresh\", this).call(this);\n    }\n    /**\n     * Remove an extent from the list of loaded extents.\n     * @param {import(\"../extent.js\").Extent} extent Extent.\n     * @api\n     */\n  }, {\n    key: \"removeLoadedExtent\",\n    value: function removeLoadedExtent(extent) {\n      var loadedExtentsRtree = this.loadedExtentsRtree_;\n      var obj;\n      loadedExtentsRtree.forEachInExtent(extent, function (object) {\n        if (equals(object.extent, extent)) {\n          obj = object;\n          return true;\n        }\n      });\n      if (obj) {\n        loadedExtentsRtree.remove(obj);\n      }\n    }\n    /**\n     * Remove a single feature from the source.  If you want to remove all features\n     * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n     * instead.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\n     * @api\n     */\n  }, {\n    key: \"removeFeature\",\n    value: function removeFeature(feature) {\n      if (!feature) {\n        return;\n      }\n      var featureKey = getUid(feature);\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n      }\n      var result = this.removeFeatureInternal(feature);\n      if (result) {\n        this.changed();\n      }\n    }\n    /**\n     * Remove feature without firing a `change` event.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     * @return {import(\"../Feature.js\").default<Geometry>|undefined} The removed feature\n     *     (or undefined if the feature was not found).\n     * @protected\n     */\n  }, {\n    key: \"removeFeatureInternal\",\n    value: function removeFeatureInternal(feature) {\n      var featureKey = getUid(feature);\n      var featureChangeKeys = this.featureChangeKeys_[featureKey];\n      if (!featureChangeKeys) {\n        return;\n      }\n      featureChangeKeys.forEach(unlistenByKey);\n      delete this.featureChangeKeys_[featureKey];\n      var id = feature.getId();\n      if (id !== undefined) {\n        delete this.idIndex_[id.toString()];\n      }\n      delete this.uidIndex_[featureKey];\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));\n      return feature;\n    }\n    /**\n     * Remove a feature from the id index.  Called internally when the feature id\n     * may have changed.\n     * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n     * @return {boolean} Removed the feature from the index.\n     * @private\n     */\n  }, {\n    key: \"removeFromIdIndex_\",\n    value: function removeFromIdIndex_(feature) {\n      var removed = false;\n      for (var id in this.idIndex_) {\n        if (this.idIndex_[id] === feature) {\n          delete this.idIndex_[id];\n          removed = true;\n          break;\n        }\n      }\n      return removed;\n    }\n    /**\n     * Set the new loader of the source. The next render cycle will use the\n     * new loader.\n     * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n     * @api\n     */\n  }, {\n    key: \"setLoader\",\n    value: function setLoader(loader) {\n      this.loader_ = loader;\n    }\n    /**\n     * Points the source to a new url. The next render cycle will use the new url.\n     * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n     * @api\n     */\n  }, {\n    key: \"setUrl\",\n    value: function setUrl(url) {\n      assert(this.format_, 7); // `format` must be set when `url` is set\n      this.url_ = url;\n      this.setLoader(xhr(url, this.format_));\n    }\n  }]);\n  return VectorSource;\n}(Source);\nexport default VectorSource;","map":null,"metadata":{},"sourceType":"module"}