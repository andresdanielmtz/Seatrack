{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _get from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n/**\n * @module ol/VectorRenderTile\n */\nimport Tile from './Tile.js';\nimport { createCanvasContext2D, releaseCanvas } from './dom.js';\nimport { getUid } from './util.js';\n\n/**\n * @typedef {Object} ReplayState\n * @property {boolean} dirty Dirty.\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\n * @property {number} renderedTileRevision RenderedTileRevision.\n * @property {number} renderedResolution RenderedResolution.\n * @property {number} renderedRevision RenderedRevision.\n * @property {number} renderedTileResolution RenderedTileResolution.\n * @property {number} renderedTileZ RenderedTileZ.\n */\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nvar canvasPool = [];\nvar VectorRenderTile = /*#__PURE__*/function (_Tile) {\n  _inherits(VectorRenderTile, _Tile);\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\n   * to get source tiles for this tile.\n   */\n  function VectorRenderTile(tileCoord, state, urlTileCoord, getSourceTiles) {\n    var _this;\n    _classCallCheck(this, VectorRenderTile);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VectorRenderTile).call(this, tileCoord, state, {\n      transition: 0\n    }));\n\n    /**\n     * @private\n     * @type {!Object<string, CanvasRenderingContext2D>}\n     */\n    _this.context_ = {};\n\n    /**\n     * Executor groups by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n    _this.executorGroups = {};\n\n    /**\n     * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n    _this.declutterExecutorGroups = {};\n\n    /**\n     * Number of loading source tiles. Read/written by the source.\n     * @type {number}\n     */\n    _this.loadingSourceTiles = 0;\n\n    /**\n     * @type {Object<number, ImageData>}\n     */\n    _this.hitDetectionImageData = {};\n\n    /**\n     * @private\n     * @type {!Object<string, ReplayState>}\n     */\n    _this.replayState_ = {};\n\n    /**\n     * @type {Array<import(\"./VectorTile.js\").default>}\n     */\n    _this.sourceTiles = [];\n\n    /**\n     * @type {Object<string, boolean>}\n     */\n    _this.errorTileKeys = {};\n\n    /**\n     * @type {number}\n     */\n    _this.wantedResolution;\n\n    /**\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\n     */\n    _this.getSourceTiles = getSourceTiles.bind(undefined, _assertThisInitialized(_assertThisInitialized(_this)));\n\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n    _this.wrappedTileCoord = urlTileCoord;\n    return _this;\n  }\n\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {CanvasRenderingContext2D} The rendering context.\n   */\n  _createClass(VectorRenderTile, [{\n    key: \"getContext\",\n    value: function getContext(layer) {\n      var key = getUid(layer);\n      if (!(key in this.context_)) {\n        this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\n      }\n      return this.context_[key];\n    }\n    /**\n     * @param {import(\"./layer/Layer.js\").default} layer Layer.\n     * @return {boolean} Tile has a rendering context for the given layer.\n     */\n  }, {\n    key: \"hasContext\",\n    value: function hasContext(layer) {\n      return getUid(layer) in this.context_;\n    }\n    /**\n     * Get the Canvas for this tile.\n     * @param {import(\"./layer/Layer.js\").default} layer Layer.\n     * @return {HTMLCanvasElement} Canvas.\n     */\n  }, {\n    key: \"getImage\",\n    value: function getImage(layer) {\n      return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n    }\n    /**\n     * @param {import(\"./layer/Layer.js\").default} layer Layer.\n     * @return {ReplayState} The replay state.\n     */\n  }, {\n    key: \"getReplayState\",\n    value: function getReplayState(layer) {\n      var key = getUid(layer);\n      if (!(key in this.replayState_)) {\n        this.replayState_[key] = {\n          dirty: false,\n          renderedRenderOrder: null,\n          renderedResolution: NaN,\n          renderedRevision: -1,\n          renderedTileResolution: NaN,\n          renderedTileRevision: -1,\n          renderedTileZ: -1\n        };\n      }\n      return this.replayState_[key];\n    }\n    /**\n     * Load the tile.\n     */\n  }, {\n    key: \"load\",\n    value: function load() {\n      this.getSourceTiles();\n    }\n    /**\n     * Remove from the cache due to expiry\n     */\n  }, {\n    key: \"release\",\n    value: function release() {\n      for (var key in this.context_) {\n        var context = this.context_[key];\n        releaseCanvas(context);\n        canvasPool.push(context.canvas);\n        delete this.context_[key];\n      }\n      _get(_getPrototypeOf(VectorRenderTile.prototype), \"release\", this).call(this);\n    }\n  }]);\n  return VectorRenderTile;\n}(Tile);\nexport default VectorRenderTile;","map":null,"metadata":{},"sourceType":"module"}