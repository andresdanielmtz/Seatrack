{"ast":null,"code":"import _classCallCheck from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/kapigoku/Documents/Cosas/Programacio\\u0301n/Phyton/Seatrack/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\n/**\n * @module ol/control/Attribution\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { equals } from '../array.js';\nimport { inView } from '../layer/Layer.js';\nimport { removeChildren, replaceNode } from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string|HTMLElement} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\n * collapsed attributions button.\n * @property {string|HTMLElement} [collapseLabel='â€º'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\n * expanded attributions button.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nvar Attribution = /*#__PURE__*/function (_Control) {\n  _inherits(Attribution, _Control);\n  /**\n   * @param {Options} [options] Attribution options.\n   */\n  function Attribution(options) {\n    var _this;\n    _classCallCheck(this, Attribution);\n    options = options ? options : {};\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Attribution).call(this, {\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    }));\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.ulElement_ = document.createElement('ul');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.userCollapsed_ = _this.collapsed_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.overrideCollapsible_ = options.collapsible !== undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n    if (!_this.collapsible_) {\n      _this.collapsed_ = false;\n    }\n    var className = options.className !== undefined ? options.className : 'ol-attribution';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n    var expandClassName = options.expandClassName !== undefined ? options.expandClassName : className + '-expand';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : \"\\u203A\";\n    var collapseClassName = options.collapseClassName !== undefined ? options.collapseClassName : className + '-collapse';\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.collapseLabel_ = document.createElement('span');\n      _this.collapseLabel_.textContent = collapseLabel;\n      _this.collapseLabel_.className = collapseClassName;\n    } else {\n      _this.collapseLabel_ = collapseLabel;\n    }\n    var label = options.label !== undefined ? options.label : 'i';\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.label_ = document.createElement('span');\n      _this.label_.textContent = label;\n      _this.label_.className = expandClassName;\n    } else {\n      _this.label_ = label;\n    }\n    var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.toggleButton_ = document.createElement('button');\n    _this.toggleButton_.setAttribute('type', 'button');\n    _this.toggleButton_.setAttribute('aria-expanded', String(!_this.collapsed_));\n    _this.toggleButton_.title = tipLabel;\n    _this.toggleButton_.appendChild(activeLabel);\n    _this.toggleButton_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_assertThisInitialized(_assertThisInitialized(_this))), false);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (_this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.toggleButton_);\n    element.appendChild(_this.ulElement_);\n\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n    _this.renderedAttributions_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.renderedVisible_ = true;\n    return _this;\n  }\n\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n  _createClass(Attribution, [{\n    key: \"collectSourceAttributions_\",\n    value: function collectSourceAttributions_(frameState) {\n      /**\n       * Used to determine if an attribution already exists.\n       * @type {!Object<string, boolean>}\n       */\n      var lookup = {};\n\n      /**\n       * A list of visible attributions.\n       * @type {Array<string>}\n       */\n      var visibleAttributions = [];\n      var collapsible = true;\n      var layerStatesArray = frameState.layerStatesArray;\n      for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n        var layerState = layerStatesArray[i];\n        if (!inView(layerState, frameState.viewState)) {\n          continue;\n        }\n        var source = /** @type {import(\"../layer/Layer.js\").default} */layerState.layer.getSource();\n        if (!source) {\n          continue;\n        }\n        var attributionGetter = source.getAttributions();\n        if (!attributionGetter) {\n          continue;\n        }\n        var attributions = attributionGetter(frameState);\n        if (!attributions) {\n          continue;\n        }\n        collapsible = collapsible && source.getAttributionsCollapsible() !== false;\n        if (Array.isArray(attributions)) {\n          for (var j = 0, jj = attributions.length; j < jj; ++j) {\n            if (!(attributions[j] in lookup)) {\n              visibleAttributions.push(attributions[j]);\n              lookup[attributions[j]] = true;\n            }\n          }\n        } else {\n          if (!(attributions in lookup)) {\n            visibleAttributions.push(attributions);\n            lookup[attributions] = true;\n          }\n        }\n      }\n      if (!this.overrideCollapsible_) {\n        this.setCollapsible(collapsible);\n      }\n      return visibleAttributions;\n    }\n    /**\n     * @private\n     * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n     */\n  }, {\n    key: \"updateElement_\",\n    value: function updateElement_(frameState) {\n      if (!frameState) {\n        if (this.renderedVisible_) {\n          this.element.style.display = 'none';\n          this.renderedVisible_ = false;\n        }\n        return;\n      }\n      var attributions = this.collectSourceAttributions_(frameState);\n      var visible = attributions.length > 0;\n      if (this.renderedVisible_ != visible) {\n        this.element.style.display = visible ? '' : 'none';\n        this.renderedVisible_ = visible;\n      }\n      if (equals(attributions, this.renderedAttributions_)) {\n        return;\n      }\n      removeChildren(this.ulElement_);\n\n      // append the attributions\n      for (var i = 0, ii = attributions.length; i < ii; ++i) {\n        var element = document.createElement('li');\n        element.innerHTML = attributions[i];\n        this.ulElement_.appendChild(element);\n      }\n      this.renderedAttributions_ = attributions;\n    }\n    /**\n     * @param {MouseEvent} event The event to handle\n     * @private\n     */\n  }, {\n    key: \"handleClick_\",\n    value: function handleClick_(event) {\n      event.preventDefault();\n      this.handleToggle_();\n      this.userCollapsed_ = this.collapsed_;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"handleToggle_\",\n    value: function handleToggle_() {\n      this.element.classList.toggle(CLASS_COLLAPSED);\n      if (this.collapsed_) {\n        replaceNode(this.collapseLabel_, this.label_);\n      } else {\n        replaceNode(this.label_, this.collapseLabel_);\n      }\n      this.collapsed_ = !this.collapsed_;\n      this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n    }\n    /**\n     * Return `true` if the attribution is collapsible, `false` otherwise.\n     * @return {boolean} True if the widget is collapsible.\n     * @api\n     */\n  }, {\n    key: \"getCollapsible\",\n    value: function getCollapsible() {\n      return this.collapsible_;\n    }\n    /**\n     * Set whether the attribution should be collapsible.\n     * @param {boolean} collapsible True if the widget is collapsible.\n     * @api\n     */\n  }, {\n    key: \"setCollapsible\",\n    value: function setCollapsible(collapsible) {\n      if (this.collapsible_ === collapsible) {\n        return;\n      }\n      this.collapsible_ = collapsible;\n      this.element.classList.toggle('ol-uncollapsible');\n      if (this.userCollapsed_) {\n        this.handleToggle_();\n      }\n    }\n    /**\n     * Collapse or expand the attribution according to the passed parameter. Will\n     * not do anything if the attribution isn't collapsible or if the current\n     * collapsed state is already the one requested.\n     * @param {boolean} collapsed True if the widget is collapsed.\n     * @api\n     */\n  }, {\n    key: \"setCollapsed\",\n    value: function setCollapsed(collapsed) {\n      this.userCollapsed_ = collapsed;\n      if (!this.collapsible_ || this.collapsed_ === collapsed) {\n        return;\n      }\n      this.handleToggle_();\n    }\n    /**\n     * Return `true` when the attribution is currently collapsed or `false`\n     * otherwise.\n     * @return {boolean} True if the widget is collapsed.\n     * @api\n     */\n  }, {\n    key: \"getCollapsed\",\n    value: function getCollapsed() {\n      return this.collapsed_;\n    }\n    /**\n     * Update the attribution element.\n     * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n     * @override\n     */\n  }, {\n    key: \"render\",\n    value: function render(mapEvent) {\n      this.updateElement_(mapEvent.frameState);\n    }\n  }]);\n  return Attribution;\n}(Control);\nexport default Attribution;","map":null,"metadata":{},"sourceType":"module"}